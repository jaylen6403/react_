{
  "swagger": "2.0",
  "info": {
    "description": "Boston Service REST APIs",
    "version": "1.0",
    "title": "Boston Service"
  },
  "host": "bdev.lumafintech.com",
  "basePath": "/api/secondary-market-service",
  "tags": [
    { "name": "company-controller", "description": "Company Controller" },
    { "name": "expiration-controller", "description": "Expiration Controller" },
    { "name": "order-controller", "description": "Order Controller" },
    { "name": "quote-controller", "description": "Quote Controller" },
    {
      "name": "request-for-quote-controller",
      "description": "Request For Quote Controller"
    },
    {
      "name": "security-details-controller",
      "description": "Security Details Controller"
    }
  ],
  "paths": {
    "/company": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Get Companies",
        "description": "Returns a list of all Companies",
        "operationId": "getCompaniesUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "filterByRole",
            "in": "query",
            "description": "filterByRole",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CompanyV2" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/company/countries": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Get Contries",
        "description": "Returns country information",
        "operationId": "getCountriesUsingGET",
        "produces": ["*/*"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Country" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/company/permissions": {
      "get": {
        "tags": ["company-controller"],
        "summary": "Get permissions",
        "description": "Returns a list of permissions",
        "operationId": "getDataPermissionsUsingGET",
        "produces": ["*/*"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/CompanyPermission" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/orders": {
      "post": {
        "tags": ["order-controller"],
        "summary": "Saves a new Order.",
        "description": "Returns 201 when order is saved. Returns 500 if order fails to save.",
        "operationId": "createOrderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": { "$ref": "#/definitions/SecondaryOrder" }
          },
          {
            "name": "timerSeconds",
            "in": "query",
            "description": "timerSeconds",
            "required": false,
            "type": "integer",
            "default": 30,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryOrder" }
          },
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/orders/user": {
      "get": {
        "tags": ["order-controller"],
        "summary": "Returns all Orders for current user either as LT or LP",
        "description": "Returns all Orders for current user either as LT or LP",
        "operationId": "getOrdersByUserIdUsingGET",
        "produces": ["*/*"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryOrder" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": ["order-controller"],
        "summary": "Returns order by orderId",
        "description": "Returns order by orderId",
        "operationId": "getOrderUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryOrder" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/orders/{orderId}/fill": {
      "put": {
        "tags": ["order-controller"],
        "summary": "Fulfill a Secondary Order",
        "description": "Update Existing order status to FILLED",
        "operationId": "fillOrderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryOrder" }
          },
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/orders/{orderId}/reject": {
      "put": {
        "tags": ["order-controller"],
        "summary": "Reject a Secondary Order",
        "description": "Update Existing order status to REJECTED",
        "operationId": "rejectOrderUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryOrder" }
          },
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/quotes": {
      "post": {
        "tags": ["quote-controller"],
        "summary": "Create New Quote",
        "description": "Create New Quote",
        "operationId": "createQuoteUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "secondaryQuote",
            "description": "secondaryQuote",
            "required": true,
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          },
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/quotes/expire": {
      "patch": {
        "tags": ["quote-controller"],
        "summary": "Update Existing Quote if Good Until Time passes",
        "description": "Update status of expired Quote",
        "operationId": "expireQuoteUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "requestId",
            "in": "query",
            "description": "requestId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "responseId",
            "in": "query",
            "description": "responseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "204": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/quotes/{responseId}/price-and-expire-time": {
      "put": {
        "tags": ["quote-controller"],
        "summary": "Update Existing Quote Price and Good Until Time",
        "description": "Update Existing Quote Price and Good Until Time",
        "operationId": "updateQuotePriceAndGoodUntilTimeUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "quoteAmount",
            "in": "query",
            "description": "quoteAmount",
            "required": true,
            "type": "number"
          },
          {
            "name": "requestId",
            "in": "query",
            "description": "requestId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "responseId",
            "in": "path",
            "description": "responseId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "time",
            "in": "query",
            "description": "time",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          },
          "201": { "description": "Created" },
          "204": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/rfqs": {
      "get": {
        "tags": ["request-for-quote-controller"],
        "summary": "Returns all Secondary RFQs",
        "description": "Returns all RFQs",
        "operationId": "getAllRequestForQuotesUsingGET",
        "produces": ["*/*"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryRequestForQuote" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["request-for-quote-controller"],
        "summary": "Update Existing Secondary RFQ",
        "description": "Update Existing RFQ",
        "operationId": "updateRequestForQuoteUsingPUT",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "rfq",
            "description": "rfq",
            "required": true,
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "201": { "description": "Created" },
          "204": {
            "description": "Updated",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/rfqs/multi-requests": {
      "post": {
        "tags": ["request-for-quote-controller"],
        "summary": "Create List of New Secondary RFQs",
        "description": "Create List of New Secondary RFQs",
        "operationId": "createMultipleRequestForQuotesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "rfqs",
            "description": "rfqs",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryRequestForQuote" }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryRequestForQuote" }
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryRequestForQuote" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/rfqs/today": {
      "get": {
        "tags": ["request-for-quote-controller"],
        "summary": "Returns all Secondary RFQs for the current market day",
        "description": "Returns all Secondary RFQs for the current market day",
        "operationId": "getRequestForQuotesFromTodayUsingGET",
        "produces": ["*/*"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SecondaryRequestForQuote" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/rfqs/{requestId}": {
      "get": {
        "tags": ["request-for-quote-controller"],
        "summary": "Returns all Secondary RFQs by RequestId",
        "description": "Returns all RFQs by RequestId",
        "operationId": "getRequestForQuoteByIdUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/rfqs/{requestId}/cancel": {
      "post": {
        "tags": ["request-for-quote-controller"],
        "summary": "Cancel Secondary RFQ by ID",
        "description": "Cancel RFQ",
        "operationId": "cancelRequestForQuoteByRequestIdUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "201": { "description": "Created" },
          "204": {
            "description": "Canceled",
            "schema": { "$ref": "#/definitions/SecondaryRequestForQuote" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/security-details/product/{identifier}": {
      "get": {
        "tags": ["security-details-controller"],
        "summary": "Get Product containing relevant Security Details by Identifier (cusip, isin, id)",
        "operationId": "getProductsByIdentifierUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/Product" }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/security-details/products": {
      "get": {
        "tags": ["security-details-controller"],
        "summary": "Get a List of Products containing Security Details with optional page params (size, page)",
        "operationId": "getProductsUsingGET",
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.sorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort.unsorted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "unpaged",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Product" }
            }
          },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/security-details/products/searchCriteria": {
      "post": {
        "tags": ["security-details-controller"],
        "summary": "Get a List of Products containing Security Details through search criteria",
        "operationId": "getProductsBySearchCriteriaUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "searchOptions",
            "description": "searchOptions",
            "required": true,
            "schema": { "$ref": "#/definitions/SearchOptions" }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Product" }
            }
          },
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/security-details/search": {
      "post": {
        "tags": ["security-details-controller"],
        "summary": "Get Security Details with a search criteria",
        "description": "Returns a List of Products containing relevant Security Details with optional parameters of 'page' and 'size' for paging",
        "operationId": "getProductsBySearchUsingPOST",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "params",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            }
          },
          {
            "in": "body",
            "name": "searchOptions",
            "description": "searchOptions",
            "required": true,
            "schema": { "$ref": "#/definitions/SearchOptions" }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Product" }
            }
          },
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    },
    "/status/expire": {
      "patch": {
        "tags": ["expiration-controller"],
        "summary": "Update Existing Secondary RFQ if Good Until Time passes",
        "description": "Update status of expired RFQ",
        "operationId": "expireSecondaryRecordsUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["*/*"],
        "parameters": [
          {
            "in": "body",
            "name": "expiredItems",
            "description": "expiredItems",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "ref": "Map" }
            }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "204": { "description": "Expired" },
          "400": { "description": "Bad Request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" },
          "500": { "description": "Internal Server Exception" }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AccumulationDecumulationDate": {
      "type": "object",
      "properties": {
        "periodEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "End date of the accumulation or decumulation for each period"
        },
        "settlementDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Settlement date of the accumulation or decumulation for each period"
        }
      },
      "title": "AccumulationDecumulationDate"
    },
    "AccumulatorDecumulator": {
      "type": "object",
      "properties": {
        "accumulationDecumulationDateList": {
          "type": "array",
          "description": "A list of accumulation or decumulation dates",
          "items": { "$ref": "#/definitions/AccumulationDecumulationDate" }
        },
        "leverage": {
          "type": "number",
          "format": "double",
          "example": 2.0,
          "description": "Number of shares to be purchased/sold on days when underlying is below/above strike price"
        },
        "numberOfShares": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Number of shares to be purchased/sold per day"
        },
        "settlementFrequency": {
          "type": "string",
          "description": "Settlement frequency for the accumulation or decumulation, how frequently will the shares be delivered",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "strike": {
          "type": "number",
          "format": "double",
          "example": 0.95,
          "description": "Strike percentage"
        },
        "strikeObservationFixingType": {
          "type": "string",
          "description": "Type of observation",
          "enum": ["Daily", "Continuous", "European"]
        },
        "strikeObservationFrequency": {
          "type": "string",
          "description": "Frequency of strike observation",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "totalNumberOfObservationDates": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Number of total observation dates of the product"
        }
      },
      "title": "AccumulatorDecumulator"
    },
    "CallSchedule": {
      "type": "object",
      "properties": {
        "callBarrierLevelStepValue": {
          "type": "number",
          "format": "double",
          "description": "Step value for the given observation date - the value at which the call will occur - in percentage terms"
        },
        "callObservationDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Call observation date for the product"
        },
        "callPremiumStepValue": {
          "type": "number",
          "format": "double",
          "description": "Step premium for the given observation date - the premium received when called - in percentage terms"
        },
        "callScheduleUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the given observation date",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "callSettlementDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Call settlement date for each call observation list"
        }
      },
      "title": "CallSchedule"
    },
    "ClientReoffer": {
      "type": "object",
      "properties": {
        "reofferClientName": {
          "type": "string",
          "example": "Morgan Stanley Wealth Management",
          "description": "Name of Luma client that product can be offered to. This must be a client ID field, not a client name, Luma will provide appropriate client IDs"
        },
        "reofferClientRateCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.975,
          "description": "Reoffer rate for client as the current rate in products when solving for reoffer"
        },
        "reofferClientRateFinal": {
          "type": "number",
          "format": "double",
          "example": 0.975,
          "description": "Final reoffer value if solved for.  if not solved for this field is used for client reoffer"
        },
        "reofferClientRateHigh": {
          "type": "number",
          "format": "double",
          "example": 0.975,
          "description": "high end of ranged value if solved for.  If no high level is solved for reoffer will be listed as \"at least\""
        },
        "reofferClientRateLow": {
          "type": "number",
          "format": "double",
          "example": 0.975,
          "description": "Low end of ranged value if solved for.  If no high level is solved for reoffer will be listed as \"at least\""
        }
      },
      "title": "ClientReoffer"
    },
    "ClientSpecific": {
      "type": "object",
      "properties": {
        "breakpointShares": { "type": "number", "format": "double" },
        "broadOffering": { "type": "string", "enum": ["No", "Yes"] },
        "clientProductId": { "type": "string" },
        "coreApproval": { "type": "string", "enum": ["Core", "Non-Core"] },
        "dealBackup": { "type": "array", "items": { "type": "string" } },
        "dealLead": { "type": "array", "items": { "type": "string" } },
        "firstPaymentDate": {
          "type": "string",
          "format": "date",
          "description": "First product payment date"
        },
        "interestPeriod": {
          "type": "string",
          "enum": ["Short", "Standard", "Long"]
        },
        "internalTradingDesk": { "type": "string" },
        "issuerCreditCode": { "type": "string" },
        "legalPrintEstimate": { "type": "number", "format": "double" },
        "legalTeam": { "type": "string" },
        "locked": {
          "type": "boolean",
          "example": false,
          "description": "a field that determines if it is an intraday trade"
        },
        "numBreakpointInvestors": { "type": "number", "format": "double" },
        "offeringNotification": {
          "$ref": "#/definitions/OfferingNotification"
        },
        "offeringScope": { "type": "string", "enum": ["Broad", "Tailored"] },
        "offshoreEligibility": {
          "type": "string",
          "enum": ["No", "Yes", "Offshore Only"]
        },
        "proceedToOfferingStatus": {
          "$ref": "#/definitions/ProceedToOfferingStatus"
        },
        "productCode": {
          "type": "string",
          "enum": ["ELNP", "ELNS", "ELNC", "ELNE", "CORP", "CORN"]
        },
        "productSymbol": { "type": "string" },
        "prosRequestId": { "type": "string", "format": "uuid" },
        "pvFundingLessFeesPercentage": { "type": "number", "format": "double" },
        "ramCode": { "type": "string" },
        "securityId": { "type": "string" },
        "splitIds": { "type": "array", "items": { "type": "string" } },
        "trader": { "type": "string" }
      },
      "title": "ClientSpecific"
    },
    "CompanyPermission": {
      "type": "object",
      "properties": {
        "permission": { "type": "string" },
        "sourceCompany": { "type": "string" },
        "targetCompany": { "type": "string" }
      },
      "title": "CompanyPermission"
    },
    "CompanyV2": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int32" },
        "name": { "type": "string" },
        "parentName": { "type": "string" },
        "roleNames": { "type": "array", "items": { "type": "string" } }
      },
      "title": "CompanyV2"
    },
    "Country": {
      "type": "object",
      "properties": {
        "countryCode": { "type": "string" },
        "countryName": { "type": "string" },
        "id": { "type": "integer", "format": "int32" },
        "region": { "type": "string" }
      },
      "title": "Country"
    },
    "ExternalDocumentProvider": {
      "type": "object",
      "properties": {
        "externalDocumentProviderId": {
          "type": "string",
          "description": "ID of the external doc provider (Client specific field)"
        },
        "legalReview": {
          "type": "string",
          "description": "Defines if a Legal Review is required (Client specific field)",
          "enum": ["Yes", "No"]
        },
        "secLink": {
          "type": "string",
          "description": "Secuirty Doc link for the product (Client specific field)"
        },
        "taxReview": {
          "type": "string",
          "description": "Defines if a Tax Review is required (Client specific field)",
          "enum": ["Yes", "No"]
        }
      },
      "title": "ExternalDocumentProvider"
    },
    "IssuerDocumentSEC": {
      "type": "object",
      "properties": {
        "docType": { "type": "string", "enum": ["Termsheet", "KID"] },
        "documentId": { "type": "string" },
        "encodedPDF": { "type": "string" },
        "isFinal": {
          "type": "boolean",
          "description": "Only used with certain types of documents."
        },
        "jurisdiction": {
          "type": "string",
          "enum": [
            "Switzerland",
            "Germany",
            "Italy",
            "France",
            "Spain",
            "Portugal",
            "United Kingdom",
            "Netherlands",
            "Belgium",
            "Luxembourg",
            "Austria",
            "Ireland",
            "Sweden",
            "Finland",
            "Norway",
            "Denmark",
            "Israel",
            "UAE",
            "South Africa",
            "USA",
            "Mexico",
            "Panama",
            "Colombia",
            "Peru",
            "Chile",
            "Uruguay",
            "Argentina",
            "Paraguay",
            "Puerto Rico",
            "Ecuador",
            "Hong Kong",
            "Singapore",
            "Canada"
          ]
        },
        "language": {
          "type": "string",
          "description": "The language that the document is written in. The list here is not final",
          "enum": ["EN", "ES", "ZH", "FR", "DE", "IT", "PT", "RU", "SV"]
        },
        "link": { "type": "string" },
        "orderId": { "type": "string" },
        "password": { "type": "string" },
        "quoteId": { "type": "string" },
        "quoteProvider": { "type": "string" },
        "quoteProviderOrderId": { "type": "string" },
        "quoteProviderQuoteId": { "type": "string" },
        "username": { "type": "string" }
      },
      "title": "IssuerDocumentSEC"
    },
    "LeverageFactor": {
      "type": "object",
      "properties": {
        "leverageFactor": { "type": "number", "format": "double" },
        "leverageFactorEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for variable coupon products where days above the barrier are evaluated vs total days * interest rate to derive payment"
        },
        "leverageFactorStartDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for variable coupon products where days above the barrier are evaluated vs total days * interest rate to derive payment"
        }
      },
      "title": "LeverageFactor"
    },
    "MatchInformation": {
      "type": "object",
      "properties": {
        "matchAccepted": {
          "type": "boolean",
          "example": false,
          "description": "Match accepted (Client specific field)"
        },
        "matchEligible": {
          "type": "boolean",
          "example": false,
          "description": "Defines if the product is eligible for matching or not (Client specific field)"
        },
        "matchNotional": {
          "type": "number",
          "format": "double",
          "description": "Notional of the match (Client specific field)"
        },
        "matchNotionalExternalCP": {
          "type": "number",
          "format": "double",
          "description": "Notional amount of external counterparty match (Client specific field)"
        },
        "matchNotionalInternalCP": {
          "type": "number",
          "format": "double",
          "description": "Notional amount of internal counterparty match (Client specific field)"
        },
        "matchPending": {
          "type": "boolean",
          "example": false,
          "description": "Match Pending (Client specific field)"
        },
        "matchPercentage": {
          "type": "number",
          "format": "double",
          "description": "What percentage of the issuance is able to be matched (Client specific field)"
        },
        "matchRejected": {
          "type": "boolean",
          "example": false,
          "description": "Match Rejected (Client specific field)"
        }
      },
      "title": "MatchInformation"
    },
    "OfferingNotification": {
      "type": "object",
      "properties": {
        "dismissed": { "type": "boolean" },
        "uuid": { "type": "string", "format": "uuid" }
      },
      "title": "OfferingNotification"
    },
    "Optional«string»": {
      "type": "object",
      "properties": {
        "empty": { "type": "boolean" },
        "present": { "type": "boolean" }
      },
      "title": "Optional«string»"
    },
    "PaymentSchedule": {
      "type": "object",
      "properties": {
        "bifurcationOfInterest": {
          "type": "boolean",
          "example": false,
          "description": "If Interest is bifurcated for the product this will divide between interest and option premium"
        },
        "interest": {
          "type": "number",
          "format": "double",
          "description": "Interest portion of payment"
        },
        "optionPremium": {
          "type": "number",
          "format": "double",
          "description": "Option premium portion of payment"
        },
        "paymentBarrierLevel": { "type": "number", "format": "double" },
        "paymentObservationDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "observation Date of coupon payment"
        },
        "paymentRate": {
          "type": "number",
          "format": "double",
          "example": 0.05
        },
        "paymentResetDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Payment reset date"
        },
        "paymentSettlementDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "settlement date of coupon payment"
        }
      },
      "title": "PaymentSchedule"
    },
    "ProceedToOfferingStatus": {
      "type": "object",
      "properties": {
        "createOfferWithIB": {
          "type": "string",
          "enum": ["InProgress", "DataReceived", "DocsReceived", "Error"]
        },
        "createOfferWithOrderingSystem": {
          "type": "string",
          "enum": ["InProgress", "Complete", "Error"]
        },
        "errors": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "uploadDocstoOrderingSystem": {
          "type": "string",
          "enum": ["InProgress", "Complete", "Error"]
        },
        "uuid": { "type": "string", "format": "uuid" }
      },
      "title": "ProceedToOfferingStatus"
    },
    "Product": {
      "type": "object",
      "required": [
        "productCall",
        "productGeneral",
        "productGrowth",
        "productProtection",
        "productYield"
      ],
      "properties": {
        "accumulatorDecumulator": {
          "$ref": "#/definitions/AccumulatorDecumulator"
        },
        "clientSpecific": { "$ref": "#/definitions/ClientSpecific" },
        "createTimestamp": { "type": "string", "format": "date-time" },
        "createdByUserId": { "type": "string" },
        "productCall": { "$ref": "#/definitions/ProductCall" },
        "productCln": { "$ref": "#/definitions/ProductCln" },
        "productCms": { "$ref": "#/definitions/ProductCms" },
        "productGeneral": { "$ref": "#/definitions/ProductGeneral" },
        "productGrowth": { "$ref": "#/definitions/ProductGrowth" },
        "productId": { "type": "string", "format": "uuid" },
        "productProtection": { "$ref": "#/definitions/ProductProtection" },
        "productRegulatory": { "$ref": "#/definitions/ProductRegulatory" },
        "productScenarios": { "$ref": "#/definitions/ProductScenarios" },
        "productYield": { "$ref": "#/definitions/ProductYield" },
        "quotes": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/ProductQuote" }
        },
        "revision": { "type": "integer", "format": "int64" },
        "updateTimestamp": { "type": "string", "format": "date-time" },
        "updatedByUserId": { "type": "string" }
      },
      "title": "Product"
    },
    "ProductCall": {
      "type": "object",
      "properties": {
        "callBarrierLevelCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Current call level (hurdle level), updated during a marketing period and this is a solve for value"
        },
        "callBarrierLevelFinal": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call level (hurdle level), Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "callBarrierLevelHigh": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call level (hurdle level), high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "callBarrierLevelLow": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call level (hurdle level) low end for a marketing period, if not provided will be used as an \"at least value\""
        },
        "callBarrierLevelUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for call premium",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "callBarrierStepIncrement": {
          "type": "number",
          "format": "double",
          "example": 1.2,
          "description": "amount the payment barrier is stepping up or down before the observation dates"
        },
        "callBasketType": {
          "type": "string",
          "description": "Basket Type of the product's call.",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "callCrossing": {
          "type": "string",
          "description": "This field shows if the given underlying(s) has to cross or just touch the call barrier level to breach it.",
          "enum": ["Below", "At or Below", "Above", "At or Above"]
        },
        "callMemory": {
          "type": "boolean",
          "description": "This field shows if the product's call has a memory feature. The product can redeem if all the underliers reached the call barrier level at least once, that doesn't have to be in the same time."
        },
        "callObservationDateList": {
          "type": "array",
          "description": "Call Dates For All Callable Products",
          "items": { "$ref": "#/definitions/CallSchedule" }
        },
        "callObservationFrequency": {
          "type": "string",
          "description": "Frequency of call observations for this product",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "callPeriodObservationType": {
          "type": "string",
          "example": "Daily",
          "description": "Observation type within each call period as noted in product details to allow for intra-period barrier breaches",
          "enum": ["Daily", "Continuous", "European"]
        },
        "callPremiumCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Current call premium, updated during a marketing period and this is a solve for value"
        },
        "callPremiumFinal": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call premium, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "callPremiumHigh": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call premium, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "callPremiumLow": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Call premium low end for a marketing period, if not provided will be used as an \"at least value\""
        },
        "callPremiumStepIncrement": {
          "type": "number",
          "format": "double",
          "example": 1.2,
          "description": "amount the payment premium is stepping up or down before the observation dates"
        },
        "callType": {
          "type": "string",
          "example": "Issuer",
          "description": "Call type. Enum value.",
          "enum": ["Issuer", "Auto", "Autocall Step", "Null"]
        },
        "expectedMaturity": {
          "type": "string",
          "format": "date",
          "description": "Expected maturity date of the executed product"
        },
        "numberNoCallPeriods": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Total Number Of No Call Periods In Any Callable Product.  To Be Used In Conjunction With Call Frequency Field"
        },
        "stepType": {
          "type": "string",
          "description": "Step direction of the call level (up or down)",
          "enum": ["Up", "Down"]
        }
      },
      "title": "ProductCall"
    },
    "ProductCln": {
      "type": "object",
      "properties": {
        "cdsName": { "type": "string", "description": "CDS name for product" },
        "cdsTenor": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "CDS Tenor for product"
        },
        "creditEvent": { "type": "string", "description": "Credit" },
        "debtIsinList": {
          "type": "array",
          "description": "List of ISINs for debt related to CLN issuance",
          "items": { "type": "string" }
        },
        "debtWeightList": {
          "type": "array",
          "description": "Weighting of each debt instrument, if applicable",
          "items": { "type": "string" }
        },
        "fixedCouponMultiplier": {
          "type": "string",
          "description": "Fixed coupon multiplier for each year of tenor"
        },
        "floatInstrument": {
          "type": "string",
          "description": "Defines the float instrument for the trade, e.g. 3mL"
        },
        "floatRateFixingOffsetDays": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "Fixing rate offset from start of interest period, if applicable"
        },
        "floatRateFixingSchedule": {
          "type": "array",
          "example": "2020-01-31,2020-02-28",
          "description": "Fixing dates of interest periods",
          "items": { "ref": "LocalDate" }
        },
        "floatRateFixingTime": {
          "type": "string",
          "description": "Time of interest fixing on fixing rate"
        },
        "interestMultiplierPerYear": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "Interest multiplier for fixed coupon CLNs, if applicable"
        },
        "rateBarrierLevel": {
          "type": "array",
          "description": "Rate to be used as a barrier level when determining if a conditional coupon will be paid",
          "items": { "$ref": "#/definitions/RateBarrierLevel" }
        },
        "rateBarrierObservationFrequency": {
          "type": "string",
          "description": "Frequency the barrier for the rate is observed."
        },
        "rateCap": {
          "type": "array",
          "description": "Cap applied to a rate derived as a result of looking at a rate or spread of two rates",
          "items": { "$ref": "#/definitions/RateCap" }
        },
        "rateConditionalCoupon": {
          "type": "array",
          "description": "Coupon rate paid if the rate barrier is not breached on an observation date",
          "items": { "$ref": "#/definitions/RateConditionalCoupon" }
        },
        "rateMin": {
          "type": "array",
          "description": "Min rate applied to a rate derived as a result of looking at a rate or spread of a rate",
          "items": { "$ref": "#/definitions/RateMin" }
        },
        "ratePaymentType": {
          "type": "string",
          "description": "Rate payment types"
        }
      },
      "title": "ProductCln"
    },
    "ProductCms": {
      "type": "object",
      "properties": {
        "longTermRateUnderlierSource": {
          "type": "string",
          "enum": ["Bloomberg", "RIC"]
        },
        "longTermRateUnderlierSymbol": { "type": "string" },
        "shortTermRateUnderlierSource": {
          "type": "string",
          "enum": ["Bloomberg", "RIC"]
        },
        "shortTermRateUnderlierSymbol": { "type": "string" }
      },
      "title": "ProductCms"
    },
    "ProductGeneral": {
      "type": "object",
      "required": ["tenorUnit", "wrapperType"],
      "properties": {
        "accountType": {
          "type": "string",
          "example": "Advisory",
          "description": "Fee Based or Brokerage Account",
          "enum": ["Advisory", "Brokerage"]
        },
        "ancillaryFeatures": {
          "type": "array",
          "description": "Ancillary feature list that define the additional features of the base product such as Averaging in and out, min return, min coupon, etc.",
          "items": {
            "type": "string",
            "enum": [
              "With Lookback Initial",
              "With Lookback Final",
              "With Coupon Memory",
              "With Minimum Return",
              "With Minimum Coupon",
              "With Averaging In",
              "With Averaging Out",
              "With Modified Averaging In",
              "With Modified Averaging Out",
              "With Supplemental",
              "With Knock Out"
            ]
          }
        },
        "assetClass": {
          "type": "string",
          "description": "asset class of the underliers associated with the product, derived by Luma, not submitted by Issuer partners"
        },
        "averagingExclusion": {
          "type": "string",
          "description": "Averaging to Exclude",
          "enum": ["High", "Low"]
        },
        "averagingInDates": {
          "type": "array",
          "example": "2020-01-30,2020-02-01",
          "description": "list of averaging dates used for averaging in on the trade",
          "items": { "type": "string" }
        },
        "averagingModified": {
          "type": "boolean",
          "example": false,
          "description": "Is Averaging Modified"
        },
        "averagingOutDates": {
          "type": "array",
          "example": "2020-01-30,2020-02-01",
          "description": "list of averaging dates used for averaging out on the trade",
          "items": { "type": "string" }
        },
        "basketReturnAdjustment": {
          "type": "number",
          "format": "double",
          "example": 0.97,
          "description": "Value for adjusting underlier levels when doing calculations."
        },
        "basketType": {
          "type": "string",
          "example": "Equal",
          "description": "Required for multiple underliers. Defines how each underlier is applied to share value. Equal – Performance Basket, each UL performance is utilized in calculation (Cliquet, Min/Max) Custom – Custom Weighted Basket WoF – Worst Of BoF – Best Of Out Performance – performance difference between multiple underliers is used for calculation ",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "bidDeadlineTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Deadline For Bid Prices To Be Submitted To Luma For The Quote In Question"
        },
        "businessDayConvention": {
          "type": "string",
          "enum": [
            "Following",
            "Modified Following",
            "Previous",
            "End of Month Following",
            "No Adjustment",
            "Modified Previous",
            "End of Month No Adjustment",
            "End of Month Previous"
          ]
        },
        "calculationAgent": {
          "type": "string",
          "example": "JPMorgane Chase Bank",
          "description": "Calculation agent of trade if not issuing entity"
        },
        "completionStatus": {
          "type": "string",
          "description": "Indicates whether or not the features of the product are fully supported within PDW. Complete denotes that all product features are supported and associated to the product within PDW. Incomplete denotes that the product contains features that will be supported within PDW at a future time. Custom denotes that the product contains features that Luma has decided it will not support.",
          "enum": ["Complete", "Incomplete", "Custom"]
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency Of Product Not Of Underlying Asset(S)",
          "enum": [
            "USD",
            "EUR",
            "GBP",
            "JPY",
            "RUB",
            "CAD",
            "MXN",
            "CNY",
            "INR",
            "CHF",
            "SEK",
            "ARS",
            "AUD",
            "BRL",
            "CLP",
            "COP",
            "CZK",
            "DKK",
            "HKD",
            "HUF",
            "IDR",
            "ISK",
            "KRW",
            "MYR",
            "NOK",
            "NZD",
            "PEN",
            "PHP",
            "PLN",
            "SGD",
            "THB",
            "TRY",
            "TWD",
            "ZAR"
          ]
        },
        "cusip": {
          "type": "string",
          "example": "05572YFZ0",
          "description": "Product Cusip - required for US based product.  Not required for pricing requests"
        },
        "dateOffset": { "type": "integer", "format": "int32" },
        "dayCountFraction": { "type": "string" },
        "estimatedInitialValue": {
          "type": "number",
          "description": "Estimated initial value of the product at the time of trading"
        },
        "externalBasketName": {
          "type": "string",
          "example": "TechBasket",
          "description": "Optional supplied basket name for repeatedly used baskets"
        },
        "externalDocumentProvider": {
          "$ref": "#/definitions/ExternalDocumentProvider"
        },
        "externalProductId": {
          "type": "string",
          "description": "Product ID assigned on the issuer's end"
        },
        "fairPriceFinal": {
          "type": "number",
          "format": "double",
          "example": 96.38,
          "description": "Fair price returned during final execution."
        },
        "fdicInsured": {
          "type": "boolean",
          "example": false,
          "description": "is the product an FDIC insured CD or a note product"
        },
        "finalValuationDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "Final valuation date (not averaging dates), when return is calculated"
        },
        "fundingSpread": {
          "type": "array",
          "description": "Funding Spread of the product (Client specific field), Values can be negative or positive in “bps” or Basis Points. Allow for up to 2 decimal places",
          "items": { "type": "number", "format": "double" }
        },
        "fundservID": {
          "type": "string",
          "description": "fundserv ID with numbers and letters."
        },
        "highWaterMarkDate": {
          "type": "string",
          "format": "date",
          "example": "Sun Jan 30 00:00:00 UTC 2022",
          "description": "Date the high Water Market is taken from"
        },
        "indicativeDeadlineTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Time and Date to start displaying product from in platform.  This is in UTC"
        },
        "isin": {
          "type": "string",
          "example": "US0004026250",
          "description": "Product ISIN - Required for all Products.  Not required for pricing requests"
        },
        "issueDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "Initial settlement date of the product, must be after the trade date"
        },
        "issuePriceCurrent": {
          "type": "number",
          "format": "double",
          "description": "Issue Price is the price at which the products are offered for sale when they first become available on the issue date"
        },
        "issuePriceFinal": {
          "type": "number",
          "format": "double",
          "description": "Issue Price is the price at which the products are offered for sale when they first become available on the issue date"
        },
        "issuePriceHigh": {
          "type": "number",
          "format": "double",
          "description": "Issue Price is the price at which the products are offered for sale when they first become available on the issue date"
        },
        "issuePriceLow": {
          "type": "number",
          "format": "double",
          "description": "Issue Price is the price at which the products are offered for sale when they first become available on the issue date"
        },
        "issuer": {
          "type": "string",
          "example": "JPMorgan Chase Bank N.A.",
          "description": "Name of the issuing entity for this product."
        },
        "longTermCapitalGain": { "type": "boolean", "example": false },
        "lookbackFinalDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "Final date for Lookback"
        },
        "lookbackFinalValuationType": {
          "type": "string",
          "description": "Final ValuationType",
          "enum": ["Min", "Max"]
        },
        "lookbackInitialDate": {
          "type": "string",
          "format": "date",
          "example": "Sun Jan 30 00:00:00 UTC 2022",
          "description": "Date the Low Water Market is taken from"
        },
        "lookbackInitialValuationType": {
          "type": "string",
          "description": "Initial ValuationType",
          "enum": ["Min", "Max"]
        },
        "lumaProductIdentifier": {
          "type": "string",
          "format": "uuid",
          "description": "Unique Luma Product Identifier"
        },
        "matchInformation": { "$ref": "#/definitions/MatchInformation" },
        "maturityDate": {
          "type": "string",
          "format": "date",
          "example": "Sun Jan 30 00:00:00 UTC 2022",
          "description": "Date of which the product matures and pays out principal due."
        },
        "minimumTradingLot": { "type": "number", "format": "double" },
        "offeringType": {
          "type": "string",
          "description": "Offering Type refers to the number of investors the product will be marketed to. Private placement is the sale of stock to only one or a few investors (usually institutional investors). Public offering is an offer of new common stock to the general public.",
          "enum": ["Private Placement", "Public Offering"]
        },
        "oisDfPercentage": {
          "type": "number",
          "format": "double",
          "description": "Overnight Index Swap Discount Factor"
        },
        "originator": {
          "type": "string",
          "description": "Originating Entity of the Product or the Product Request that led to the Product"
        },
        "performanceStrike": {
          "type": "number",
          "format": "double",
          "example": 0.97,
          "description": "The percentage of underlier performance at which performance calculations are based."
        },
        "productCategory": {
          "type": "string",
          "enum": [
            "Capital Protection",
            "Yield",
            "Participation",
            "Leverage",
            "Credit",
            "OTC"
          ]
        },
        "productDeadlineTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The latest time that orders can be confirmed"
        },
        "productFaceValue": {
          "type": "number",
          "format": "double",
          "example": 1000.0,
          "description": "face value of each unit of the product"
        },
        "productLaunchTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Time and Date to start displaying product from in platform.  This is in UTC"
        },
        "productName": {
          "type": "string",
          "example": "2 Year 5.25% p.a. Autocallable Contingent Interest Yield note linked to S&P 500",
          "description": "Product Name - Luma derived if empty"
        },
        "productNoteList": {
          "type": "array",
          "description": "Freeform Notes for the related product",
          "items": { "type": "string" }
        },
        "productNotionalCap": {
          "type": "number",
          "example": 1.0e7,
          "description": "Issuer limit on order size maximum"
        },
        "productNotionalCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.0e7,
          "description": "Product Notional at the current time, or as noted by client during pricing requests"
        },
        "productNotionalFinal": {
          "type": "number",
          "format": "double",
          "example": 1.0e7,
          "description": "Final notional value of the product."
        },
        "productNotionalHigh": {
          "type": "number",
          "example": 1.0e7,
          "description": "For quoting process, current estimated size provided by client high value"
        },
        "productNotionalLow": {
          "type": "number",
          "example": 1.0e7,
          "description": "For quoting process, current estimated size provided by client low value"
        },
        "productRiskRanking": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Risk level of a product, valid values are 1, 2 or 3"
        },
        "productType": {
          "type": "string",
          "enum": [
            "Capital Protection",
            "Capital Protection with Knock Out",
            "Discount Certificate",
            "Barrier Reverse Convertible",
            "Reverse Convertible",
            "Callable Barrier Reverse Convertible",
            "Callable Reverse Convertible",
            "Tracker Certificate",
            "Outperformance Certificate",
            "Bonus Certificate",
            "Twin Win",
            "Warrants",
            "Mini Futures",
            "CLN",
            "Accumulator",
            "Decumulator"
          ]
        },
        "registrationType": {
          "type": "string",
          "example": "Registered Note",
          "description": "registration type or wrapper of the product",
          "enum": [
            "Registered Note",
            "Reg S",
            "3a2",
            "Private Placement",
            "CD",
            "GIC",
            "PAR",
            "PPN",
            "ML GIC",
            "Exempt Distribution"
          ]
        },
        "reofferClientList": {
          "type": "array",
          "description": "List of reoffer clients. 0 to many.",
          "items": { "$ref": "#/definitions/ClientReoffer" }
        },
        "requestId": {
          "type": "string",
          "description": "Quote Request ID for Luma"
        },
        "returnType": {
          "type": "string",
          "enum": ["Growth", "Growth and Income", "Income", "Digital"]
        },
        "riskFreeRate": {
          "type": "string",
          "description": "Risk Free Rate for the Product"
        },
        "salesCreditCurrent": {
          "type": "number",
          "format": "double",
          "example": 4.0,
          "description": "Current Sales Credit Based On Current Product Details During The Marketing Period"
        },
        "salesCreditFinal": {
          "type": "number",
          "format": "double",
          "example": 0.025,
          "description": "Final Sales Credit Based On Executed Product Details"
        },
        "salesCreditHigh": {
          "type": "number",
          "format": "double",
          "example": 0.075,
          "description": "Current High Value For Sales Credit For Product During The Marketing Period"
        },
        "salesCreditLow": {
          "type": "number",
          "format": "double",
          "example": 0.025,
          "description": "Current Low Value For The Sales Credit For Product Being Solved For, During Marketing Period This Is Taken As A \"At Least\" Value In The Absence Of A Corresponding \"High\" Value"
        },
        "secondaryMarketQuotingType": {
          "type": "string",
          "description": "Secondary market quoting type. Clean - price of the product without accrued interest. Dirty - price with accrued interest",
          "enum": ["Clean", "Dirty"]
        },
        "settlementType": {
          "type": "string",
          "example": "Cash",
          "description": "Type of settlement. Enum value",
          "enum": ["Cash", "Physical"]
        },
        "sspaStructureTypeId": { "type": "string", "example": 1100 },
        "sspaStructureTypeName": {
          "type": "string",
          "example": "Capital Protection Note with Participation"
        },
        "stage": {
          "type": "string",
          "description": "Stage of the product",
          "enum": [
            "Request",
            "Quote",
            "Offer",
            "Refresh Price",
            "Confirm Lock",
            "Execution",
            "Post Trade",
            "Not Traded",
            "Ops Review"
          ]
        },
        "standardPrice": {
          "type": "number",
          "format": "double",
          "example": 0.97,
          "description": "The price at which issuer offers product to market. Allow for up to 2 decimal places in percentage. Required when Stage is Offer"
        },
        "status": {
          "type": "string",
          "description": "Status of the Product",
          "enum": [
            "Accepting Indications",
            "Book Building Traded Not Settled",
            "Request",
            "Estimated Quote",
            "Indicative Quote",
            "Final Quote",
            "Offer",
            "Confirm Lock",
            "Final Execution",
            "New",
            "Live",
            "Matured",
            "Called",
            "Indicative Quote Received",
            "Open for Orders",
            "Pending Confirmation",
            "Final Notional Confirmed",
            "Pending Final Docs",
            "Cancelled",
            "Offering Expired",
            "Restricted",
            "Traded Not Settled",
            "Accepting Orders",
            "Traded Pending Documentation",
            "Expired",
            "Book Building Traded Pending Documentation",
            "Review Required",
            "Update Product Details"
          ]
        },
        "strikeDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "The strike price date when underlier levels will be struck from"
        },
        "structureFee": {
          "type": "number",
          "format": "double",
          "description": "Structuring Fee for the product (Client specific field)"
        },
        "structureLongNameExternal": {
          "type": "string",
          "example": "Autocallable Contingent Interest Yield Note",
          "description": "Free form structure long name used externally."
        },
        "structureLongNameInternal": {
          "type": "string",
          "description": "Long name for internal display of the product"
        },
        "structureNameExternal": {
          "type": "string",
          "example": "Autocallable Contingent Interest Yield Note",
          "description": "Free form structure name used as display name."
        },
        "structureNameInternal": {
          "type": "string",
          "example": "Barrier Autocallable Contingent Interest Yield Note",
          "description": "Luma may provide this during pricing or other requests if existing structure name is not available"
        },
        "structureShortNameExternal": {
          "type": "string",
          "example": "TA-CYN",
          "description": "Free form structure short name used externally."
        },
        "structureShortNameInternal": {
          "type": "string",
          "description": "Short name for internal display of the product"
        },
        "supplementalPercentage": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "The percent of the supplement"
        },
        "swapMaturity": {
          "type": "string",
          "description": "Swap Maturity date of the product (Client specific field)",
          "enum": ["1mL", "3mL", "1m", "3m", "6m"]
        },
        "tenorCurrent": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "Updated value in a product that is open for marketing given tenor was the solve for variable"
        },
        "tenorFinal": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "Final Tenor for new products or has been finalized for an existing product"
        },
        "tenorHigh": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "High end, or upper bound, of the tenor given when this is being solved for in a product prior to issuance.   If only low is provided this will be treated as at least, if high and low are provided it will be used as a range"
        },
        "tenorLow": {
          "type": "number",
          "format": "double",
          "example": 24.5,
          "description": "Initial, or lower bound, of the tenor given when this is being solved for in a product prior to issuance.   If only low is provided this will be treated as at least, if high and low are provided it will be used as a range"
        },
        "tenorUnit": {
          "type": "string",
          "description": "The unit that tenor fields are stored in",
          "enum": ["Weeks", "Months", "Years"]
        },
        "totalPnl": {
          "type": "number",
          "format": "double",
          "description": "Total PnL of the product (Client specific field)"
        },
        "tradeDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "Trade date of the product where terms are agreed for execution and notional exchange process begins.  Must be before the issuance date"
        },
        "underlierList": {
          "type": "array",
          "description": "List of underliers.",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "upfrontDeferred": {
          "type": "string",
          "description": "Upfront deferred amount (if any)"
        },
        "wrapperType": {
          "type": "string",
          "description": "What type of wrapper is the product",
          "enum": ["Note", "CD", "Market Linked Trust", "OTC"]
        }
      },
      "title": "ProductGeneral"
    },
    "ProductGrowth": {
      "type": "object",
      "properties": {
        "absoluteReturnBarrierLevelCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Barrier level for Dual Directional/Twin Win notes, at this point product goes from gaining on ABS return to decreased return, updated during a marketing period and this is a solve for value"
        },
        "absoluteReturnBarrierLevelFinal": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Barrier level for Dual Directional/Twin Win notes, at this point product goes from gaining on ABS return to decreased return, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "absoluteReturnBarrierLevelHigh": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Barrier level for Dual Directional/Twin Win notes, at this point product goes from gaining on ABS return to decreased return, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "absoluteReturnBarrierLevelLow": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Barrier level for Dual Directional/Twin Win notes, at this point product goes from gaining on ABS return to decreased return, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "absoluteReturnBarrierUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for absolute return barrier",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "absoluteReturnParticipationRateCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Absolute return participation level until barrier level is reached, required for products with absolute return barrier level enabled, updated during a marketing period and this is a solve for value"
        },
        "absoluteReturnParticipationRateFinal": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Absolute return participation level until barrier level is reached, required for products with absolute return barrier level enabled, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "absoluteReturnParticipationRateHigh": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Absolute return participation level until barrier level is reached, required for products with absolute return barrier level enabled, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "absoluteReturnParticipationRateLow": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Absolute return participation level until barrier level is reached, required for products with absolute return barrier level enabled, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "bearish": {
          "type": "boolean",
          "example": true,
          "description": "can be blank when growth type is blank"
        },
        "digitalReturnBarrierCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "Digital Barrier level for digital/jump payment. updated during a marketing period and this is a solve for value"
        },
        "digitalReturnBarrierFinal": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "Digital Barrier level for digital/jump payment. Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "digitalReturnBarrierHigh": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Digital Barrier level for digital/jump paymnent, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "digitalReturnBarrierLow": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Digital Barrier level for digital/jump payment, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "digitalReturnBarrierObservationDateList": {
          "type": "array",
          "example": "2020-01-31,2020-02-28",
          "description": "digital return observation date, required for observation frequencies other than daily and at maturity",
          "items": { "ref": "LocalDate" }
        },
        "digitalReturnBarrierObservationFrequency": {
          "type": "string",
          "description": "Frequency With Which The Digital Barrier On The Product Is Observed",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "digitalReturnBarrierUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the stock return cap",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "digitalReturnCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.2,
          "description": "Digital/Jump payment rate in decimal terms, updated during a marketing period and this is a solve for value"
        },
        "digitalReturnFinal": {
          "type": "number",
          "format": "double",
          "example": 0.2,
          "description": "Digital/Jump payment rate, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "digitalReturnHigh": {
          "type": "number",
          "format": "double",
          "example": 0.2,
          "description": "Digital/Jump payment rate, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "digitalReturnLow": {
          "type": "number",
          "format": "double",
          "example": 0.2,
          "description": "Digital/Jump payment rate, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "growthType": {
          "type": "array",
          "description": "Growth Type of the product (Point to Point, Digital, Dual Directional, Digital Dual Directional, etc)",
          "items": {
            "type": "string",
            "enum": [
              "Point to Point",
              "Capped Point to Point",
              "ITM Digital",
              "ATM Digital",
              "OTM Digital",
              "Capped ITM Digital",
              "Capped ATM Digital",
              "Capped OTM Digital",
              "Uncapped ITM Digital",
              "Uncapped ATM Digital",
              "Uncapped OTM Digital",
              "Dual Directional",
              "Capped Dual Directional",
              "Digital Dual Directional",
              "Uncapped Digital Dual Directional",
              "Capped Digital Dual Directional",
              "Snowball",
              "Variable Snowball",
              "Cliquet",
              "Hybrid Credit Linked Point to Point",
              "Capped Hybrid Credit Linked Point to Point"
            ]
          }
        },
        "knockOutBarrierCurrent": {
          "type": "number",
          "format": "double",
          "description": "If the underlying exceeds a certain price the option expires worthless, limiting profits for the holder and limiting losses for the writer."
        },
        "knockOutBarrierFinal": {
          "type": "number",
          "format": "double",
          "description": "If the underlying exceeds a certain price the option expires worthless, limiting profits for the holder and limiting losses for the writer."
        },
        "knockOutBarrierHigh": {
          "type": "number",
          "format": "double",
          "description": "If the underlying exceeds a certain price the option expires worthless, limiting profits for the holder and limiting losses for the writer."
        },
        "knockOutBarrierLow": {
          "type": "number",
          "format": "double",
          "description": "If the underlying exceeds a certain price the option expires worthless, limiting profits for the holder and limiting losses for the writer."
        },
        "knockOutRebateCurrent": {
          "type": "number",
          "format": "double",
          "description": "Amount to be paid if knock out event occurs"
        },
        "knockOutRebateFinal": {
          "type": "number",
          "format": "double",
          "description": "Amount to be paid if knock out event occurs"
        },
        "knockOutRebateHigh": {
          "type": "number",
          "format": "double",
          "description": "Amount to be paid if knock out event occurs"
        },
        "knockOutRebateLow": {
          "type": "number",
          "format": "double",
          "description": "Amount to be paid if knock out event occurs"
        },
        "lowerCallStrikeCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Strike of upside participation, starts at 100% for point to point growth notes, set to digital return level for upside above digital, updated during a marketing period and this is a solve for value"
        },
        "lowerCallStrikeFinal": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Strike of upside participation, starts at 100% for point to point growth notes, set to digital return level for upside above digital, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "lowerCallStrikeHigh": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Strike of upside participation, starts at 100% for point to point growth notes, set to digital return level for upside above digital, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "lowerCallStrikeLow": {
          "type": "number",
          "format": "double",
          "example": 1.0,
          "description": "Strike of upside participation, starts at 100% for point to point growth notes, set to digital return level for upside above digital, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "lowerCallStrikeUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the lower call strike",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "lowerPutStrike": { "type": "number", "format": "double" },
        "maximumReturnCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Maximum return of product, used for display purposes and validations, applied upside participation * cap level must equal this value (if not being solved for in a range), updated during a marketing period and this is a solve for value"
        },
        "maximumReturnFinal": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Maximum return of product, used for display purposes and validations, applied upside participation * cap level must equal this value (if not being solved for in a range), Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "maximumReturnHigh": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Maximum return of product, used for display purposes and validations, applied upside participation * cap level must equal this value (if not being solved for in a range), high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "maximumReturnLow": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Maximum return of product, used for display purposes and validations, applied upside participation * cap level must equal this value (if not being solved for in a range), low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "minimumReturnCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Minimum return of product, updated during a marketing period and this is a solve for value"
        },
        "minimumReturnFinal": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Minimum return of product, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "minimumReturnHigh": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Minimum return of product, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "minimumReturnLow": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Minimum return of product, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "underlierReturnCapLevelCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Cap Level, not Maximum Return which will be derived by Participation * cap level, updated during a marketing period and this is a solve for value"
        },
        "underlierReturnCapLevelFinal": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Cap Level, not Maximum Return which will be derived by Participation * cap level, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "underlierReturnCapLevelHigh": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Digital Barrier level for digital/jump payment, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "underlierReturnCapLevelLow": {
          "type": "number",
          "format": "double",
          "example": 1.5,
          "description": "Cap Level, not Maximum Return which will be derived by Participation * cap level, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "upsideAboveDigitalReturn": {
          "type": "boolean",
          "example": true,
          "description": "required if digital return field is completed"
        },
        "upsideBasketType": {
          "type": "string",
          "description": "Basket Type of the product’s upside.",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "upsideParticipationAboveDigitalReturnCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "upside participation level above the digital return, required if \"upsideaboveidigitalreturn\" is set to \"yes\", updated during a marketing period and this is a solve for value "
        },
        "upsideParticipationAboveDigitalReturnFinal": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "upside participation level above the digital return, required if \"upsideaboveidigitalreturn\" is set to \"yes\", Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "upsideParticipationAboveDigitalReturnHigh": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "upside participation level above the digital return, required if \"upsideaboveidigitalreturn\" is set to \"yes\", high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "upsideParticipationAboveDigitalReturnLow": {
          "type": "number",
          "format": "double",
          "example": 1.25,
          "description": "upside participation level above the digital return, required if \"upsideaboveidigitalreturn\" is set to \"yes\", low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "upsideParticipationRateCurrent": {
          "type": "number",
          "format": "double",
          "example": 2.25,
          "description": "upside participation rate, updated during a marketing period and this is a solve for value"
        },
        "upsideParticipationRateFinal": {
          "type": "number",
          "format": "double",
          "example": 2.25,
          "description": "upside participation rate, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "upsideParticipationRateHigh": {
          "type": "number",
          "format": "double",
          "example": 2.25,
          "description": "upside participation rate, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "upsideParticipationRateLow": {
          "type": "number",
          "format": "double",
          "example": 2.25,
          "description": "upside participation rate, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "upsideParticipationUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the stock return cap",
          "items": { "$ref": "#/definitions/Underlier" }
        }
      },
      "title": "ProductGrowth"
    },
    "ProductIdentifier": {
      "type": "object",
      "properties": {
        "productId": { "type": "string", "format": "uuid" },
        "securityIdentifierType": {
          "type": "string",
          "enum": ["CUSIP", "ISIN"]
        },
        "securityIdentifierValue": { "type": "string" }
      },
      "title": "ProductIdentifier"
    },
    "ProductProtection": {
      "type": "object",
      "properties": {
        "KIbarrierCrossing": {
          "type": "string",
          "description": "This field shows if the given underlying(s) has to cross or just touch the KI barrier level to breach it.",
          "enum": ["Below", "At or Below", "Above", "At or Above"]
        },
        "capitalProtectionLevelCurrent": {
          "type": "number",
          "format": "double",
          "description": "The minimum amount the investor is guaranteed to receive at maturity given the issuer does not default."
        },
        "capitalProtectionLevelFinal": {
          "type": "number",
          "format": "double",
          "description": "The minimum amount the investor is guaranteed to receive at maturity given the issuer does not default."
        },
        "capitalProtectionLevelHigh": {
          "type": "number",
          "format": "double",
          "description": "The minimum amount the investor is guaranteed to receive at maturity given the issuer does not default."
        },
        "capitalProtectionLevelLow": {
          "type": "number",
          "format": "double",
          "description": "The minimum amount the investor is guaranteed to receive at maturity given the issuer does not default."
        },
        "downsideBasketType": {
          "type": "string",
          "description": "Basket Type of the product's downside.",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "downsideType": {
          "type": "string",
          "example": "Buffer",
          "description": "Type of downside protection. Enum value.",
          "enum": [
            "Buffer",
            "Barrier",
            "Full",
            "Partial",
            "Bearish",
            "No Principal Protection",
            "Airbag",
            "Geared Barrier",
            "Geared Buffer"
          ]
        },
        "finalFixingCrossing": {
          "type": "string",
          "description": "This field shows if the given underlying(s) has to cross or just touch the strike level to breach it.",
          "enum": ["Below", "At or Below", "Above", "At or Above"]
        },
        "oneStarLevel": {
          "type": "number",
          "format": "double",
          "description": "The barrier level of the one star feature."
        },
        "oneStarType": {
          "type": "string",
          "description": "Type of one star feature. This will tell how the underlying(s) should reach the one star level.",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "principalBarrierLevelCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Barrier Level"
        },
        "principalBarrierLevelFinal": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Barrier Level"
        },
        "principalBarrierLevelHigh": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Barrier Level"
        },
        "principalBarrierLevelLow": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Barrier Level"
        },
        "principalBarrierLevelUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for principal barrier level",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "principalBufferLevelCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Buffer Level"
        },
        "principalBufferLevelFinal": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Buffer Level"
        },
        "principalBufferLevelHigh": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Buffer Level"
        },
        "principalBufferLevelLow": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Principal Buffer Level"
        },
        "principalBufferLevelUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for principal buffer level",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "protectionLevel": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Protection Level"
        },
        "putLeverageCurrent": {
          "type": "number",
          "format": "double",
          "example": 1.11111,
          "description": "leverage of Vanilla put"
        },
        "putLeverageFinal": {
          "type": "number",
          "format": "double",
          "description": "leverage of Vanilla put"
        },
        "putLeverageHigh": {
          "type": "number",
          "format": "double",
          "description": "leverage of Vanilla put"
        },
        "putLeverageLow": {
          "type": "number",
          "format": "double",
          "description": "leverage of Vanilla put"
        },
        "putObservationDateList": {
          "type": "array",
          "example": "2020-01-31,2020-02-28",
          "description": "date list of observations for observations other than Daily and Continous.   For EKI or Vanilla put use final valuation date in this field",
          "items": { "type": "string" }
        },
        "putObservationFrequency": {
          "type": "string",
          "description": "frequency of put observations, can be \"custom\" for non standard observation frequencies",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "putStrikeCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "Current protection level, updated during a marketing period and this is a solve for value"
        },
        "putStrikeFinal": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "protection level - Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "putStrikeHigh": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "putStrikeLow": {
          "type": "number",
          "format": "double",
          "example": 0.9,
          "description": "protection level low end for a marketing period, if not provided will be used as an \"at least value\""
        },
        "putStrikeUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for put strike",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "putType": {
          "type": "string",
          "example": "Vanilla",
          "description": "Type of put for barrier and buffer definition. Enum value.",
          "enum": ["Down and In", "Vanilla"]
        }
      },
      "title": "ProductProtection"
    },
    "ProductQuote": {
      "type": "object",
      "required": ["quoteProvider", "requestId"],
      "properties": {
        "clientReferenceId": { "type": "string" },
        "counterpartyFundingType": {
          "type": "string",
          "enum": ["Upfront", "Deferred"]
        },
        "counterpartyFundingValue": { "type": "number", "format": "double" },
        "createDateTimestamp": { "type": "string", "format": "date-time" },
        "createdByUserId": { "type": "string" },
        "createdByUsername": { "type": "string" },
        "creationHubQuoteId": { "type": "string" },
        "current": { "type": "number", "format": "double" },
        "documents": {
          "type": "array",
          "items": { "$ref": "#/definitions/IssuerDocumentSEC" }
        },
        "errorMessages": {
          "type": "array",
          "description": "Provide error information about a failed request attempt.",
          "items": { "type": "string" }
        },
        "estimatedInitialValue": { "type": "number", "format": "double" },
        "estimatedLife": { "type": "number", "format": "double" },
        "estimatedLifeUnit": {
          "type": "string",
          "enum": ["Weeks", "Months", "Years"]
        },
        "expirationTimestamp": { "type": "string", "format": "date-time" },
        "high": { "type": "number", "format": "double" },
        "issuerReferenceId": { "type": "string" },
        "low": { "type": "number", "format": "double" },
        "message": {
          "type": "array",
          "description": "This field is added for backward compatibility.  CH is only recognizing this message field",
          "items": { "type": "string" }
        },
        "messages": { "type": "array", "items": { "type": "string" } },
        "notional": { "type": "number" },
        "numberOfShares": { "type": "number", "format": "double" },
        "quoteId": { "type": "string" },
        "quoteProvider": { "type": "string" },
        "requestId": { "type": "string" },
        "requestType": { "type": "string", "enum": ["Indicative", "Firm"] },
        "revision": { "type": "integer", "format": "int32" },
        "sensitivity": { "type": "number", "format": "double" },
        "solveFor": {
          "type": "string",
          "enum": [
            "Tenor",
            "Product Notional",
            "Reoffer Client Rate",
            "Payment Evaluation Frequency",
            "Payment Rate Per Period",
            "Payment Rate Per Annum",
            "Min Payment Rate Per Annum",
            "Min Payment Rate Per Period",
            "Stock Return Floor",
            "Rate Builder Values",
            "Call Level List",
            "Call Premium Level List",
            "Put Strike",
            "Principal Barrier Level",
            "Digital Return",
            "Upside Participation Rate",
            "Lower Call Strike",
            "Underlier Return Cap Level",
            "Digital Return Percentage",
            "Digital Return Barrier",
            "Upside Participation Above Digital Return",
            "Absolute Return Barrier Level",
            "Downside Participation Rate",
            "Maximum Return",
            "Payment Barrier",
            "Stock Return Cap",
            "Sales Credit",
            "Absolute Return Participation Rate",
            "Call Barrier Level",
            "Principal Buffer Level",
            "Upper Barrier Level",
            "Knock Out Rebate",
            "Knock Out Barrier",
            "Issue Price",
            "Capital Protection Level",
            "Put Leverage",
            "Accumulator Decumulator Strike"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "Invalid",
            "Quote Received",
            "Quote Expired",
            "Quote Rejected",
            "Quote Cancelled",
            "Traded Away",
            "Quote Accepted",
            "Request for Approval",
            "Request for Approval (Client)"
          ]
        },
        "underlierLevel": { "type": "number", "format": "double" },
        "updatedByUserId": { "type": "string" },
        "updatedTimestamp": { "type": "string", "format": "date-time" }
      },
      "title": "ProductQuote",
      "description": "Represents the quote or price values returned by the UBS IB."
    },
    "ProductRegulatory": {
      "type": "object",
      "properties": {
        "countryDistribution": {
          "type": "array",
          "description": "Indicates where product will be distributed.",
          "items": {
            "type": "string",
            "enum": [
              "Canada",
              "Switzerland",
              "Germany",
              "Italy",
              "France",
              "Spain",
              "Portugal",
              "United Kingdom",
              "Netherlands",
              "Belgium",
              "Luxembourg",
              "Austria",
              "Ireland",
              "Sweden",
              "Finland",
              "Norway",
              "Denmark",
              "Israel",
              "UAE",
              "South Africa",
              "USA",
              "Mexico",
              "Panama",
              "Colombia",
              "Peru",
              "Chile",
              "Uruguay",
              "Argentina",
              "Paraguay",
              "Puerto Rico",
              "Ecuador",
              "Hong Kong",
              "Singapore"
            ]
          }
        },
        "listing": {
          "type": "string",
          "description": "Listing venue (if the product is going to be listed).",
          "enum": [
            "None",
            "SIX",
            "BX Swiss",
            "FWB",
            "GETTEX",
            "SWB",
            "Euronext France",
            "Euronext NL",
            "Euronext Lisbon",
            "Euronext Brussels",
            "BVME",
            "LuxSE",
            "BME",
            "LSE",
            "WBAG"
          ]
        },
        "supportingDocumentation": {
          "type": "array",
          "description": "List of Supporting Documentation",
          "items": { "$ref": "#/definitions/SupportingDocumentation" }
        },
        "targetMarket": {
          "type": "string",
          "enum": [
            "Retail",
            "Professional Counterparties",
            "Eligible Counterparties"
          ]
        }
      },
      "title": "ProductRegulatory"
    },
    "ProductScenarios": {
      "type": "object",
      "properties": {
        "scenarioOne": {
          "type": "string",
          "example": "Scenario 1: If the closing price of underlier is greater than or equal to the Trigger Price on 29-Oct 2021, UBS will pay investors $10.00 in cash for each security equal the full principle amount, plus the final Contingent Coupon payment",
          "description": "Scenario Example"
        },
        "scenarioTwo": {
          "type": "string",
          "example": "Scenario 2: If the closing price of underlier is less than the Trigger Price on 29-Oct 2021 for each security UBS will pay investors an equal amount to $10.00 x (1 + Underlying Return)",
          "description": "Scenario Example"
        }
      },
      "title": "ProductScenarios"
    },
    "ProductYield": {
      "type": "object",
      "properties": {
        "bifurcationOfInterest": {
          "type": "boolean",
          "example": false,
          "description": "If Interest is bifurcated for the product this will divide between interest and option premium"
        },
        "cashPoolKnockInLevel": {
          "type": "string",
          "example": "0.95, 0.85, 0.75, 0.65, 0.60",
          "description": "In CSV format, each value is a double number between 0 and 1."
        },
        "cashPoolKnockInVolume": {
          "type": "string",
          "example": "0.15, 0.15, 0.15, 0.15, 0.20",
          "description": "In CSV format, each value is a double number between 0 and 1."
        },
        "couponBarrierCrossingType": {
          "type": "string",
          "description": "Required when couponType is conditional.",
          "enum": ["Above", "At Or Above"]
        },
        "couponBasketType": {
          "type": "string",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance"]
        },
        "equityPool": { "type": "number", "format": "double", "example": 0.4 },
        "floatSpread": {
          "type": "number",
          "format": "double",
          "example": 123.45,
          "description": "value between ask and bid prices"
        },
        "interest": {
          "type": "number",
          "format": "double",
          "description": "Interest portion of payment"
        },
        "leverageFactors": {
          "type": "array",
          "description": "list of leverage factors",
          "items": { "$ref": "#/definitions/LeverageFactor" }
        },
        "minCouponPayPeriod": {
          "type": "string",
          "example": "Annually",
          "description": "Minimum payment period. Enum value.",
          "enum": [
            "Annually",
            "Bi-Monthly",
            "Monthly",
            "Quarterly",
            "At Maturity",
            "Semi-Annually"
          ]
        },
        "minPaymentRatePerAnnumCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per Annum, updated during a marketing period and this is a solve for value"
        },
        "minPaymentRatePerAnnumFinal": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per Annum, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "minPaymentRatePerAnnumHigh": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per Annum, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "minPaymentRatePerAnnumLow": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per annum, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "minPaymentRatePerPeriodCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per period, updated during a marketing period and this is a solve for value"
        },
        "minPaymentRatePerPeriodFinal": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per period, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "minPaymentRatePerPeriodHigh": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per period, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "minPaymentRatePerPeriodLow": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Minimum Coupon rate Per period, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "optionPremium": {
          "type": "number",
          "format": "double",
          "description": "Option premium portion of payment"
        },
        "paymentBarrierCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Coupon barrier level for contingent coupon products in decimal format, updated during a marketing period and this is a solve for value"
        },
        "paymentBarrierFinal": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Coupon barrier level for contingent coupon products in decimal format, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "paymentBarrierHigh": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Coupon barrier level for contingent coupon products in decimal format, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "paymentBarrierLow": {
          "type": "number",
          "format": "double",
          "example": 0.7,
          "description": "Coupon barrier level for contingent coupon products in decimal format, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "paymentBarrierObservationFrequency": {
          "type": "string",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "paymentBarrierUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the payment barrier also known as coupon threshold",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "paymentDateList": {
          "type": "array",
          "description": "Observation date and payment date for all coupon evaluation dates",
          "items": { "$ref": "#/definitions/PaymentSchedule" }
        },
        "paymentEvaluationFrequencyCurrent": {
          "type": "string",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "paymentEvaluationFrequencyFinal": {
          "type": "string",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "paymentFrequency": {
          "type": "string",
          "enum": [
            "Continuous",
            "Daily",
            "Weekly",
            "Bi-Weekly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Semi-Annually",
            "Annually",
            "European",
            "European Continuous",
            "At Maturity",
            "On Final Valuation Date",
            "On Final Observation",
            "Custom"
          ]
        },
        "paymentMemory": {
          "type": "boolean",
          "example": true,
          "description": "If product has payment memory or not."
        },
        "paymentRatePerAnnumCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Coupon rate Per Annum, updated during a marketing period and this is a solve for value"
        },
        "paymentRatePerAnnumFinal": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Coupon rate Per Annum, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "paymentRatePerAnnumHigh": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Coupon rate Per Annum, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "paymentRatePerAnnumLow": {
          "type": "number",
          "format": "double",
          "example": 0.035,
          "description": "Coupon rate Per annum, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "paymentRatePerPeriodCurrent": {
          "type": "number",
          "format": "double",
          "example": 0.085,
          "description": "Coupon payment rate per period in decimal form, updated during a marketing period and this is a solve for value"
        },
        "paymentRatePerPeriodFinal": {
          "type": "number",
          "format": "double",
          "example": 0.085,
          "description": "Coupon payment rate per period in decimal form, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "paymentRatePerPeriodHigh": {
          "type": "number",
          "format": "double",
          "example": 0.085,
          "description": "Coupon payment rate per period in decimal form, high end for a marketing period, if high level is not provided will be used as an \"at least value\" "
        },
        "paymentRatePerPeriodLow": {
          "type": "number",
          "format": "double",
          "example": 0.085,
          "description": "Coupon payment rate per period in decimal form, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "paymentType": {
          "type": "string",
          "example": "Fixed",
          "description": "\"Type of coupon payment the product pays, or Null if none All up - All above barrier = Max Coupon, any below barrier = min coupon AutoCap - Sum of each constituents performance * its weight.   For each constituent if perf is positive = coupon cap, if negative max(perf,floor) Rate Builder - # of underliers above barrier defines coupon payment ",
          "enum": [
            "Fixed",
            "Contingent",
            "Range Accrual",
            "Annual Averaging",
            "All Up",
            "Resetting Annual Averaging",
            "AutoCap",
            "Rate Builder",
            "Fixed To Floating",
            "Time Series",
            "Fixed to Reset",
            "Variable Interest Credit Linked",
            "Fixed Interest Credit Linked",
            "Rate Linked",
            "Credit Linked",
            "Stock Basket",
            "Resetting Time Series",
            "Cliquet",
            "Fixed To Contingent",
            "Builder",
            "Leveraged Builder"
          ]
        },
        "paymentTypeChangeDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Date that payment type changes for example from fixed to contingent"
        },
        "rateBuilderGrouping": {
          "type": "array",
          "description": "Grouping of Rate Builders",
          "items": { "type": "string" }
        },
        "rateBuilderReturns": {
          "type": "array",
          "description": "Returns of Rate Builders",
          "items": { "type": "string" }
        },
        "rateBuilderValuesCurrent": {
          "type": "array",
          "description": "Current levels for rate builder products, updated during a marketing period and this is a solve for value",
          "items": { "type": "number", "format": "double" }
        },
        "rateBuilderValuesFinal": {
          "type": "array",
          "description": "final levels for ratebuilder updated during a marketing period and this is a solve for value",
          "items": { "type": "number", "format": "double" }
        },
        "rateBuilderValuesHigh": {
          "type": "array",
          "description": "levels for ratebuilder, high end for a marketing period, if high level is not provided will be used as an \"at least value\"",
          "items": { "type": "number", "format": "double" }
        },
        "rateBuilderValuesLow": {
          "type": "array",
          "description": "levels for ratebuilder, low end for a marketing period, if high level is not provided will be used as an \"at least value\"",
          "items": { "type": "number", "format": "double" }
        },
        "stockReturnCapCurrent": {
          "type": "string",
          "description": "Stock return cap level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, updated during a marketing period and this is a solve for value"
        },
        "stockReturnCapFinal": {
          "type": "string",
          "description": "Stock return cap level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "stockReturnCapHigh": {
          "type": "string",
          "description": "Stock return cap level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "stockReturnCapLow": {
          "type": "string",
          "description": "Stock return cap level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "stockReturnCapUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the stock return cap",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "stockReturnFloorCurrent": {
          "type": "string",
          "description": "Stock return floor level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, updated during a marketing period and this is a solve for value"
        },
        "stockReturnFloorFinal": {
          "type": "string",
          "description": "Stock return floor level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, Finalized for a new product or for an existing product, the final level per the product terms"
        },
        "stockReturnFloorHigh": {
          "type": "string",
          "description": "Stock return floor level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, high end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "stockReturnFloorLow": {
          "type": "string",
          "description": "Stock return floor level for each basket constituent, Required for Auto Cap Basket Contingent Coupons, low end for a marketing period, if high level is not provided will be used as an \"at least value\""
        },
        "stockReturnFloorUnderlierList": {
          "type": "array",
          "description": "This is the list of underliers and their absolute values for the stock return cap",
          "items": { "$ref": "#/definitions/Underlier" }
        },
        "triggerParticipationRate": {
          "type": "number",
          "format": "double",
          "example": 1.25
        },
        "upperBarrierLevelCurrent": { "type": "number", "format": "double" },
        "upperBarrierLevelFinal": { "type": "number", "format": "double" },
        "upperBarrierLevelHigh": { "type": "number", "format": "double" },
        "upperBarrierLevelLow": { "type": "number", "format": "double" },
        "variablePayFinalObservationDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for variable coupon products where days above the barrier are evaluated vs total days * interest rate to derive payment"
        },
        "variablePayInitialObservationDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "First day of observation date for variable coupon products where days above the barrier are evaluated vs total days * interest rate to derive payment"
        },
        "yieldBasketType": {
          "type": "string",
          "description": "Basket Type of the product's yield.",
          "enum": ["Equal", "Custom", "WoF", "BoF", "Out Performance", "Single"]
        },
        "yieldCrossing": {
          "type": "string",
          "description": "This field shows if the given underlying(s) has to cross or just touch the coupon barrier level to breach it.",
          "enum": ["Below", "At or Below", "Above", "At or Above"]
        }
      },
      "title": "ProductYield"
    },
    "RateBarrierLevel": {
      "type": "object",
      "properties": {
        "rateBarrierLevel": { "type": "number", "format": "double" },
        "rateBarrierLevelEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for Rate Barrier Level"
        },
        "rateBarrierLevelStartDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Start day of observation date for Rate Barrier Level"
        }
      },
      "title": "RateBarrierLevel"
    },
    "RateCap": {
      "type": "object",
      "properties": {
        "rateCap": { "type": "number", "format": "double" },
        "rateCapEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for Rate Cap"
        },
        "rateCapStartDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "First day of observation date for Rate Cap"
        }
      },
      "title": "RateCap"
    },
    "RateConditionalCoupon": {
      "type": "object",
      "properties": {
        "rateConditionalCoupon": { "type": "number", "format": "double" },
        "rateConditionalCouponEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for Rate Conditional Coupon"
        },
        "rateConditionalCouponStartDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "First day of observation date for Rate Conditional Coupon"
        }
      },
      "title": "RateConditionalCoupon"
    },
    "RateMin": {
      "type": "object",
      "properties": {
        "rateMin": { "type": "number", "format": "double" },
        "rateMinEndDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "Last day of observation date for Rate Min"
        },
        "rateMinStartDate": {
          "type": "string",
          "format": "date",
          "example": "Fri Jan 31 00:00:00 UTC 2020",
          "description": "First day of observation date for Rate Min"
        }
      },
      "title": "RateMin"
    },
    "ResponseEntity": {
      "type": "object",
      "properties": {
        "body": { "type": "object" },
        "statusCode": {
          "type": "string",
          "enum": [
            "100 CONTINUE",
            "101 SWITCHING_PROTOCOLS",
            "102 PROCESSING",
            "103 CHECKPOINT",
            "200 OK",
            "201 CREATED",
            "202 ACCEPTED",
            "203 NON_AUTHORITATIVE_INFORMATION",
            "204 NO_CONTENT",
            "205 RESET_CONTENT",
            "206 PARTIAL_CONTENT",
            "207 MULTI_STATUS",
            "208 ALREADY_REPORTED",
            "226 IM_USED",
            "300 MULTIPLE_CHOICES",
            "301 MOVED_PERMANENTLY",
            "302 FOUND",
            "302 MOVED_TEMPORARILY",
            "303 SEE_OTHER",
            "304 NOT_MODIFIED",
            "305 USE_PROXY",
            "307 TEMPORARY_REDIRECT",
            "308 PERMANENT_REDIRECT",
            "400 BAD_REQUEST",
            "401 UNAUTHORIZED",
            "402 PAYMENT_REQUIRED",
            "403 FORBIDDEN",
            "404 NOT_FOUND",
            "405 METHOD_NOT_ALLOWED",
            "406 NOT_ACCEPTABLE",
            "407 PROXY_AUTHENTICATION_REQUIRED",
            "408 REQUEST_TIMEOUT",
            "409 CONFLICT",
            "410 GONE",
            "411 LENGTH_REQUIRED",
            "412 PRECONDITION_FAILED",
            "413 PAYLOAD_TOO_LARGE",
            "413 REQUEST_ENTITY_TOO_LARGE",
            "414 URI_TOO_LONG",
            "414 REQUEST_URI_TOO_LONG",
            "415 UNSUPPORTED_MEDIA_TYPE",
            "416 REQUESTED_RANGE_NOT_SATISFIABLE",
            "417 EXPECTATION_FAILED",
            "418 I_AM_A_TEAPOT",
            "419 INSUFFICIENT_SPACE_ON_RESOURCE",
            "420 METHOD_FAILURE",
            "421 DESTINATION_LOCKED",
            "422 UNPROCESSABLE_ENTITY",
            "423 LOCKED",
            "424 FAILED_DEPENDENCY",
            "425 TOO_EARLY",
            "426 UPGRADE_REQUIRED",
            "428 PRECONDITION_REQUIRED",
            "429 TOO_MANY_REQUESTS",
            "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
            "451 UNAVAILABLE_FOR_LEGAL_REASONS",
            "500 INTERNAL_SERVER_ERROR",
            "501 NOT_IMPLEMENTED",
            "502 BAD_GATEWAY",
            "503 SERVICE_UNAVAILABLE",
            "504 GATEWAY_TIMEOUT",
            "505 HTTP_VERSION_NOT_SUPPORTED",
            "506 VARIANT_ALSO_NEGOTIATES",
            "507 INSUFFICIENT_STORAGE",
            "508 LOOP_DETECTED",
            "509 BANDWIDTH_LIMIT_EXCEEDED",
            "510 NOT_EXTENDED",
            "511 NETWORK_AUTHENTICATION_REQUIRED"
          ]
        },
        "statusCodeValue": { "type": "integer", "format": "int32" }
      },
      "title": "ResponseEntity"
    },
    "SearchCriteria": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "operation": {
          "type": "string",
          "enum": [
            "IN",
            "EQ",
            "LT",
            "LTE",
            "GT",
            "GTE",
            "BETWEEN",
            "IN_BETWEEN",
            "CONTAINS",
            "MULTIPLE_CONTAINS",
            "ELEM_MATCH",
            "ELEM_MATCH_IN"
          ]
        },
        "value": { "type": "object" }
      },
      "title": "SearchCriteria"
    },
    "SearchOptions": {
      "type": "object",
      "properties": {
        "junctionOperation": { "$ref": "#/definitions/Optional«string»" },
        "projectionFields": { "type": "array", "items": { "type": "string" } },
        "searchCriteriaList": {
          "type": "array",
          "items": { "$ref": "#/definitions/SearchCriteria" }
        }
      },
      "title": "SearchOptions"
    },
    "SecondaryOrder": {
      "type": "object",
      "required": ["associatedRequestId", "associatedResponseId"],
      "properties": {
        "account": { "type": "integer", "format": "int64" },
        "associatedRequestId": { "type": "integer", "format": "int32" },
        "associatedResponseId": { "type": "integer", "format": "int32" },
        "associatedUserIds": {
          "$ref": "#/definitions/SecondaryOrderAssociatedUserIds"
        },
        "coverPrice": { "type": "number" },
        "executed": { "type": "string", "format": "date-time" },
        "orderId": { "type": "integer", "format": "int32" },
        "price": { "type": "number" },
        "productIdentifier": { "$ref": "#/definitions/ProductIdentifier" },
        "quantity": { "type": "integer", "format": "int64" },
        "settlement": { "type": "string", "format": "date" },
        "side": { "type": "string", "enum": ["BUY", "SELL"] },
        "status": {
          "type": "string",
          "enum": ["PENDING", "CANCELED", "REJECTED", "FILLED"]
        },
        "statusHistory": {
          "type": "array",
          "items": { "$ref": "#/definitions/SecondaryOrderStatusTimestamp" }
        },
        "tlement": { "type": "string", "format": "date" }
      },
      "title": "SecondaryOrder"
    },
    "SecondaryOrderAssociatedUserIds": {
      "type": "object",
      "properties": {
        "liquidityProvider": { "type": "string" },
        "liquidityTaker": { "type": "string" }
      },
      "title": "SecondaryOrderAssociatedUserIds"
    },
    "SecondaryOrderStatusTimestamp": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["PENDING", "CANCELED", "REJECTED", "FILLED"]
        },
        "timestamp": { "type": "string" }
      },
      "title": "SecondaryOrderStatusTimestamp"
    },
    "SecondaryProductIdentifier": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "format": "uuid",
          "example": "c2701c02-e339-11ea-87d0-0242ac130003",
          "description": "Product ID used for reference after the request ID but before unique identifiers like ISIN/CUSIP are issued"
        },
        "securityIdentifierType": {
          "type": "string",
          "enum": ["CUSIP", "ISIN"]
        },
        "securityIdentifierValue": { "type": "string" }
      },
      "title": "SecondaryProductIdentifier"
    },
    "SecondaryQuote": {
      "type": "object",
      "required": ["goodUntilTime", "quoteAmount", "requestId"],
      "properties": {
        "createDateTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of quote creation"
        },
        "createdByUserId": {
          "type": "string",
          "description": "User ID associated with the quote"
        },
        "desk": { "type": "string" },
        "firm": { "type": "string" },
        "goodUntilTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the time Quote's expiry"
        },
        "orderId": { "type": "integer", "format": "int32" },
        "quoteAmount": { "type": "number" },
        "quoteProvider": { "type": "string" },
        "requestId": {
          "type": "integer",
          "format": "int32",
          "description": "The requestId of the associated RFQ"
        },
        "responseId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique sequence identifier for the Quote"
        },
        "revision": { "type": "integer", "format": "int32" },
        "status": {
          "type": "string",
          "enum": [
            "Pending",
            "Canceled",
            "Filled",
            "Expired",
            "OTW",
            "Traded Away"
          ]
        },
        "updatedByUserId": { "type": "string" },
        "updatedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of quote update"
        },
        "userAccount": { "type": "integer", "format": "int32" }
      },
      "title": "SecondaryQuote"
    },
    "SecondaryRequestForQuote": {
      "type": "object",
      "required": ["quantity"],
      "properties": {
        "acceptedQuote": { "$ref": "#/definitions/SecondaryQuote" },
        "createDateTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of RFQ creation"
        },
        "createdByUserId": {
          "type": "string",
          "description": "User ID associated with the RFQ"
        },
        "desk": {
          "type": "string",
          "description": "Each User is associated with a Desk"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp indicating duration of RFQ (minute, hour, or entire day until 5PM)"
        },
        "firm": {
          "type": "string",
          "description": "Identifies Firm of Liquidity Taker"
        },
        "product": { "$ref": "#/definitions/Product" },
        "productIdentifier": {
          "$ref": "#/definitions/SecondaryProductIdentifier"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "How much of the product is being bought (OWIC), or quantity being sold (BWIC)"
        },
        "quotes": {
          "type": "array",
          "description": "Quotes associated with the RFQ",
          "items": { "$ref": "#/definitions/SecondaryQuote" }
        },
        "requestId": {
          "type": "integer",
          "format": "int32",
          "example": 100001,
          "description": "The unique sequence identifier for the RFQ"
        },
        "requestType": {
          "type": "string",
          "description": "BWIC (Bid Wanted In Competition) and OWIC (Offer Wanted in Competition)",
          "enum": ["BWIC", "OWIC"]
        },
        "revision": { "type": "integer", "format": "int32" },
        "settlementTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Settlement of Order, let users know when the order needs to settle by"
        },
        "status": {
          "type": "string",
          "description": "State of RFQ",
          "enum": ["OPEN", "PENDING", "FILLED", "CANCELED", "EXPIRED"]
        },
        "tlementTimestamp": { "type": "string", "format": "date-time" },
        "updatedByUserId": { "type": "string" },
        "updatedTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of RFQ update"
        },
        "userAccount": { "type": "integer", "format": "int32" }
      },
      "title": "SecondaryRequestForQuote"
    },
    "SupportingDocumentation": {
      "type": "object",
      "properties": {
        "documentLanguage": {
          "type": "array",
          "items": { "type": "string", "enum": ["EN", "FR", "ES", "DE", "IT"] }
        },
        "documentationType": {
          "type": "string",
          "description": "List of document types requested by the client and provided by the issuer.",
          "enum": [
            "KID",
            "Fact Sheets",
            "Target Market",
            "Cost & Charges",
            "Termsheet",
            "Final Terms",
            "Prelim Draft",
            "Template Prospectus Supplement",
            "Prelim Distributable",
            "Preliminary Prospectus Supplement",
            "Final Distributable",
            "Final Draft",
            "Indicative Term Sheet",
            "Miscellaneous",
            "Summary Sheet Draft",
            "Summary Sheet Distributable",
            "Swiss Simplified Prospectus"
          ]
        }
      },
      "title": "SupportingDocumentation"
    },
    "Underlier": {
      "type": "object",
      "required": ["underlierSource", "underlierSymbol"],
      "properties": {
        "dividendYield": {
          "type": "number",
          "format": "double",
          "description": "Dividend Yield of the underlying asset (if applicable)"
        },
        "exchangeCode": {
          "type": "string",
          "example": "NYS",
          "description": "This is the exchange code for the underlier."
        },
        "initialFixing": {
          "type": "string",
          "description": "At what point a Strike of the product/underlier is established.",
          "enum": ["End of Day", "Open", "Intraday", "VWAP", "Limit", "Firm"]
        },
        "underlierLevel": {
          "type": "number",
          "format": "double",
          "example": 2134.87,
          "description": "Underlier level or value. When this is used as the main list of underliers on the product, it is the strike value. When it is used within a feature it is the absolute value at which that feature will be triggered."
        },
        "underlierName": {
          "type": "string",
          "example": "S&P 500 Index",
          "description": "This is the common named used to describe the underlier."
        },
        "underlierSource": {
          "type": "string",
          "example": "Bloomberg",
          "description": "Underlier Source For Name (Ric Or Bloomberg)",
          "enum": ["Bloomberg", "RIC"]
        },
        "underlierStrikeDate": {
          "type": "string",
          "format": "date",
          "example": "Thu Jan 30 00:00:00 UTC 2020",
          "description": "The strike price date when underlier levels will be struck from"
        },
        "underlierSymbol": {
          "type": "string",
          "example": ".SPX",
          "description": "Underlier Symbol For The Product.  Can Be Ric Or BBG, Validated By The Underliersource Field"
        },
        "underlierWeight": {
          "type": "number",
          "format": "double",
          "example": 0.55,
          "description": "Percentage this underlier weights into the overall list of the parent product underliers.  For a weighted basket it would be the basket weight, for equally weighted it would be "
        }
      },
      "title": "Underlier"
    }
  }
}
