{"code":"import { __assign, __rest } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect, useState, forwardRef, } from 'react';\r\nimport { Root, Button, Split, Xmark } from './LumaButton.styles';\r\nimport { LumaIcon } from '../LumaIcon';\r\nexport var LumaButton = forwardRef(function LumaButton(componentProps, forwardedRef) {\r\n    var _a, _b;\r\n    var children = componentProps.children, _c = componentProps.variant, variant = _c === void 0 ? 'primary' : _c, _d = componentProps.disabled, disabled = _d === void 0 ? false : _d, icon = componentProps.icon, _e = componentProps.size, size = _e === void 0 ? 'medium' : _e, _f = componentProps.dropdown, dropdown = _f === void 0 ? {\r\n        isDropdown: false,\r\n        isOpen: false,\r\n        getToggleButtonProps: function () {\r\n            throw new Error('Function not implemented.');\r\n        },\r\n    } : _f, onClick = componentProps.onClick, _g = componentProps.split, split = _g === void 0 ? false : _g, _h = componentProps.disabledSplit, disabledSplit = _h === void 0 ? false : _h, _j = componentProps.type, type = _j === void 0 ? 'button' : _j, className = componentProps.className, _k = componentProps.fullWidth, fullWidth = _k === void 0 ? false : _k, xmark = componentProps.xmark, _l = componentProps.splitDataTestId, splitDataTestId = _l === void 0 ? 'button-luma_split' : _l, rest = __rest(componentProps, [\"children\", \"variant\", \"disabled\", \"icon\", \"size\", \"dropdown\", \"onClick\", \"split\", \"disabledSplit\", \"type\", \"className\", \"fullWidth\", \"xmark\", \"splitDataTestId\"]);\r\n    var _m = useState(false), dropdownOpen = _m[0], setDropdownOpen = _m[1];\r\n    useEffect(function () {\r\n        setDropdownOpen(dropdown.isOpen);\r\n    }, [dropdown.isOpen]);\r\n    var getDropdownPropsButtonIfNeeded = function () {\r\n        if (!split && dropdown.isDropdown) {\r\n            return dropdown.getToggleButtonProps();\r\n        }\r\n        return null;\r\n    };\r\n    var getDropdownPropsSplitIfNeeded = function () {\r\n        if (split) {\r\n            return dropdown.getToggleButtonProps();\r\n        }\r\n        return null;\r\n    };\r\n    var dropdownPropsButton = (_a = getDropdownPropsButtonIfNeeded()) !== null && _a !== void 0 ? _a : {};\r\n    var dropdownPropsSplit = (_b = getDropdownPropsSplitIfNeeded()) !== null && _b !== void 0 ? _b : {};\r\n    return (_jsxs(Root, __assign({ fullWidth: fullWidth, size: size, dropdown: dropdown, className: className }, { children: [_jsxs(Button, __assign({ icon: icon, onClick: onClick, variant: variant, size: size, split: split, ref: forwardedRef }, dropdownPropsButton, { type: type, disabled: disabled, fullWidth: fullWidth }, rest, { xmark: xmark }, { children: [icon === null || icon === void 0 ? void 0 : icon.iconComponent, children, dropdown.isDropdown && (_jsx(LumaIcon, { iconCode: dropdownOpen ? 'angle-up' : 'angle-down' }, void 0)), xmark && (_jsx(Xmark, { children: _jsx(LumaIcon, { iconCode: \"xmark\" }, void 0) }, void 0))] }), void 0), split && (_jsx(Split, __assign({ variant: variant, disabled: disabledSplit }, dropdownPropsSplit, { \"data-testid\": splitDataTestId }, { children: _jsx(LumaIcon, { iconCode: dropdownOpen ? 'angle-up' : 'angle-down' }, void 0) }), void 0))] }), void 0));\r\n});\r\n//# sourceMappingURL=LumaButton.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaButton/LumaButton.styles.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaIcon/index.ts"],"map":"{\"version\":3,\"file\":\"LumaButton.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaButton/LumaButton.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaButton/LumaButton.d.ts","writeByteOrderMark":false,"text":"import { ReactElement, MouseEventHandler, ButtonHTMLAttributes, ReactNode } from 'react';\r\nimport { LumaIcon } from '../LumaIcon';\r\nexport interface LumaButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    /**\r\n     * Content rendered within the button.\r\n     */\r\n    children?: ReactNode;\r\n    /**\r\n     * Disable the button.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Style variant.\r\n     */\r\n    variant: 'primary' | 'secondary' | 'tertiary' | 'tertiary_positive' | 'tertiary_negative' | 'toggle_active' | 'toggle_inactive' | 'tabs_active' | 'tabs_inactive' | 'document_error' | 'remove';\r\n    /**\r\n     * Button size.\r\n     */\r\n    size: 'large' | 'medium' | 'small' | 'x_small' | 'icon_only' | 'toggle_xx_small' | 'toggle_small' | 'toggle_medium' | 'tab' | 'document_upload' | 'document_upload_remove';\r\n    /**\r\n     * Specifies if this is a dropdown button\r\n     */\r\n    dropdown?: {\r\n        isDropdown: boolean;\r\n        isOpen: boolean;\r\n        getToggleButtonProps: () => void;\r\n    };\r\n    /**\r\n     * Code of the icon to be displayed in the button.\r\n     */\r\n    icon?: {\r\n        iconComponent: ReactElement<typeof LumaIcon>;\r\n        isOnRight?: boolean;\r\n    };\r\n    /**\r\n     * Specifies onClick action.\r\n     */\r\n    onClick?: MouseEventHandler<HTMLButtonElement>;\r\n    /**\r\n     * Specifies if this is the split button.\r\n     */\r\n    split?: boolean;\r\n    /**\r\n     * Disable only the split part\r\n     */\r\n    disabledSplit?: boolean;\r\n    /**\r\n     * Specifies role of a button.\r\n     */\r\n    type?: 'button' | 'submit' | 'reset';\r\n    /**\r\n     * Specifies if button width is set to 100%.\r\n     */\r\n    fullWidth?: boolean;\r\n    xmark?: boolean;\r\n    /**\r\n     * Specifies data test id for split part of the button\r\n     */\r\n    splitDataTestId?: string;\r\n}\r\nexport declare const LumaButton: import(\"react\").ForwardRefExoticComponent<LumaButtonProps & import(\"react\").RefAttributes<HTMLButtonElement>>;\r\n"}}
