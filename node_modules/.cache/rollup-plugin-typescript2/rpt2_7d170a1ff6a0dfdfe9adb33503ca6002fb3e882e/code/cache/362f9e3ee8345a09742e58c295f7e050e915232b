{"code":"import { __assign } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { LumaButton } from '../LumaButton';\r\nimport { LumaIcon } from '../LumaIcon';\r\nimport { TabsContainer, Link, Indicator } from './LumaTabs.styles';\r\nexport var LumaTabs = function (_a) {\r\n    var _b = _a.variant, variant = _b === void 0 ? 'buttons' : _b, _c = _a.activeValue, activeValue = _c === void 0 ? '' : _c, fieldValues = _a.fieldValues, onClick = _a.onClick, buttonIconCode = _a.buttonIconCode;\r\n    return (_jsx(TabsContainer, __assign({ variant: variant }, { children: fieldValues.map(function (_a) {\r\n            var label = _a.label, paramName = _a.paramName, isDisabled = _a.isDisabled;\r\n            var onButtonClick = function () {\r\n                onClick(paramName);\r\n            };\r\n            var isActive = paramName === activeValue;\r\n            if (variant === \"links\" /* links */) {\r\n                return (_jsxs(Link, __assign({ active: isActive, disabled: isDisabled !== null && isDisabled !== void 0 ? isDisabled : false, onClick: onButtonClick }, { children: [label, isActive && _jsx(Indicator, {}, void 0)] }), paramName));\r\n            }\r\n            else {\r\n                return (_jsx(LumaButton, __assign({ variant: isActive ? 'tabs_active' : 'tabs_inactive', size: \"tab\", icon: {\r\n                        iconComponent: (_jsx(LumaIcon, { type: \"solid\", iconCode: buttonIconCode }, void 0)),\r\n                        isOnRight: true,\r\n                    }, disabled: isDisabled !== null && isDisabled !== void 0 ? isDisabled : false, onClick: onButtonClick }, { children: label }), paramName));\r\n            }\r\n        }) }), void 0));\r\n};\r\n//# sourceMappingURL=LumaTabs.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaButton/index.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaIcon/index.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaTabs/LumaTabs.styles.ts"],"map":"{\"version\":3,\"file\":\"LumaTabs.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaTabs/LumaTabs.tsx\"],\"names\":[],\"mappings\":\";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAY,MAAM,aAAa,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAoCnE,MAAM,CAAC,IAAM,QAAQ,GAAG,UAAC,EAMb;QALV,eAAmB,EAAnB,OAAO,mBAAG,SAAS,KAAA,EACnB,mBAAgB,EAAhB,WAAW,mBAAG,EAAE,KAAA,EAChB,WAAW,iBAAA,EACX,OAAO,aAAA,EACP,cAAc,oBAAA;IAEd,OAAO,CACL,KAAC,aAAa,aAAC,OAAO,EAAE,OAAO,gBAC5B,WAAW,CAAC,GAAG,CAAC,UAAC,EAAgC;gBAA9B,KAAK,WAAA,EAAE,SAAS,eAAA,EAAE,UAAU,gBAAA;YAC9C,IAAM,aAAa,GAAG;gBACpB,OAAO,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC;YACF,IAAM,QAAQ,GAAG,SAAS,KAAK,WAAW,CAAC;YAC3C,IAAI,OAAO,wBAAsB,EAAE;gBACjC,OAAO,CACL,MAAC,IAAI,aAEH,MAAM,EAAE,QAAQ,EAChB,QAAQ,EAAE,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,KAAK,EAC7B,OAAO,EAAE,aAAa,iBAErB,KAAK,EACL,QAAQ,IAAI,KAAC,SAAS,aAAG,MANrB,SAAS,CAOT,CACR,CAAC;aACH;iBAAM;gBACL,OAAO,CACL,KAAC,UAAU,aAET,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,eAAe,EACnD,IAAI,EAAC,KAAK,EACV,IAAI,EAAE;wBACJ,aAAa,EAAE,CACb,KAAC,QAAQ,IAAC,IAAI,EAAC,OAAO,EAAC,QAAQ,EAAE,cAAc,WAAI,CACpD;wBACD,SAAS,EAAE,IAAI;qBAChB,EACD,QAAQ,EAAE,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,KAAK,EAC7B,OAAO,EAAE,aAAa,gBAErB,KAAK,KAZD,SAAS,CAaH,CACd,CAAC;aACH;QACH,CAAC,CAAC,YACY,CACjB,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaTabs/LumaTabs.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { IconCode } from '../LumaIcon';\r\ninterface FieldValues {\r\n    paramName: string;\r\n    label: string;\r\n    isDisabled?: boolean;\r\n}\r\ndeclare const enum VariantEnum {\r\n    buttons = \"buttons\",\r\n    links = \"links\"\r\n}\r\nexport interface TabsProps {\r\n    /**\r\n     * Determines whether the Tabs component is to be composed of buttons or links\r\n     */\r\n    variant: keyof typeof VariantEnum;\r\n    /**\r\n     * Currently selected value.\r\n     */\r\n    activeValue?: string;\r\n    /**\r\n     * List of tabs.\r\n     */\r\n    fieldValues: FieldValues[];\r\n    /**\r\n     * Handler of click which receives paramName of clicked tab.\r\n     */\r\n    onClick: (paramName: string) => void;\r\n    /**\r\n     * Code of the icon to be displayed in buttons.\r\n     */\r\n    buttonIconCode: IconCode;\r\n}\r\nexport declare const LumaTabs: ({ variant, activeValue, fieldValues, onClick, buttonIconCode, }: TabsProps) => JSX.Element;\r\nexport {};\r\n"}}
