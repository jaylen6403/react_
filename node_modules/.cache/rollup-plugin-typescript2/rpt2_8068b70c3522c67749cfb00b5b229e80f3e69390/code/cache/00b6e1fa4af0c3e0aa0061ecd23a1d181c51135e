{"code":"import { __assign } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport ReactModal from 'react-modal';\r\nimport { LumaIcon } from '../LumaIcon';\r\nimport { CloseButton } from './LumaModal.styles';\r\nexport function LumaModal(_a) {\r\n    var children = _a.children, isOpen = _a.isOpen, appElement = _a.appElement, onAfterOpen = _a.onAfterOpen, onAfterClose = _a.onAfterClose, style = _a.style, _b = _a.closeButton, closeButton = _b === void 0 ? {\r\n        show: false,\r\n        handleClose: function () {\r\n            throw new Error('Function not implemented.');\r\n        },\r\n    } : _b;\r\n    var customStyles = {\r\n        content: {\r\n            top: '20%',\r\n            left: '50%',\r\n            transform: 'translateX(-50%)',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            fontFamily: 'inherit',\r\n            textAlign: 'center',\r\n            inset: '20% auto auto 50%',\r\n            background: '#f4f6f8',\r\n            boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)',\r\n        },\r\n        overlay: {\r\n            zIndex: '2',\r\n            backgroundColor: 'rgba(0,0,0,0.4)',\r\n        },\r\n    };\r\n    if (!style) {\r\n        style = { content: {}, overlay: {} };\r\n    }\r\n    style.content = __assign(__assign({}, customStyles.content), style.content);\r\n    style.overlay = __assign(__assign({}, customStyles.overlay), style.overlay);\r\n    ReactModal.setAppElement(appElement);\r\n    return (_jsxs(ReactModal, __assign({ isOpen: isOpen, onAfterOpen: onAfterOpen, onAfterClose: onAfterClose, style: style }, { children: [closeButton.show && (_jsx(CloseButton, __assign({ \"data-testid\": \"modal-close\" }, { children: _jsx(LumaIcon, { iconCode: \"times\", onClick: closeButton.handleClose }, void 0) }), void 0)), children] }), void 0));\r\n}\r\n//# sourceMappingURL=LumaModal.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react-modal/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaIcon/index.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaModal/LumaModal.styles.ts"],"map":"{\"version\":3,\"file\":\"LumaModal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaModal/LumaModal.tsx\"],\"names\":[],\"mappings\":\";;AAAA,OAAO,UAAsB,MAAM,aAAa,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAiCjD,MAAM,UAAU,SAAS,CAAC,EAaT;QAZf,QAAQ,cAAA,EACR,MAAM,YAAA,EACN,UAAU,gBAAA,EACV,WAAW,iBAAA,EACX,YAAY,kBAAA,EACZ,KAAK,WAAA,EACL,mBAKC,EALD,WAAW,mBAAG;QACZ,IAAI,EAAE,KAAK;QACX,WAAW,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;KACF,KAAA;IAED,IAAM,YAAY,GAAW;QAC3B,OAAO,EAAE;YACP,GAAG,EAAE,KAAK;YACV,IAAI,EAAE,KAAK;YACX,SAAS,EAAE,kBAAkB;YAC7B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,KAAK;YACnB,UAAU,EAAE,SAAS;YACrB,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,mBAAmB;YAC1B,UAAU,EAAE,SAAS;YACrB,SAAS,EAAE,gCAAgC;SAC5C;QACD,OAAO,EAAE;YACP,MAAM,EAAE,GAAG;YACX,eAAe,EAAE,iBAAiB;SACnC;KACF,CAAC;IACF,IAAI,CAAC,KAAK,EAAE;QACV,KAAK,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;KACtC;IACD,KAAK,CAAC,OAAO,yBAAQ,YAAY,CAAC,OAAO,GAAK,KAAK,CAAC,OAAO,CAAE,CAAC;IAC9D,KAAK,CAAC,OAAO,yBAAQ,YAAY,CAAC,OAAO,GAAK,KAAK,CAAC,OAAO,CAAE,CAAC;IAE9D,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAErC,OAAO,CACL,MAAC,UAAU,aACT,MAAM,EAAE,MAAM,EACd,WAAW,EAAE,WAAW,EACxB,YAAY,EAAE,YAAY,EAC1B,KAAK,EAAE,KAAK,iBAEX,WAAW,CAAC,IAAI,IAAI,CACnB,KAAC,WAAW,4BAAa,aAAa,gBACpC,KAAC,QAAQ,IAAC,QAAQ,EAAC,OAAO,EAAC,OAAO,EAAE,WAAW,CAAC,WAAW,WAAI,YACnD,CACf,EACA,QAAQ,aACE,CACd,CAAC;AACJ,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaModal/LumaModal.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { Styles } from 'react-modal';\r\nexport interface LumaModalProps {\r\n    /**\r\n     * Modal's content\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Whether the modal is open\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * App's root element (for setting aria-hidden)\r\n     */\r\n    appElement: string | HTMLElement;\r\n    /**\r\n     * Callback fired after opening\r\n     */\r\n    onAfterOpen?: () => void;\r\n    /**\r\n     * Callback fired after closing\r\n     */\r\n    onAfterClose?: () => void;\r\n    /**\r\n     * Custom styling\r\n     */\r\n    style?: Styles;\r\n    /**\r\n     * Specifies whether to show the close button and its action\r\n     */\r\n    closeButton?: {\r\n        show: boolean;\r\n        handleClose: () => void;\r\n    };\r\n}\r\nexport declare function LumaModal({ children, isOpen, appElement, onAfterOpen, onAfterClose, style, closeButton, }: LumaModalProps): JSX.Element;\r\n"}}
