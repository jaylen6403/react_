{"code":"import { __assign, __rest } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { forwardRef } from 'react';\r\nimport { TextEntryContainer, TextEntryField, Input, TextEntryMockContainer, TextEntryMockLabel, TextEntryMockLabelContainer, TextEntryHelper, IconInsideTextEntry, } from './LumaTextEntry.styles';\r\nexport var LumaTextEntry = forwardRef(function LumaTextEntry(componentProps, forwardedRef) {\r\n    var id = componentProps.id, label = componentProps.label, type = componentProps.type, className = componentProps.className, value = componentProps.value, onChange = componentProps.onChange, onBlur = componentProps.onBlur, fullWidth = componentProps.fullWidth, helperText = componentProps.helperText, _a = componentProps.error, error = _a === void 0 ? false : _a, _b = componentProps.disabled, disabled = _b === void 0 ? false : _b, htmlFor = componentProps.htmlFor, _c = componentProps.sizeVariant, sizeVariant = _c === void 0 ? 'medium' : _c, _d = componentProps.readOnly, readOnly = _d === void 0 ? false : _d, icon = componentProps.icon, _e = componentProps.variant, variant = _e === void 0 ? \"label\" /* label */ : _e, _f = componentProps.useByDropdown, useByDropdown = _f === void 0 ? false : _f, rest = __rest(componentProps, [\"id\", \"label\", \"type\", \"className\", \"value\", \"onChange\", \"onBlur\", \"fullWidth\", \"helperText\", \"error\", \"disabled\", \"htmlFor\", \"sizeVariant\", \"readOnly\", \"icon\", \"variant\", \"useByDropdown\"]);\r\n    return (_jsxs(TextEntryContainer, __assign({ fullWidth: fullWidth, disabled: disabled }, { children: [_jsxs(TextEntryField, __assign({ sizeVariant: sizeVariant, className: \"text-entry--outlined\" }, { children: [_jsx(Input, __assign({ ref: forwardedRef, id: id, type: type, value: value, className: className, onChange: onChange, onBlur: onBlur, disabled: disabled, readOnly: readOnly, sizeVariant: sizeVariant, variant: variant, placeholder: variant === \"free\" /* free */ ? label : '', useByDropdown: useByDropdown }, rest), void 0), icon !== undefined && (_jsx(IconInsideTextEntry, __assign({ tabIndex: -1, disabled: disabled }, { children: icon }), void 0)), _jsx(TextEntryMockContainer, __assign({ className: \"\".concat(error ? 'error' : '', \" TextEntryMockContainer--label\") }, { children: _jsx(TextEntryMockLabelContainer, __assign({ sizeVariant: sizeVariant, className: \"\".concat(value ? 'TextEntryMockLabel--focused' : '', \" TextEntryMockLabelContainer\") }, { children: variant === \"label\" /* label */ && (_jsx(TextEntryMockLabel, __assign({ htmlFor: htmlFor, className: \"TextEntryMockLabel\" }, { children: label }), void 0)) }), void 0) }), void 0)] }), void 0), helperText && (_jsx(TextEntryHelper, __assign({ className: \"\".concat(error ? 'TextEntryHelper--error' : '', \" TextEntryHelper\") }, { children: helperText }), void 0))] }), void 0));\r\n});\r\nexport default LumaTextEntry;\r\n//# sourceMappingURL=LumaTextEntry.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaTextEntry/LumaTextEntry.styles.ts"],"map":"{\"version\":3,\"file\":\"LumaTextEntry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaTextEntry/LumaTextEntry.tsx\"],\"names\":[],\"mappings\":\";;AAAA,OAAO,EAA2B,UAAU,EAAkB,MAAM,OAAO,CAAC;AAC5E,OAAO,EACL,kBAAkB,EAClB,cAAc,EACd,KAAK,EACL,sBAAsB,EACtB,kBAAkB,EAClB,2BAA2B,EAC3B,eAAe,EACf,mBAAmB,GACpB,MAAM,wBAAwB,CAAC;AAmDhC,MAAM,CAAC,IAAM,aAAa,GAAG,UAAU,CACrC,SAAS,aAAa,CACpB,cAA8B,EAC9B,YAAmC;IAGjC,IAAA,EAAE,GAkBA,cAAc,GAlBd,EACF,KAAK,GAiBH,cAAc,MAjBX,EACL,IAAI,GAgBF,cAAc,KAhBZ,EACJ,SAAS,GAeP,cAAc,UAfP,EACT,KAAK,GAcH,cAAc,MAdX,EACL,QAAQ,GAaN,cAAc,SAbR,EACR,MAAM,GAYJ,cAAc,OAZV,EACN,SAAS,GAWP,cAAc,UAXP,EACT,UAAU,GAUR,cAAc,WAVN,EACV,KASE,cAAc,MATH,EAAb,KAAK,mBAAG,KAAK,KAAA,EACb,KAQE,cAAc,SARA,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAChB,OAAO,GAOL,cAAc,QAPT,EACP,KAME,cAAc,YANM,EAAtB,WAAW,mBAAG,QAAQ,KAAA,EACtB,KAKE,cAAc,SALA,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAChB,IAAI,GAIF,cAAc,KAJZ,EACJ,KAGE,cAAc,QAHW,EAA3B,OAAO,2CAAoB,EAC3B,KAEE,cAAc,cAFK,EAArB,aAAa,mBAAG,KAAK,KAAA,EAClB,IAAI,UACL,cAAc,EAnBZ,6LAmBL,CADQ,CACU;IAEnB,OAAO,CACL,MAAC,kBAAkB,aAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,iBAC1D,MAAC,cAAc,aACb,WAAW,EAAE,WAAW,EACxB,SAAS,EAAC,sBAAsB,iBAEhC,KAAC,KAAK,aACJ,GAAG,EAAE,YAAY,EACjB,EAAE,EAAE,EAAE,EACN,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,MAAM,EACd,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,EACxB,OAAO,EAAE,OAAO,EAChB,WAAW,EAAE,OAAO,sBAAqB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EACtD,aAAa,EAAE,aAAa,IACxB,IAAI,UACR,EACD,IAAI,KAAK,SAAS,IAAI,CACrB,KAAC,mBAAmB,aAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,gBAClD,IAAI,YACe,CACvB,EACD,KAAC,sBAAsB,aACrB,SAAS,EAAE,UAAG,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,mCAAgC,gBAElE,KAAC,2BAA2B,aAC1B,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,UACT,KAAK,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,EAAE,iCACd,gBAE7B,OAAO,wBAAsB,IAAI,CAChC,KAAC,kBAAkB,aACjB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAC,oBAAoB,gBAE7B,KAAK,YACa,CACtB,YAC2B,YACP,aACV,EAChB,UAAU,IAAI,CACb,KAAC,eAAe,aACd,SAAS,EAAE,UACT,KAAK,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,qBACrB,gBAEjB,UAAU,YACK,CACnB,aACkB,CACtB,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,aAAa,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaTextEntry/LumaTextEntry.d.ts","writeByteOrderMark":false,"text":"import { ChangeEvent, FocusEvent, ReactNode } from 'react';\r\ndeclare const enum VariantEnum {\r\n    free = \"free\",\r\n    label = \"label\"\r\n}\r\nexport interface TextEntryProps {\r\n    /**a unique key for the field */\r\n    id?: string;\r\n    /**which act as placeholder initially when type anything it will act as label of the textbox */\r\n    label?: string;\r\n    /**htmlForwhich will help label will target for  */\r\n    htmlFor?: string;\r\n    /**Type of the field*/\r\n    type?: string;\r\n    /**it will be the value enter*/\r\n    value?: string;\r\n    defaultValue?: string;\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\r\n    /**onBlur action*/\r\n    onBlur?: (e: FocusEvent<HTMLInputElement>) => void;\r\n    onFocus?: (e: FocusEvent<HTMLInputElement>) => void;\r\n    className?: string;\r\n    /**Error will act when user need to show validation error*/\r\n    error?: boolean;\r\n    /**helpr will show below the input field*/\r\n    helperText?: string;\r\n    /**readonly : cannot Enter or fill value*/\r\n    readOnly?: boolean;\r\n    /**fullwidth will make the field 100% width*/\r\n    fullWidth?: boolean;\r\n    /**disabled will disable the field\r\n     * @default false\r\n     */\r\n    disabled?: boolean;\r\n    /**size will make the field small, medium or large size\r\n     *@default medium*/\r\n    sizeVariant?: 'small' | 'medium' | 'large';\r\n    icon?: ReactNode;\r\n    variant?: keyof typeof VariantEnum;\r\n    useByDropdown?: boolean;\r\n}\r\nexport declare const LumaTextEntry: import(\"react\").ForwardRefExoticComponent<TextEntryProps & import(\"react\").RefAttributes<HTMLInputElement>>;\r\nexport default LumaTextEntry;\r\n"}}
