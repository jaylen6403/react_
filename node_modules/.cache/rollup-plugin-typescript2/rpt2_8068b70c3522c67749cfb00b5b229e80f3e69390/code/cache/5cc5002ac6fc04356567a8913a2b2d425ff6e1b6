{"code":"import { __assign } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport * as React from 'react';\r\nimport { DropDownBox, DropDownListElement, DropDownSection, InnerBox, } from './LumaDropdownBox.style';\r\nexport var LumaDropDownBox = function (_a) {\r\n    var items = _a.items, disabled = _a.disabled, getMenuProps = _a.getMenuProps, getItemProps = _a.getItemProps, _b = _a.isOpen, isOpen = _b === void 0 ? false : _b, highlightedIndex = _a.highlightedIndex, _c = _a.size, size = _c === void 0 ? 'medium' : _c, renderComponent = _a.renderComponent, _d = _a.selectedItem, selectedItem = _d === void 0 ? null : _d, _e = _a.itemToString, itemToString = _e === void 0 ? function (item) { var _a; return (_a = item === null || item === void 0 ? void 0 : item.label) !== null && _a !== void 0 ? _a : ''; } : _e, _f = _a.variant, variant = _f === void 0 ? 'standard' : _f, selectedItems = _a.selectedItems, id = _a.id, errorTemplate = _a.errorTemplate;\r\n    var menuProps = getMenuProps ? getMenuProps() : {};\r\n    return (_jsx(DropDownBox, __assign({ size: size, isOpen: isOpen, variant: variant }, menuProps, { \"aria-labelledby\": \"\".concat(id, \"Label\") }, { children: _jsx(InnerBox, { children: isOpen &&\r\n                (items.length\r\n                    ? items.map(function (item, index) {\r\n                        var _a;\r\n                        var isSelected = false;\r\n                        if (selectedItem && item) {\r\n                            isSelected =\r\n                                itemToString(selectedItem) === itemToString(item);\r\n                        }\r\n                        var itemProps = getItemProps\r\n                            ? getItemProps({\r\n                                item: item,\r\n                                index: index,\r\n                                disabled: item.isDisabled,\r\n                            })\r\n                            : {};\r\n                        return (_jsxs(React.Fragment, { children: [item.sectionName && (_jsx(DropDownSection, { children: item === null || item === void 0 ? void 0 : item.sectionName }, void 0)), _jsx(DropDownListElement, __assign({ isHighlighted: highlightedIndex === index, \"data-testid\": \"dropdown-item-\".concat((_a = item.label) === null || _a === void 0 ? void 0 : _a.toLowerCase().replace(' ', '_')) }, itemProps, { children: React.cloneElement(renderComponent, {\r\n                                        selectedItems: selectedItems,\r\n                                        item: item,\r\n                                        items: items,\r\n                                        disabled: disabled,\r\n                                        selectedItem: selectedItem,\r\n                                        isSelected: isSelected,\r\n                                        variant: variant,\r\n                                    }) }), void 0)] }, \"\".concat(item).concat(index)));\r\n                    })\r\n                    : errorTemplate !== null && errorTemplate !== void 0 ? errorTemplate : null) }, void 0) }), void 0));\r\n};\r\n//# sourceMappingURL=LumaDropDownBox.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaDropdown/LumaDropDownBasicType.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaDropdownBox/LumaDropdownBox.style.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/downshift/typings/index.d.ts"],"map":"{\"version\":3,\"file\":\"LumaDropDownBox.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaDropdownBox/LumaDropDownBox.tsx\"],\"names\":[],\"mappings\":\";;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EACL,WAAW,EACX,mBAAmB,EACnB,eAAe,EACf,QAAQ,GACT,MAAM,yBAAyB,CAAC;AA2BjC,MAAM,CAAC,IAAM,eAAe,GAAG,UAAQ,EAeV;QAd3B,KAAK,WAAA,EACL,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACZ,cAAc,EAAd,MAAM,mBAAG,KAAK,KAAA,EACd,gBAAgB,sBAAA,EAChB,YAAe,EAAf,IAAI,mBAAG,QAAQ,KAAA,EACf,eAAe,qBAAA,EACf,oBAAmB,EAAnB,YAAY,mBAAG,IAAI,KAAA,EACnB,oBAAgE,EAAhE,YAAY,mBAAG,UAAC,IAA0B,YAAK,OAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,mCAAI,EAAE,CAAA,EAAA,KAAA,EAChE,eAAoB,EAApB,OAAO,mBAAG,UAAU,KAAA,EACpB,aAAa,mBAAA,EACb,EAAE,QAAA,EACF,aAAa,mBAAA;IAEb,IAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACrD,OAAO,CACL,KAAC,WAAW,aACV,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,OAAO,IACZ,SAAS,uBACI,UAAG,EAAE,UAAO,gBAE7B,KAAC,QAAQ,cACN,MAAM;gBACL,CAAC,KAAK,CAAC,MAAM;oBACX,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAmB,EAAE,KAAa;;wBAC3C,IAAI,UAAU,GAAG,KAAK,CAAC;wBACvB,IAAI,YAAY,IAAI,IAAI,EAAE;4BACxB,UAAU;gCACR,YAAY,CAAC,YAAY,CAAC,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC;yBACrD;wBACD,IAAM,SAAS,GAAG,YAAY;4BAC5B,CAAC,CAAC,YAAY,CAAC;gCACX,IAAI,EAAE,IAAY;gCAClB,KAAK,OAAA;gCACL,QAAQ,EAAE,IAAI,CAAC,UAAU;6BAC1B,CAAC;4BACJ,CAAC,CAAC,EAAE,CAAC;wBACP,OAAO,CACL,MAAC,KAAK,CAAC,QAAQ,eACZ,IAAI,CAAC,WAAW,IAAI,CACnB,KAAC,eAAe,cAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,WAAmB,CACvD,EACD,KAAC,mBAAmB,aAClB,aAAa,EAAE,gBAAgB,KAAK,KAAK,iBAC5B,wBAAiB,MAAA,IAAI,CAAC,KAAK,0CACpC,WAAW,GACZ,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAE,IAClB,SAAS,cAEZ,KAAK,CAAC,YAAY,CACjB,eAAqC,EACrC;wCACE,aAAa,eAAA;wCACb,IAAI,MAAA;wCACJ,KAAK,OAAA;wCACL,QAAQ,UAAA;wCACR,YAAY,cAAA;wCACZ,UAAU,YAAA;wCACV,OAAO,SAAA;qCACR,CACF,YACmB,KAvBH,UAAG,IAAI,SAAG,KAAK,CAAE,CAwBrB,CAClB,CAAC;oBACJ,CAAC,CAAC;oBACJ,CAAC,CAAC,aAAa,aAAb,aAAa,cAAb,aAAa,GAAI,IAAI,CAAC,WACnB,YACC,CACf,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaDropdownBox/LumaDropDownBox.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { DataItemProps, SizeType } from '../LumaDropdown/LumaDropDownBasicType';\r\nimport { UseComboboxGetItemPropsOptions } from 'downshift';\r\n/** Interface for dropdown box */\r\nexport interface DropDownBoxInterface<Item> {\r\n    disabled?: boolean;\r\n    items: Item[];\r\n    getMenuProps?: () => void;\r\n    getItemProps?: (options: UseComboboxGetItemPropsOptions<Item>) => void;\r\n    isOpen?: boolean;\r\n    highlightedIndex?: number;\r\n    size?: SizeType;\r\n    renderComponent?: React.ReactElement<{\r\n        item: Item;\r\n    }>;\r\n    itemToString?: (item: DataItemProps | null) => string;\r\n    selectedItem?: DataItemProps | null;\r\n    variant?: 'standard' | 'underlier' | 'single' | 'multi' | 'no-border-top' | 'no-border-bottom';\r\n    id: string;\r\n    selectedItems?: DataItemProps[];\r\n    errorTemplate?: React.ReactElement;\r\n}\r\nexport declare const LumaDropDownBox: <Item>({ items, disabled, getMenuProps, getItemProps, isOpen, highlightedIndex, size, renderComponent, selectedItem, itemToString, variant, selectedItems, id, errorTemplate, }: DropDownBoxInterface<Item>) => JSX.Element;\r\n"}}
