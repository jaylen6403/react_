{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect, useState } from 'react';\r\nimport { RemoveIcon, Input, LabelPart, Unit, EntryPart, ErrorMessage, ChipContainer, Icon, Chip, } from './LumaChip.styles';\r\nimport { LumaIcon } from '../LumaIcon';\r\nexport const LumaChip = ({ children, variant = 'primary', state = \"locked\" /* locked */, disabled = false, sizeVariant = 'regular', entry = false, iconCode, onRemove, onChange, onBlur, value, unit = '%', error = { hasError: false }, entryMaxLength = 3, }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    useEffect(() => {\r\n        var _a;\r\n        setInputValue((_a = value === null || value === void 0 ? void 0 : value.toString()) !== null && _a !== void 0 ? _a : '');\r\n    }, [value]);\r\n    const handleChange = (e) => {\r\n        const inputValue = e.target.value;\r\n        const inputPatternRegex = /^[0-9\\b]+$/;\r\n        if (inputValue === '' || inputPatternRegex.test(inputValue)) {\r\n            setInputValue(inputValue);\r\n            if (onChange) {\r\n                onChange(e);\r\n            }\r\n        }\r\n    };\r\n    const calculateInputWidth = (inputValue) => {\r\n        const inputLength = inputValue.length;\r\n        return `${inputLength !== 0 ? inputLength + 1 : 2}ch`;\r\n    };\r\n    return (_jsxs(ChipContainer, Object.assign({ error: error }, { children: [_jsxs(Chip, Object.assign({ sizeVariant: sizeVariant }, { children: [_jsxs(LabelPart, Object.assign({ sizeVariant: sizeVariant, variant: variant, entry: entry }, { children: [state === \"removable\" /* removable */ && (_jsx(RemoveIcon, Object.assign({ onClick: onRemove, \"data-testid\": \"chip-remove\" }, { children: _jsx(LumaIcon, { iconCode: \"times\" }, void 0) }), void 0)), children, iconCode && (_jsx(Icon, { children: _jsx(LumaIcon, { iconCode: iconCode }, void 0) }, void 0))] }), void 0), entry && (_jsxs(EntryPart, Object.assign({ sizeVariant: sizeVariant, error: error, variant: variant, disabled: disabled, state: state }, { children: [_jsx(Input, { type: \"text\", maxLength: entryMaxLength, sizeVariant: sizeVariant, value: inputValue, error: error, onChange: handleChange, onBlur: onBlur, style: {\r\n                                    width: calculateInputWidth(inputValue),\r\n                                }, disabled: disabled || state === \"locked\" /* locked */ }, void 0), _jsx(Unit, Object.assign({ sizeVariant: sizeVariant }, { children: inputValue.toString().length > 0 && unit }), void 0)] }), void 0))] }), void 0), (error === null || error === void 0 ? void 0 : error.hasError) && (error === null || error === void 0 ? void 0 : error.errorMessage) && (_jsx(ErrorMessage, { children: error.errorMessage }, void 0))] }), void 0));\r\n};\r\n//# sourceMappingURL=LumaChip.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaChip/LumaChip.styles.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaIcon/index.ts"],"map":"{\"version\":3,\"file\":\"LumaChip.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaChip/LumaChip.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaChip/LumaChip.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { IconCode } from '../LumaIcon';\r\ndeclare type ChipError = {\r\n    hasError: boolean;\r\n    position?: 'bottom' | 'side';\r\n    errorMessage?: string;\r\n};\r\ndeclare const enum StateEnum {\r\n    locked = \"locked\",\r\n    removable = \"removable\"\r\n}\r\nexport interface ChipProps {\r\n    /**\r\n     * Children appearing on the left side of the chip.\r\n     */\r\n    children: React.ReactNode;\r\n    /**\r\n     * Style variant.\r\n     */\r\n    variant: 'primary' | 'secondary' | 'tertiary' | 'icon';\r\n    /**\r\n     * State of chip.\r\n     */\r\n    state: keyof typeof StateEnum;\r\n    /**\r\n     * Whether the value part is disabled\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Size of chip.\r\n     */\r\n    sizeVariant: 'regular' | 'small' | 'icon';\r\n    /**\r\n     * Whether the chip should have a value part\r\n     */\r\n    entry?: boolean;\r\n    /**\r\n     * Code of the icon to be displayed in the chip.\r\n     */\r\n    iconCode?: IconCode;\r\n    /**\r\n     * Defines action for delete\r\n     */\r\n    onRemove?: React.MouseEventHandler<HTMLDivElement>;\r\n    /**\r\n     * onChange action\r\n     */\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    /**\r\n     * onBlur action\r\n     */\r\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n    /**\r\n     * Sets a numeric value\r\n     */\r\n    value?: number;\r\n    /**\r\n     * Value units displayed\r\n     */\r\n    unit?: string;\r\n    /**\r\n     * Defines error\r\n     */\r\n    error?: ChipError;\r\n    /**\r\n     * Defines max length of input in entry part\r\n     */\r\n    entryMaxLength?: number;\r\n}\r\nexport declare const LumaChip: ({ children, variant, state, disabled, sizeVariant, entry, iconCode, onRemove, onChange, onBlur, value, unit, error, entryMaxLength, }: ChipProps) => JSX.Element;\r\nexport {};\r\n"}}
