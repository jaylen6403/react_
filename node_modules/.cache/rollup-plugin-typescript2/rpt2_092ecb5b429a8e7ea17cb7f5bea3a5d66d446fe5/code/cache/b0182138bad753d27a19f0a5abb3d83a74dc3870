{"code":"import { __rest } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { RadioContainer, StyledRadio, HiddenRadio } from './LumaRadio.styles';\r\nexport const LumaRadio = (_a) => {\r\n    var { label, disabled = false, checked = false, onChange, value = 'radio' } = _a, rest = __rest(_a, [\"label\", \"disabled\", \"checked\", \"onChange\", \"value\"]);\r\n    return (_jsxs(RadioContainer, Object.assign({ disabled: disabled, checked: checked }, { children: [_jsx(HiddenRadio, Object.assign({ checked: checked, onChange: onChange, disabled: disabled, value: value }, rest), void 0), _jsx(StyledRadio, { checked: checked, disabled: disabled }, void 0), label] }), void 0));\r\n};\r\n//# sourceMappingURL=LumaRadio.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaRadio/LumaRadio.styles.ts"],"map":"{\"version\":3,\"file\":\"LumaRadio.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaRadio/LumaRadio.tsx\"],\"names\":[],\"mappings\":\";;AAAA,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAyB9E,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EAOb,EAAE,EAAE;QAPS,EACxB,KAAK,EACL,QAAQ,GAAG,KAAK,EAChB,OAAO,GAAG,KAAK,EACf,QAAQ,EACR,KAAK,GAAG,OAAO,OAEJ,EADR,IAAI,cANiB,qDAOzB,CADQ;IAEP,OAAO,CACL,MAAC,cAAc,kBAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,iBAClD,KAAC,WAAW,kBACV,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,IACR,IAAI,UACR,EACF,KAAC,WAAW,IAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,WAAI,EACpD,KAAK,aACS,CAClB,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaRadio/LumaRadio.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport interface RadioProps extends React.HTMLAttributes<HTMLInputElement> {\r\n    /**\r\n     * The label that is rendered to the right of the radio marker.\r\n     */\r\n    label?: React.ReactNode;\r\n    /**\r\n     * Determines whether the radio is disabled.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Determines whether the radio is checked.\r\n     */\r\n    checked?: boolean;\r\n    /**\r\n     * onChange action on radio.\r\n     */\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    /**\r\n     * The value associated with the radio.\r\n     */\r\n    value?: string;\r\n}\r\nexport declare const LumaRadio: ({ label, disabled, checked, onChange, value, ...rest }: RadioProps) => JSX.Element;\r\n"}}
