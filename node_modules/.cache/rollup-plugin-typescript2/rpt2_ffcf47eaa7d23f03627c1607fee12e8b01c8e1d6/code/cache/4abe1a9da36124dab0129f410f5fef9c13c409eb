{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect } from 'react';\r\nimport { MessageCol, MessageStyle, MessageContent, MessageTitle, MessageColoredIcon, MessageExitIcon, FlatXButton, } from './Message.style';\r\nexport const Message = ({ \r\n/**\r\n * Title of the message\r\n */\r\ntitle, \r\n/**\r\n * Description of the message (optional)\r\n */\r\ndescription, \r\n/**\r\n * If true, hide the message. By default: false\r\n */\r\nshowMessage = false, setShowMessage, \r\n/**\r\n * In seconds. By default: 3 seconds (subject to change)\r\n */\r\ntimer = 3, \r\n/**\r\n * Message Type will decide the style of the Message:\r\n *  (Default) info: Blue Message\r\n *  success: Green Message\r\n *  warn: Yellow Message\r\n *  error: Red Message\r\n */\r\nmessageType = 'info', }) => {\r\n    const iconCode = {\r\n        info: 'circle-check',\r\n        success: 'circle-check',\r\n        error: 'circle-xmark',\r\n        warn: 'circle-exclamation',\r\n    }[messageType];\r\n    // if message shouldn't be off, start timer\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => setShowMessage(false), timer * 1000);\r\n        return () => clearTimeout(timeout);\r\n    }, [showMessage, timer, setShowMessage]);\r\n    if (!showMessage)\r\n        return null;\r\n    return (_jsxs(MessageStyle, Object.assign({ messageType: messageType }, { children: [_jsx(MessageColoredIcon, { iconCode: iconCode }, void 0), _jsxs(MessageCol, Object.assign({ role: \"alert\" }, { children: [_jsx(MessageTitle, { children: title }, void 0), description ? _jsx(MessageContent, { children: description }, void 0) : null] }), void 0), _jsx(FlatXButton, Object.assign({ onClick: () => setShowMessage(false) }, { children: _jsx(MessageExitIcon, { iconCode: \"times\" }, void 0) }), void 0)] }), void 0));\r\n};\r\n//# sourceMappingURL=Message.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components/Icon/Icon.tsx","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components/Message/Message.style.ts"],"map":"{\"version\":3,\"file\":\"Message.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../libs/design-system/src/lib/components/Message/Message.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,EACL,UAAU,EACV,YAAY,EACZ,cAAc,EACd,YAAY,EACZ,kBAAkB,EAClB,eAAe,EACf,WAAW,GACZ,MAAM,iBAAiB,CAAC;AAazB,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC;AACtB;;GAEG;AACH,KAAK;AACL;;GAEG;AACH,WAAW;AACX;;GAEG;AACH,WAAW,GAAG,KAAK,EACnB,cAAc;AACd;;GAEG;AACH,KAAK,GAAG,CAAC;AACT;;;;;;GAMG;AACH,WAAW,GAAG,MAAM,GACP,EAAE,EAAE;IACjB,MAAM,QAAQ,GAAa;QACzB,IAAI,EAAE,cAAc;QACpB,OAAO,EAAE,cAAc;QACvB,KAAK,EAAE,cAAc;QACrB,IAAI,EAAE,oBAAoB;KAC3B,CAAC,WAAW,CAAa,CAAC;IAC3B,2CAA2C;IAC3C,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC;QACtE,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC;IACzC,IAAI,CAAC,WAAW;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,CACL,MAAC,YAAY,kBAAC,WAAW,EAAE,WAAW,iBACpC,KAAC,kBAAkB,IAAC,QAAQ,EAAE,QAAQ,WAAI,EAC1C,MAAC,UAAU,kBAAC,IAAI,EAAC,OAAO,iBACtB,KAAC,YAAY,cAAE,KAAK,WAAgB,EACnC,WAAW,CAAC,CAAC,CAAC,KAAC,cAAc,cAAE,WAAW,WAAkB,CAAC,CAAC,CAAC,IAAI,aACzD,EACb,KAAC,WAAW,kBAAC,OAAO,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,gBAC/C,KAAC,eAAe,IAAC,QAAQ,EAAC,OAAO,WAAG,YACxB,aACD,CAChB,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components/Message/Message.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport declare type MessageType = 'info' | 'success' | 'error' | 'warn';\r\nexport interface MessageProps {\r\n    title: string;\r\n    showMessage: boolean;\r\n    setShowMessage: (value: boolean) => void;\r\n    messageType?: MessageType;\r\n    description?: string;\r\n    timer?: number;\r\n}\r\nexport declare const Message: ({ title, description, showMessage, setShowMessage, timer, messageType, }: MessageProps) => JSX.Element | null;\r\n"}}
