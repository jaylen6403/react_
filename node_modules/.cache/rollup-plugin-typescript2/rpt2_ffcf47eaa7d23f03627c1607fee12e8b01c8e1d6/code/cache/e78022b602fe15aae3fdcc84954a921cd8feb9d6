{"code":"export const MaxLengthValue = 15;\r\n//# sourceMappingURL=LumaDropDownBasicType.js.map","references":["/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@types/react/index.d.ts","/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaIcon/index.ts"],"map":"{\"version\":3,\"file\":\"LumaDropDownBasicType.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../libs/design-system/src/lib/components-Luma/components/LumaDropdown/LumaDropDownBasicType.ts\"],\"names\":[],\"mappings\":\"AA6EA,MAAM,CAAC,MAAM,cAAc,GAAG,EAAE,CAAC\"}","dts":{"name":"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/.cache/rollup-plugin-typescript2/placeholder/lib/components-Luma/components/LumaDropdown/LumaDropDownBasicType.d.ts","writeByteOrderMark":false,"text":"import { FocusEvent } from 'react';\r\nimport { IconCode, IconProps } from '../LumaIcon';\r\nexport declare type SizeType = 'small' | 'medium' | 'large' | 'top' | 'bottom';\r\nexport interface DataItemProps {\r\n    /**  displayed item's label in the list */\r\n    label?: string;\r\n    /**  item value in dropdown */\r\n    value?: string | number;\r\n    /** function value in dropdown - when string or number are not enough */\r\n    action?: (arg: any) => void;\r\n    /** checkbox index for multidropdown */\r\n    checkboxIndex?: number;\r\n    /**\r\n     * code for the icon that will be displayed\r\n     * to the right of the item in the dropdown list\r\n     */\r\n    iconCode?: IconCode;\r\n    /**\r\n     * Sets the name of the section\r\n     * that is displayed above this item\r\n     */\r\n    sectionName?: string;\r\n    /**\r\n     * Determines whether the item is disabled\r\n     */\r\n    isDisabled?: boolean;\r\n}\r\nexport interface CommonDropdownProps {\r\n    /**  A name(string) for the field */\r\n    name: string;\r\n    /** A unique id for the field */\r\n    id: string;\r\n    /** Whether input has an error */\r\n    error?: boolean;\r\n    /**  helperText will show a label below the box for showing information or error message */\r\n    helperText?: string;\r\n    /** input will be readonly */\r\n    readOnly?: boolean;\r\n    /** fullwidth will make the field 100% width  */\r\n    fullWidth?: boolean;\r\n    /** disabled will disable the field */\r\n    disabled?: boolean;\r\n    /** sets the size of the dropdown */\r\n    size?: SizeType;\r\n    /** act like a placeholder */\r\n    placeholder?: string;\r\n    /** allows to use dropdown as styled component */\r\n    className?: string;\r\n    /** data array for dropdown */\r\n    items: DataItemProps[];\r\n    /** action item on blur */\r\n    handleBlur?: (e: FocusEvent<HTMLInputElement>) => void;\r\n    /** action to output string */\r\n    itemToString?: (item: DataItemProps | null) => string;\r\n}\r\nexport interface LumaSingleDropDownProps extends CommonDropdownProps {\r\n    /** For selected data */\r\n    defaultSelectedItem?: DataItemProps;\r\n    /** action item selection a dropdown */\r\n    onChange?: (newItem: DataItemProps | null) => void;\r\n    /** dropDownIcon */\r\n    dropDownIcon?: IconCode;\r\n    /** The type of font-awesome icon the dropdown should show  */\r\n    dropDownIconType?: IconProps['type'];\r\n}\r\nexport interface LumaMultiDropDownProps extends CommonDropdownProps {\r\n    /** For selected data */\r\n    defaultSelectedItems?: DataItemProps[];\r\n    /** action item selection a dropdown */\r\n    onChange?: (newItems: DataItemProps[]) => void;\r\n}\r\nexport declare const MaxLengthValue = 15;\r\nexport declare type getItemProps = {\r\n    item: DataItemProps | TextSearchItem;\r\n    index: number;\r\n    disabled?: boolean;\r\n};\r\nexport declare type TextSearchItem = {\r\n    label: string;\r\n    id: string;\r\n};\r\n"}}
