{"version":3,"file":"main.dd4ce946cc55e979c8c7.hot-update.js","mappings":"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","sources":["webpack://luma-fe-workspace/./libs/design-system/src/lib/components-Luma/components/LumaChip/LumaChip.tsx","webpack://luma-fe-workspace/./libs/luma/globalnav/src/lib/luma-globalnav.tsx","webpack://luma-fe-workspace/./libs/redux/src/components/LumaAppRedirect/LumaAppRedirect.tsx","webpack://luma-fe-workspace/./libs/redux/src/utils/logout.ts","webpack://luma-fe-workspace/./libs/utility/src/index.ts","webpack://luma-fe-workspace/./libs/utility/src/lib/formatters/date-formatter/date.formatter.ts","webpack://luma-fe-workspace/./libs/utility/src/lib/helper/app-login/get-luma-app.login.ts","webpack://luma-fe-workspace/./libs/utility/src/lib/helper/date-helper/date.helper.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  RemoveIcon,\n  Input,\n  LabelPart,\n  Unit,\n  EntryPart,\n  ErrorMessage,\n  ChipContainer,\n  Icon,\n  Chip,\n} from './LumaChip.styles';\nimport { IconCode, LumaIcon } from '../LumaIcon';\n\ntype ChipError = {\n  hasError: boolean;\n  position?: 'bottom' | 'side';\n  errorMessage?: string;\n};\n\nconst enum StateEnum {\n  locked = 'locked',\n  removable = 'removable',\n}\n\nexport interface ChipProps {\n  /**\n   * Children appearing on the left side of the chip.\n   */\n  children: React.ReactNode;\n  /**\n   * Style variant.\n   */\n  variant: 'primary' | 'secondary' | 'tertiary' | 'icon';\n  /**\n   * State of chip.\n   */\n  state: keyof typeof StateEnum;\n  /**\n   * Whether the value part is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Size of chip.\n   */\n  sizeVariant: 'regular' | 'small' | 'icon';\n  /**\n   * Whether the chip should have a value part\n   */\n  entry?: boolean;\n  /**\n   * Code of the icon to be displayed in the chip.\n   */\n  iconCode?: IconCode;\n  /**\n   * Defines action for delete\n   */\n  onRemove?: React.MouseEventHandler<HTMLDivElement>;\n  /**\n   * onChange action\n   */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * onBlur action\n   */\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  /**\n   * Sets a numeric value\n   */\n  value?: number;\n  /**\n   * Value units displayed\n   */\n  unit?: string;\n  /**\n   * Defines error\n   */\n  error?: ChipError;\n  /**\n   * Defines max length of input in entry part\n   */\n  entryMaxLength?: number;\n}\n\nexport const LumaChip = ({\n  children,\n  variant = 'primary',\n  state = StateEnum.locked,\n  disabled = false,\n  sizeVariant = 'regular',\n  entry = false,\n  iconCode,\n  onRemove,\n  onChange,\n  onBlur,\n  value,\n  unit = '%',\n  error = { hasError: false },\n  entryMaxLength = 3,\n}: ChipProps) => {\n  const [inputValue, setInputValue] = useState('');\n  useEffect(() => {\n    setInputValue(value?.toString() ?? '');\n  }, [value]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const inputPatternRegex = /^[0-9\\b]+$/;\n    if (inputValue === '' || inputPatternRegex.test(inputValue)) {\n      setInputValue(inputValue);\n      if (onChange) {\n        onChange(e);\n      }\n    }\n  };\n\n  const calculateInputWidth = (inputValue: string) => {\n    const inputLength = inputValue.length;\n    return `${inputLength !== 0 ? inputLength + 1 : 2}ch`;\n  };\n\n  return (\n    <ChipContainer error={error}>\n      <Chip sizeVariant={sizeVariant}>\n        <LabelPart sizeVariant={sizeVariant} variant={variant} entry={entry}>\n          {state === StateEnum.removable && (\n            <RemoveIcon onClick={onRemove} data-testid=\"chip-remove\">\n              <LumaIcon iconCode=\"times\" />\n            </RemoveIcon>\n          )}\n\n          {children}\n\n          {iconCode && (\n            <Icon>\n              <LumaIcon iconCode={iconCode} />\n            </Icon>\n          )}\n        </LabelPart>\n\n        {entry && (\n          <EntryPart\n            sizeVariant={sizeVariant}\n            error={error}\n            variant={variant}\n            disabled={disabled}\n            state={state}\n          >\n            <Input\n              type=\"text\"\n              maxLength={entryMaxLength}\n              sizeVariant={sizeVariant}\n              value={inputValue}\n              error={error}\n              onChange={handleChange}\n              onBlur={onBlur}\n              style={{\n                width: calculateInputWidth(inputValue),\n              }}\n              disabled={disabled || state === StateEnum.locked}\n              data-testid=\"chip-entry\"\n            />\n            <Unit sizeVariant={sizeVariant}>\n              {inputValue.toString().length > 0 && unit}\n            </Unit>\n          </EntryPart>\n        )}\n      </Chip>\n      {error?.hasError && error?.errorMessage && (\n        <ErrorMessage>{error.errorMessage}</ErrorMessage>\n      )}\n    </ChipContainer>\n  );\n};\n","import { useNavigate } from 'react-router-dom';\n\nimport {\n  useAppDispatch,\n  useAppSelector,\n  logout,\n  logoutOnAllTabs,\n  selectAuth,\n  lumaPermissionsArray,\n  useUiPermissionsQuery,\n  useGetUserTrainingStatusUsingGetQuery,\n  useGetWhitelabelInfoUsingGetQuery,\n  useCrossSiteCstQuery,\n  WidgetPermissions,\n  useGetPricingToolTypeUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport { getLumaAppLogin, isLocal, isProd } from '@luma-fe-workspace/utility';\nimport {\n  buildNavTabs,\n  FrontEndLibraries,\n  GlobalNav,\n  NavTabType,\n  ProductTypesType,\n} from '@luma-fe-workspace/design-system';\nimport { Dispatch, SetStateAction } from 'react';\n\ntype LumaGlobalNavProps = {\n  setShowTrainingModal: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const LumaGlobalNav = ({ setShowTrainingModal }: LumaGlobalNavProps) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const { data: userPermissionsData, isLoading: isLoadingUserPermissions } =\n    useUiPermissionsQuery({\n      permissions: lumaPermissionsArray,\n    });\n\n  const userPermissions: WidgetPermissions[] = userPermissionsData || [];\n\n  const { data: userTrainingData, isLoading: isLoadingTrainingStatus } =\n    useGetUserTrainingStatusUsingGetQuery();\n\n  const userTrainingDataProductTypes: ProductTypesType =\n    userTrainingData?.productTypes || [];\n\n  const { data: pricingToolTypeData } = useGetPricingToolTypeUsingGetQuery();\n  const pricingToolType = pricingToolTypeData;\n\n  const userInfo = useAppSelector(selectAuth);\n  const tabs = buildNavTabs(\n    userPermissions,\n    userTrainingDataProductTypes,\n    pricingToolType,\n    FrontEndLibraries.REACT,\n    isProd,\n    userInfo.company\n  );\n  const { data: whiteLabelInfo } = useGetWhitelabelInfoUsingGetQuery();\n  const { data: cstToken } = useCrossSiteCstQuery();\n  const accountAriaLabel = 'profile button';\n  const menuAriaLabel = 'mobile menu';\n\n  const handleNavigate = (tab: NavTabType): boolean | void => {\n    const { route, url } = tab;\n    if (tab.title === 'Structured Products') {\n      if (userTrainingData?.cdTraining !== 'Completed') {\n        setShowTrainingModal(true);\n        return true;\n      }\n    }\n    if (url) {\n      if (\n        (url.includes('portal.lumafintech.com') ||\n          url.includes('portal.naviancapital.com')) &&\n        cstToken\n      ) {\n        window.location.href = `${url}cst=${cstToken}`;\n      } else {\n        window.location.href = url;\n      }\n    } else if (route) {\n      navigate(route);\n      return;\n    }\n  };\n\n  const userName = userInfo.fullName ? userInfo.fullName : '';\n\n  const handleLogout = () => {\n    dispatch(logout()).then(() => {\n      logoutOnAllTabs();\n      if (isLocal) {\n        navigate('/');\n      } else {\n        window.location.href = getLumaAppLogin();\n      }\n    });\n  };\n  if (isLoadingUserPermissions || isLoadingTrainingStatus) {\n    return <p>...isLoading</p>;\n  }\n\n  return (\n    <GlobalNav\n      tabs={tabs}\n      accountAriaLabel={accountAriaLabel}\n      menuAriaLabel={menuAriaLabel}\n      handleNavigate={handleNavigate}\n      userName={userName}\n      logout={handleLogout}\n      issuerLogo={whiteLabelInfo ? whiteLabelInfo.companyUri : ''}\n    />\n  );\n};\n","import { useMemo } from 'react';\nimport { getLumaAppLogin } from '@luma-fe-workspace/utility';\n\ntype Props = {\n  isLoggedIn: string | null;\n};\n\nexport const LumaAppRedirect = ({ isLoggedIn }: Props) => {\n  useMemo(() => {\n    console.log('isLoggedIn ', isLoggedIn);\n    if (isLoggedIn) {\n      window.location.href = `${window.origin}/dashboard`;\n      return;\n    }\n    window.location.href = getLumaAppLogin();\n  }, [isLoggedIn]);\n  return null;\n};\n","import { getLumaAppLogin, isLocal } from '@luma-fe-workspace/utility';\n\nconst LOGOUT_TRIGGERED = 'logout_triggered';\nconst YES = 'yes';\nconst NO = 'no';\n\nexport const syncLogout = (event: StorageEvent): void => {\n  const logoutPath = isLocal ? `${window.location.origin}/` : getLumaAppLogin();\n  if (event.key === LOGOUT_TRIGGERED && event.newValue === YES) {\n    if (window.location !== window.parent.location) {\n      // If an iframe: reload parent\n      window.parent.location.href = logoutPath;\n    } else {\n      window.location.href = logoutPath;\n    }\n  }\n};\n\nexport const logoutOnAllTabs = () => {\n  localStorage.setItem(LOGOUT_TRIGGERED, YES); // logout across tabs\n  localStorage.setItem(LOGOUT_TRIGGERED, NO);\n};\n","export * from './lib/formatters/date-formatter/date.formatter';\nexport * from './lib/helper/date-helper/date.helper';\nexport * from './lib/helper/environment/env.helper';\nexport * from './lib/helper/app-login/get-luma-app.login';\n","/* eslint no-restricted-imports: \"off\" */\nimport { format } from 'date-fns';\n\nexport class DateFormatter {\n  /**\n   * Returns the date in YYYY-MM-DD(2022-01-01) format.\n   *\n   * @param {Date}  date - the Date object you want formatted\n   * @param {String} formatStr - the string in which you want the date to represent\n   * @returns {string} a string of the formatted date object\n   *\n   */\n  static formatLocalDate = (date: Date, formatStr = 'yyyy-MM-dd') =>\n    format(date, formatStr);\n\n  static formatDateForEventConfirmations = (date: Date) => {\n    const dates = format(date, `MMM/dd/yyyy`);\n    const splitDate = dates.split('/');\n    return `${splitDate[0].toUpperCase()}/${splitDate[1]}/${splitDate[2]}`;\n  };\n}\n","type EnvOptions = 'dev' | 'qa' | 'uat' | 'staging' | 'prod';\ntype EnvToSubdomain = { [key in EnvOptions]: string };\nconst ENVIRONMENT_TO_SUBDOMAIN: EnvToSubdomain = {\n  dev: 'bdev.',\n  qa: 'bqa.',\n  uat: 'buat.',\n  staging: 'staging.',\n  prod: '',\n};\nconst isEnvironment = (env: EnvOptions): boolean =>\n  new RegExp(\n    `https://(app|(go(-(an|ch|dn|lm|sp))?)).${ENVIRONMENT_TO_SUBDOMAIN[env]}lumafintech.com`\n  ).test(window.origin);\nconst isProduction = () => isEnvironment('prod');\nconst isStaging = () => isEnvironment('staging');\nconst isUAT = () => isEnvironment('uat');\n\nconst isHigherEnvironment = () => isProduction() || isStaging() || isUAT();\n\nexport const getLumaAppLogin = () =>\n  isHigherEnvironment()\n    ? `${window.location.origin.replace('go.', 'app.')}/login`\n    : `${getAngularLink()}/login`;\n\nexport const getAngularLink = (url?: string): string => {\n  const formattedUrl = url ?? window.origin;\n  return formattedUrl.replace(\n    /go(?:-(an|ch|dn|lm|sp))?(?=\\.)/g,\n    (match, teamSubdomain) => (teamSubdomain != null ? teamSubdomain : 'app')\n  );\n};\n","/* eslint no-restricted-imports: \"off\" */\nimport {\n  addMilliseconds,\n  addMinutes,\n  addDays,\n  addWeeks,\n  addMonths,\n  isBefore,\n  endOfMonth,\n  differenceInMilliseconds,\n  subMinutes,\n} from 'date-fns';\nimport { toDate } from 'date-fns-tz';\n\nexport class DateHelper {\n  /**\n   * Returns the date N minutes in the future.\n   *\n   * @param {Date} date - the Date object you want to edit\n   * @param {number} amount - how many minutes to be added\n   * @returns {Date} a Date object 7 minutes in the future\n   *\n   */\n  static addMinutes = (date: Date, amount: number): Date =>\n    addMinutes(date, amount);\n\n  /**\n   * Returns the date N days in the future.\n   *\n   * @param {Date} date - the Date object you want to edit\n   * @param {number} amount - how many days to be added\n   * @returns {Date} a Date object 7 days in the future\n   *\n   */\n  static addDays = (date: Date, amount: number): Date => addDays(date, amount);\n\n  /**\n   * Returns the date 7 days in the future.\n   *\n   * @param {Date} date - the Date object you want to edit\n   * @returns {Date} a Date object 7 days in the future\n   *\n   */\n  static addWeek = (date: Date): Date => addDays(date, 7);\n\n  /**\n   * Returns the date N weeks in the future.\n   *\n   * @param {Date} date - the Date object you want to edit\n   * @param {number} amount - how many weeks to be added\n   * @returns {Date} a Date object N days in the future\n   *\n   */\n  static addWeeks = (date: Date, amount: number): Date =>\n    addWeeks(date, amount);\n\n  /**\n   * Returns the date converted to UTC\n   *\n   * @param {Date} date - takes in a date/string/number, which gets converted to timezone: UTC\n   * @returns {Date} a Date object converted to UTC\n   *\n   */\n  static convertToUTC = (date: Date | string | number): Date =>\n    toDate(date, { timeZone: 'UTC' });\n\n  /**\n   * Returns true if dateA is before dateB\n   *\n   * @param {Date} dateA\n   * @param {Date} dateB\n   * @returns {Boolean}\n   */\n  static isDateBefore = (dateA: Date | number, dateB: Date | number): boolean =>\n    isBefore(dateA, dateB);\n\n  static addMilliseconds = (date: Date | number, amount: number): Date =>\n    addMilliseconds(date, amount);\n\n  static differenceInMilliseconds = (\n    firstDate: Date,\n    secondDate: Date\n  ): number => differenceInMilliseconds(firstDate, secondDate);\n\n  static addMonths = (date: Date | number, amount: number) =>\n    addMonths(date, amount);\n\n  static endOfMonth = (date: Date | number) => endOfMonth(date);\n\n  static subtractMinutes = (date: Date | number, amount: number): Date =>\n    subMinutes(date, amount);\n\n  /**\n   * Returns true if the date is less than or equal to 30 days old\n   *\n   * @param {Date} date\n   * @returns {Boolean}\n   */\n  static underThirtyDaysOld = (date: Date): boolean => {\n    const thirtyDaysInMilliseconds = 2592000000;\n    const todayTimeInMilliseconds = new Date().getTime();\n\n    return todayTimeInMilliseconds - date.getTime() <= thirtyDaysInMilliseconds;\n  };\n}\n\n// export const DateHelper = {\n//   Add: {\n//     Week: DateHelper.addWeek,\n//   },\n// };\n//\n// export namespace DateTest {\n//   export class Add {\n//     static Months = () => 1;\n//   }\n// }\n"],"names":[],"sourceRoot":""}