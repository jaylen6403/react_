{"version":3,"file":"main.a67be1c008449f001ae3.hot-update.js","mappings":"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","sources":["webpack://luma-fe-workspace/./libs/design-system/src/lib/components/Icon/Icon.tsx","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/ColumnChart/ColumnChartCard.tsx","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/EventsPage/EventsPage.styles.ts","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/EventsPage/EventsPage.tsx","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/InfoWidget/InfoWidget.styles.ts","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/InfoWidget/InfoWidget.tsx","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/PayoutSummary/PayoutSummary.tsx","webpack://luma-fe-workspace/./libs/luma/lifecyclemanager/src/components/PieChart/PieChartCard.tsx"],"sourcesContent":["import type { CSSProperties } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\nimport { findIconDefinition, icon } from '@fortawesome/fontawesome-svg-core';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\n/**\n * In order to reduce bundle size, each icon needed must be specified and imported\n * below, for each of the relevant font-awesome prefixes (light, regular, strong)\n */\nimport {\n  faAngleDown,\n  faAngleLeft,\n  faAngleDoubleLeft,\n  faAngleRight,\n  faAngleDoubleRight,\n  faAngleUp,\n  faBars,\n  faCheck,\n  faCheckCircle,\n  faCheckSquare,\n  faChevronDoubleRight,\n  faChevronDown,\n  faChevronLeft,\n  faChevronRight,\n  faChevronUp,\n  faEnvelope,\n  faExclamationCircle,\n  faFileAlt,\n  faFilePdf,\n  faFileSpreadsheet,\n  faHouse,\n  faInfoCircle,\n  faPhoneAlt,\n  faPlus,\n  faQuestionCircle,\n  faRetweet,\n  faRetweetAlt,\n  faSearch,\n  faSquare,\n  faStopwatch,\n  faTimes,\n  faTimesCircle,\n  faUser,\n  faUserFriends,\n  faUserPlus,\n  faUsers,\n  faScaleBalanced,\n  faMoneyCheckEditAlt,\n  faCalendar,\n  faStar,\n  faClock,\n} from '@fortawesome/pro-light-svg-icons';\nimport {\n  faAngleDown as farAngleDown,\n  faAngleUp as farAngleUp,\n  faBars as farBars,\n  faCalendarPlus as farCalendarPlus,\n  faCalendar as farCalendar,\n  faCheckCircle as farCheckCircle,\n  faPlus as farPlus,\n  faTimes as farTimes,\n  faSearch as farSearch,\n  faSpinner as farSpinner,\n  faExclamationCircle as farExclamationCircle,\n  faFilePdf as farFilePdf,\n  faFileArrowUp as farFileArrowUp,\n  faHouse as farHouse,\n  faFileExcel as farFileExcel,\n  faSquareCheck as farSquareCheck,\n  faUserFriends as farUserFriends,\n  faFilter as farFilter,\n  faUserClock as farUserClock,\n  faArrowsRotate as farArrowsRotate,\n  faEnvelope as farEnvelope,\n  faFileLines as farFileLines,\n  faCheck as farCheck,\n  faFileArrowDown,\n} from '@fortawesome/pro-regular-svg-icons';\nimport {\n  faExclamation as fasExclamation,\n  faFile as fasFile,\n  faRetweet as fasRetweet,\n  faStar as fasStar,\n  faUser as fasUser,\n  faXmark as fasXmark,\n  faUserClock as fasUserClock,\n  faFileArrowDown as fasFileArrowDown,\n  faCheck as fasCheck,\n  faFileInvoiceDollar as fasFileInvoiceDollar,\n  faLayerGroup as fasLayerGroup,\n  faCalendar as fasCalendar,\n  faCalendarAlt as fasCalendarAlt,\n  faMoneyCheckEditAlt as fasMoneyCheckEditAlt,\n  faLayerGroup as fasLayerGroupMinus,\n  faScaleBalanced as fasScaleBalanced,\n  faRefresh as fasRefresh,\n  faCheckCircle as fasCheckCircle,\n  faExclamationCircle as fasExclamationCircle,\n  faArrowRightLong as fasArrowRightLong,\n  faArrowLeftLong as fasArrowLeftLong,\n  faChevronUp as fasChevronUp,\n} from '@fortawesome/pro-solid-svg-icons';\n\nexport type IconCode = IconName;\n\nexport interface IconProps {\n  /**\n   * Class name for the top level svg element.\n   */\n  className?: string;\n  /**\n   * Icon code corresponding to an SVG.\n   */\n  iconCode: IconCode;\n  /**\n   * Rotate icon in degrees.\n   */\n  rotate?: number;\n  /**\n   * CSS properties.\n   */\n  style?: CSSProperties;\n  /**\n   * prefix for icons, fal = light, far = regular, fas = strong\n   */\n  prefix?: 'fal' | 'fas' | 'far';\n}\n\n//there is an open issue in the pro-regualr-svg-icons library that is causing a type issue, this is a fix until issue if addressed\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n// (library.add as any)(fal, far, fas);\nlibrary.add(\n  farSpinner,\n  fasXmark,\n  faAngleDown,\n  farAngleDown,\n  faAngleLeft,\n  faAngleDoubleLeft,\n  faAngleRight,\n  faAngleDoubleRight,\n  faAngleUp,\n  farAngleUp,\n  faBars,\n  farBars,\n  faCalendar,\n  farCalendarPlus,\n  faCheck,\n  farCheck,\n  fasCheck,\n  faCheckCircle,\n  faCheckSquare,\n  faChevronDoubleRight,\n  faChevronDown,\n  faChevronLeft,\n  faChevronRight,\n  faChevronUp,\n  fasChevronUp,\n  faClock,\n  faEnvelope,\n  fasExclamation,\n  faExclamationCircle,\n  farExclamationCircle,\n  faFileAlt,\n  fasFileInvoiceDollar,\n  fasLayerGroup,\n  fasCalendar,\n  fasCalendarAlt,\n  fasMoneyCheckEditAlt,\n  fasLayerGroupMinus,\n  fasScaleBalanced,\n  faFilePdf,\n  farFilePdf,\n  farFileArrowUp,\n  faFileSpreadsheet,\n  farFileExcel,\n  faHouse,\n  farHouse,\n  faInfoCircle,\n  faMoneyCheckEditAlt,\n  faPhoneAlt,\n  faPlus,\n  farPlus,\n  faQuestionCircle,\n  faRetweet,\n  faRetweetAlt,\n  faScaleBalanced,\n  faSearch,\n  farSearch,\n  faSquare,\n  farSquareCheck,\n  faStar,\n  faStopwatch,\n  faTimes,\n  farTimes,\n  faTimesCircle,\n  faUser,\n  fasUser,\n  faUserFriends,\n  farUserFriends,\n  faUserPlus,\n  farFilter,\n  farAngleDown,\n  farAngleUp,\n  farBars,\n  farCalendarPlus,\n  farCalendar,\n  farCheckCircle,\n  fasCheckCircle,\n  farPlus,\n  farSpinner,\n  farTimes,\n  fasFileArrowDown,\n  fasExclamation,\n  fasExclamationCircle,\n  fasFile,\n  fasRetweet,\n  fasStar,\n  fasUser,\n  faUsers,\n  faScaleBalanced,\n  faMoneyCheckEditAlt,\n  faCalendar,\n  farSearch,\n  farExclamationCircle,\n  fasXmark,\n  farUserClock,\n  fasUserClock,\n  farArrowsRotate,\n  farEnvelope,\n  fasFileArrowDown,\n  farFileLines,\n\n  fasRefresh,\n  faFileArrowDown,\n  fasArrowRightLong,\n  fasArrowLeftLong\n);\n\nexport const Icon = ({\n  className,\n  iconCode,\n  style,\n  rotate,\n  prefix = 'fal',\n}: IconProps) => {\n  const image = findIconDefinition({\n    prefix: prefix,\n    iconName: iconCode,\n  });\n  return image ? (\n    <FontAwesomeIcon\n      className={className}\n      icon={icon(image)}\n      style={style}\n      transform={rotate ? { rotate } : undefined}\n    />\n  ) : null;\n};\n","import {\n  DISPLAY_EVENT_TYPE,\n  selectLifecycleEventRequestObject,\n  useAppSelector,\n  useGetPayoutHorizonUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport { SeriesColumnOptions } from 'highcharts';\nimport { InfoWidget } from '../InfoWidget/InfoWidget';\nimport { ColumnChart } from './ColumnChart';\nimport { Spinner } from '@luma-fe-workspace/design-system';\nimport { CustomLumaStatus } from '../CustomLumaStatus/CustomLumaStatus.styles';\nimport { ColumnChartWrapper } from './ColumnChartCard.styles';\nimport { DateHelper } from '@luma-fe-workspace/utility';\nexport interface ColumnChartCardProps {\n  title: string;\n  styles?: string;\n  highchartOptions?: Highcharts.Options;\n  isCollapsed: boolean;\n  setIsCollapsed: (isCollapsed: boolean) => void;\n}\n\nexport const ColumnChartCard = ({\n  title,\n  styles,\n  highchartOptions,\n  isCollapsed,\n  setIsCollapsed,\n}: ColumnChartCardProps) => {\n  const mockedConvertedData: {\n    /**\n     * Each of these is effectively a `[number, number][]` where the first value is\n     * the offset from the first value and the second is the value. For datetimes,\n     * Highcharts prefers milliseconds. See the related property `relativeXValue`\n     */\n    [key in DISPLAY_EVENT_TYPE]: SeriesColumnOptions['data'][];\n  } = {\n    Maturing: [],\n    'Call Opportunity': [],\n    'Coupon Opportunity': [],\n  };\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const cutoffDateNum: number = Date.parse(\n    eventRequestObject.dateRange.endDate\n  );\n  const cutoffDate: Date = isNaN(cutoffDateNum)\n    ? new Date(\n        DateHelper.endOfMonth(DateHelper.addMonths(new Date(), 18)).setHours(\n          23,\n          59,\n          0,\n          0\n        )\n      ) // Default to 18 months from today\n    : new Date(cutoffDateNum);\n\n  const response = useGetPayoutHorizonUsingGetQuery(eventRequestObject);\n  const { data: payoutHorizonDetails = [] } = response;\n\n  payoutHorizonDetails.forEach((day) => {\n    const dayAsDate = new Date(day.date);\n    if (dayAsDate > cutoffDate) return;\n    day.events.forEach((event) => {\n      const displayEventType = DISPLAY_EVENT_TYPE[event.eventType];\n      mockedConvertedData[displayEventType]?.push([\n        dayAsDate.getTime(),\n        event.value,\n      ]);\n    });\n  });\n  const columnChartData = [\n    ...Object.keys(mockedConvertedData).map((eventType) => {\n      return {\n        name: eventType,\n        data: mockedConvertedData[eventType as DISPLAY_EVENT_TYPE],\n      };\n    }),\n  ];\n\n  const columnChart = (\n    <ColumnChart data={columnChartData} highchartOptions={highchartOptions} />\n  );\n\n  const widgetView = response.isFetching ? (\n    <Spinner />\n  ) : response.isError ? (\n    <CustomLumaStatus\n      variant={'failed'}\n      ariaLabel={'Failed Message'}\n      titleMessage={'Request Failed'}\n      helperMessage={'Something went wrong!'}\n    />\n  ) : (\n    <ColumnChartWrapper>{columnChart}</ColumnChartWrapper>\n  );\n\n  return (\n    <InfoWidget\n      title={title}\n      content={widgetView}\n      styles={styles}\n      isCollapsed={isCollapsed}\n      setIsCollapsed={setIsCollapsed}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const EventContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const EventMetrics = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const EventTableContainer = styled.div`\n  height: 100%;\n  margin-bottom: 1.5rem;\n`;\n","import {\n  LifecycleEventLM,\n  selectLifecycleEventDisplayCurrency,\n  useAppSelector,\n  useGetFiltersUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport { useState } from 'react';\nimport { AccountsByRepDrawer } from '../AccountsByRepDrawer/AccountsByRepDrawer';\nimport { ColumnChartCard } from '../ColumnChart/ColumnChartCard';\nimport { EventTable } from '../EventTable/EventTable';\nimport { PayoutSummary } from '../PayoutSummary/PayoutSummary';\nimport { PieChartCard } from '../PieChart/PieChartCard';\nimport {\n  EventContainer,\n  EventMetrics,\n  EventTableContainer,\n} from './EventsPage.styles';\nimport { GridApi } from 'ag-grid-community';\n\ninterface EventsPageProps {\n  currentGridApi: GridApi | undefined;\n  setCurrentGridApi: (gridApi: GridApi) => void;\n}\n\nexport const EventsPage = ({\n  currentGridApi,\n  setCurrentGridApi,\n}: EventsPageProps) => {\n  const [selectedEvent, setSelectedEvent] = useState<LifecycleEventLM>();\n  const [infoWidgetsCollapsed, setInfoWidgetCollapsed] =\n    useState<boolean>(false);\n  useGetFiltersUsingGetQuery({\n    displayCurrency: useAppSelector(selectLifecycleEventDisplayCurrency),\n  });\n\n  return (\n    <EventContainer>\n      <AccountsByRepDrawer\n        selectedEvent={selectedEvent}\n        setSelectedEvent={setSelectedEvent}\n      />\n      <EventMetrics>\n        <PayoutSummary\n          title={' Payout Summary'}\n          styles={'width: 20%;'}\n          isCollapsed={infoWidgetsCollapsed}\n          setIsCollapsed={setInfoWidgetCollapsed}\n        />\n        <ColumnChartCard\n          title={'Event Forecast'}\n          styles={'width: 48%;'}\n          isCollapsed={infoWidgetsCollapsed}\n          setIsCollapsed={setInfoWidgetCollapsed}\n        />\n        <PieChartCard\n          title={'Exposure Allocation'}\n          styles={'width: 30%;'}\n          isCollapsed={infoWidgetsCollapsed}\n          setIsCollapsed={setInfoWidgetCollapsed}\n        />\n      </EventMetrics>\n      <EventTableContainer>\n        <EventTable\n          setSelectedEvent={setSelectedEvent}\n          currentGridApi={currentGridApi}\n          setCurrentGridApi={setCurrentGridApi}\n        />\n      </EventTableContainer>\n    </EventContainer>\n  );\n};\n","import {\n  LumaColor,\n  breakpoints,\n  colors,\n  spacing,\n  LumaIcon,\n} from '@luma-fe-workspace/design-system';\nimport styled from 'styled-components';\n\nexport const InfoWidgetWrapper = styled.div<{\n  isCollapsed: boolean;\n  styles?: string;\n}>`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  border: 0.0625rem solid ${LumaColor.NEUTRAL_40};\n  border-radius: 0.5rem;\n  overflow: hidden;\n  background-color: ${colors.white};\n  height: ${(props) => (props.isCollapsed ? '3.25rem' : '22.5rem')};\n  -webkit-transition: all 0.4s ease-in-out;\n  transition: all 0.4s ease-in-out;\n\n  @media ${breakpoints.tablet} {\n    width: 100%;\n  }\n  ${(props) => props.styles}\n`;\n\nexport const InfoHeader = styled.div<{ collapsible: boolean }>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  cursor: ${(props) => (props.collapsible ? 'pointer' : 'default')};\n`;\n\nexport const CollapseIcon = styled(LumaIcon)<{ isCollapsed: boolean }>`\n  width: 1.125rem;\n  height 1.25rem;\n  padding: 1rem;\n  transform: ${(props) =>\n    props.isCollapsed ? 'rotate(-180deg)' : 'rotate(0deg)'};\n  -webkit-transition: all 0.4s ease-in-out;\n  transition: all 0.4s ease-in-out;\n`;\n\nexport const InfoWidgetTitle = styled.div`\n  color: ${LumaColor.NEUTRAL_80};\n  padding: 1rem 1rem 0.5rem 1rem;\n  font-family: 'IBM Plex Sans', sans-serif;\n  font-size: 1rem;\n  font-style: normal;\n  font-weight: 500;\n  margin-bottom: ${spacing.xs};\n`;\n\nexport const InfoWidgetContent = styled.div`\n  overflow: hidden;\n`;\n","import { useState } from 'react';\nimport {\n  CollapseIcon,\n  InfoHeader,\n  InfoWidgetContent,\n  InfoWidgetTitle,\n  InfoWidgetWrapper,\n} from './InfoWidget.styles';\n\ntype InfoWidgetProps = {\n  title: string;\n  content?: React.ReactNode;\n  styles?: string;\n  collapsible?: boolean;\n  isCollapsed: boolean;\n  setIsCollapsed: (isCollapsed: boolean) => void;\n};\n\nexport const InfoWidget = ({\n  title,\n  content,\n  styles,\n  collapsible = true,\n  isCollapsed,\n  setIsCollapsed,\n}: InfoWidgetProps) => {\n  return (\n    <InfoWidgetWrapper isCollapsed={isCollapsed} styles={styles}>\n      <InfoHeader\n        collapsible={collapsible}\n        onClick={() => setIsCollapsed(!isCollapsed)}\n      >\n        <InfoWidgetTitle>{title}</InfoWidgetTitle>\n        {collapsible && (\n          <CollapseIcon\n            iconCode=\"chevron-up\"\n            type=\"solid\"\n            isCollapsed={isCollapsed}\n          />\n        )}\n      </InfoHeader>\n      <InfoWidgetContent>{content}</InfoWidgetContent>\n    </InfoWidgetWrapper>\n  );\n};\n","import { InfoWidget } from '../InfoWidget/InfoWidget';\nimport { PercentageBarCard } from '../PercentageBar/PercentageBarCard';\nimport {\n  useAppSelector,\n  PayoutSummaryData,\n  useGetPayoutSummaryUsingPostQuery,\n  selectLifecycleEventRequestObject,\n} from '@luma-fe-workspace/redux';\n\nimport { Spinner } from '@luma-fe-workspace/design-system';\nimport { CustomLumaStatus } from '../CustomLumaStatus/CustomLumaStatus.styles';\n\nexport interface PayoutSummaryProps {\n  styles?: string;\n  title: string;\n  /**\n   * Optionally allow mock data to be passed in for storybook\n   */\n  mockPayoutSummaryData?: PayoutSummaryData;\n  isCollapsed: boolean;\n  setIsCollapsed: (isCollapsed: boolean) => void;\n}\n\nexport const PayoutSummary = ({\n  styles,\n  title,\n  mockPayoutSummaryData,\n  isCollapsed,\n  setIsCollapsed,\n}: PayoutSummaryProps) => {\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n\n  const response = useGetPayoutSummaryUsingPostQuery(eventRequestObject);\n  let { data: payoutSummaryData = [] } = response;\n  payoutSummaryData = mockPayoutSummaryData ?? payoutSummaryData;\n\n  const content = Object.entries(payoutSummaryData).map(\n    ([key, summaryData]) => {\n      return (\n        <PercentageBarCard\n          percentage={summaryData.percentage * 100}\n          key={key}\n          title={key.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => {\n            return str.toUpperCase();\n          })}\n          content={summaryData.amount}\n          // TODO: Respect currency from dropdown\n          currency={\n            key === 'notional' || key === 'totalPayoutAmount' ? 'USD' : ''\n          }\n        />\n      );\n    }\n  );\n\n  const widgetView = response.isFetching ? (\n    <Spinner />\n  ) : response.isError ? (\n    <CustomLumaStatus\n      variant={'failed'}\n      ariaLabel={'Failed Message'}\n      titleMessage={'Request Failed'}\n      helperMessage={'Something went wrong!'}\n    />\n  ) : (\n    content\n  );\n  return (\n    <InfoWidget\n      styles={styles}\n      title={title}\n      content={widgetView}\n      isCollapsed={isCollapsed}\n      setIsCollapsed={setIsCollapsed}\n    />\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { GridReadyEvent, GridApi, RowClassParams } from 'ag-grid-community';\n\nimport {\n  Spinner,\n  Card,\n  colors,\n  LumaToggleButton,\n  LumaSingleDropDown,\n  DataItemProps,\n} from '@luma-fe-workspace/design-system';\nimport {\n  GroupByValueOption,\n  PayoutBreakdownBreakdownType,\n  PayoutBreakdownData,\n  PayoutBreakdownGroup,\n  PayoutBreakdownWidgetData,\n  selectLifecycleEventDisplayCurrency,\n  selectLifecycleEventRequestObject,\n  useAppSelector,\n  useGetPayoutBreakdownUsingPostQuery,\n} from '@luma-fe-workspace/redux';\n\nimport { CustomLumaStatus } from '../CustomLumaStatus/CustomLumaStatus.styles';\nimport { InfoWidget } from '../InfoWidget/InfoWidget';\n\nimport {\n  PieChart,\n  PieChartData,\n  colorSpectrum,\n  NUM_PERCENT_DEC_PLACES,\n} from './PieChart';\nimport {\n  Chart,\n  Table,\n  TableWidget,\n  DropdownWrapper,\n  PieChartWrapper,\n  PieChartWidgetBody,\n  PieChartHeaderButtons,\n  PieChartWidgetWrapper,\n} from './PieChartCard.styles';\nimport {\n  createEventsFooterData,\n  defaultGridOptions,\n  dropdownItems,\n  formatEventsPieChartData,\n  formatEventsTableData,\n  formatGroupByItems,\n  getEventsColumnDefs,\n} from './PieChartHelpers';\n\nexport interface PieChartCardProps {\n  title: string;\n  styles?: string;\n  percentageDecimalPlaces?: number;\n  /**\n   * Optionally allow mock data to be passed in for storybook\n   */\n  mockPayoutBreakdownData?: PayoutBreakdownData;\n  isCollapsed: boolean;\n  setIsCollapsed: (isCollapsed: boolean) => void;\n}\n\nexport const PieChartCard = ({\n  title,\n  styles,\n  percentageDecimalPlaces: numPercentageDecimalPlaces,\n  mockPayoutBreakdownData,\n  isCollapsed,\n  setIsCollapsed,\n}: PieChartCardProps) => {\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const [gridApi, setGridApi] = useState<GridApi>();\n  const [pieChartData, setPieChartData] = useState<PieChartData[]>([]);\n  const displayCurrency = useAppSelector(selectLifecycleEventDisplayCurrency);\n\n  const [payoutBreakdownWidgetData, setPayoutBreakdownWidgetData] =\n    useState<PayoutBreakdownWidgetData>({\n      groupingData: {\n        groupByValue: 'ISSUER',\n        groups: [],\n      },\n      breakdownType: 'AMOUNTS',\n    });\n  const eventsColumnDefs = getEventsColumnDefs(\n    payoutBreakdownWidgetData,\n    displayCurrency\n  );\n\n  const response = useGetPayoutBreakdownUsingPostQuery({\n    groupByName: payoutBreakdownWidgetData.groupingData.groupByValue,\n    breakdownType: payoutBreakdownWidgetData.breakdownType,\n    ...eventRequestObject,\n  });\n\n  useEffect(() => {\n    if (response.isSuccess && !response.isFetching) {\n      setPayoutBreakdownWidgetData({\n        ...payoutBreakdownWidgetData,\n        groupingData: response.data,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [response]);\n\n  const payoutBreakdownData: PayoutBreakdownData =\n    mockPayoutBreakdownData ?? payoutBreakdownWidgetData.groupingData;\n\n  useEffect(() => {\n    // Reset Table Data when main payoutBreakDownData changes\n    const eventsTableData: PayoutBreakdownGroup[] =\n      formatEventsTableData(payoutBreakdownData);\n    const breakdownSum = eventsTableData.reduce(\n      (previousValue, currentValue) => {\n        return previousValue + currentValue.breakdownValue ?? previousValue;\n      },\n      0\n    );\n    gridApi?.setRowData(\n      eventsTableData.map((dataElement: PayoutBreakdownGroup) => {\n        return {\n          ...dataElement,\n          percentage: (\n            (dataElement.breakdownValue ?? 0) / breakdownSum\n          ).toFixed(numPercentageDecimalPlaces),\n        };\n      })\n    );\n    const newColumnDefs = getEventsColumnDefs(\n      payoutBreakdownWidgetData,\n      displayCurrency\n    );\n    gridApi?.setColumnDefs(newColumnDefs);\n    // Reset Pie Chart Data when main payoutBreakDownData changes\n    setPieChartData(formatEventsPieChartData(payoutBreakdownData));\n  }, [\n    displayCurrency,\n    gridApi,\n    numPercentageDecimalPlaces,\n    payoutBreakdownData,\n    payoutBreakdownWidgetData,\n  ]);\n\n  numPercentageDecimalPlaces =\n    numPercentageDecimalPlaces ?? NUM_PERCENT_DEC_PLACES;\n\n  const selectGroupBy = (groupByValue?: DataItemProps | null) => {\n    if (\n      groupByValue?.value ===\n      payoutBreakdownWidgetData.groupingData.groupByValue\n    )\n      return;\n    setPayoutBreakdownWidgetData({\n      ...payoutBreakdownWidgetData,\n      groupingData: {\n        ...payoutBreakdownWidgetData.groupingData,\n        groupByValue: (groupByValue?.value as GroupByValueOption) ?? 'ISSUER',\n      },\n    });\n  };\n\n  const adjustTableHeight = (): string => {\n    const tableHeights = new Map<number, string>([\n      [0, '9.375rem'],\n      [1, '7.938rem'],\n      [2, '10.313rem'],\n      [3, '12.69rem'],\n    ]);\n\n    let height = '12.69rem';\n    if (gridApi) {\n      const numRows = gridApi?.getRenderedNodes()?.length;\n      height = tableHeights.get(Math.min(3, numRows)) || '12.69rem';\n    }\n    return height;\n  };\n\n  const pieChartContent = (\n    <PieChartWidgetWrapper>\n      <PieChartHeaderButtons>\n        <DropdownWrapper>\n          <LumaSingleDropDown\n            id={'pieChartGroupByDropdown'}\n            fullWidth={true}\n            items={dropdownItems}\n            placeholder={'Group By:'}\n            name={'displayGroupBy'}\n            defaultSelectedItem={{\n              label: formatGroupByItems(\n                payoutBreakdownWidgetData.groupingData.groupByValue\n              ),\n              value: payoutBreakdownWidgetData.groupingData.groupByValue,\n            }}\n            onChange={(selectedItem) => {\n              dropdownItems.forEach((item) => {\n                item.iconCode = undefined;\n              });\n              if (selectedItem) {\n                selectedItem.iconCode = 'check';\n                selectGroupBy(selectedItem);\n              }\n            }}\n          />\n        </DropdownWrapper>\n\n        <LumaToggleButton\n          activeValue={payoutBreakdownWidgetData.breakdownType}\n          size={'toggle_small'}\n          // TODO - Decide whether to use the map in PieChartHelpers below\n          // Each string field paramName below if from the type PayoutBreakdownBreakdownType\n          fieldValues={[\n            { paramName: 'AMOUNTS', label: 'Amount' },\n            { paramName: 'EVENT', label: 'Events' },\n          ]} //TODO: Dynamically set paramName values to support pie-charts on all pages\n          onClick={(paramName: string) => {\n            setPayoutBreakdownWidgetData({\n              ...payoutBreakdownWidgetData,\n              breakdownType: paramName as PayoutBreakdownBreakdownType,\n            });\n          }}\n        />\n      </PieChartHeaderButtons>\n\n      <Card>\n        <PieChartWidgetBody>\n          <PieChartWrapper>\n            <Chart>\n              <PieChart\n                data={pieChartData}\n                numPercentageDecimalPlaces={numPercentageDecimalPlaces}\n                innerSize={'48%'}\n              />\n            </Chart>\n            <Table\n              style={{\n                height: adjustTableHeight(),\n              }}\n            >\n              <TableWidget\n                gridOptions={{\n                  ...defaultGridOptions,\n                  columnDefs: eventsColumnDefs,\n                  onFirstDataRendered: (e: GridReadyEvent) => {\n                    e.api.setPinnedBottomRowData(createEventsFooterData(e.api));\n                  },\n                  onGridReady: (params: GridReadyEvent) => {\n                    setGridApi(params.api);\n                  },\n                  getRowStyle: (params: RowClassParams) => {\n                    let style = {};\n                    if (params.node.rowPinned) {\n                      style = { color: colors.black };\n                    } else {\n                      style = {\n                        borderLeft: `0.375rem ${\n                          colorSpectrum[params.rowIndex % colorSpectrum.length]\n                        } solid`,\n                      };\n                    }\n                    return style;\n                  },\n                  suppressHorizontalScroll: true,\n                }}\n              />\n            </Table>\n          </PieChartWrapper>\n        </PieChartWidgetBody>\n      </Card>\n    </PieChartWidgetWrapper>\n  );\n\n  const widgetView = response.isFetching ? (\n    <Spinner />\n  ) : response.isError ? (\n    <CustomLumaStatus\n      variant={'failed'}\n      ariaLabel={'Failed Message'}\n      titleMessage={'Request Failed'}\n      helperMessage={'Something went wrong!'}\n    />\n  ) : (\n    pieChartContent\n  );\n\n  return (\n    <InfoWidget\n      title={title}\n      styles={styles}\n      content={widgetView}\n      isCollapsed={isCollapsed}\n      setIsCollapsed={setIsCollapsed}\n    />\n  );\n};\n"],"names":[],"sourceRoot":""}