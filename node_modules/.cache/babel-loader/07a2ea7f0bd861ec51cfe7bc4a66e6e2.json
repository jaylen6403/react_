{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/CashForm/CashForm.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.promise.js\";\nimport { useState, useEffect, useMemo } from 'react';\nimport { useFormik } from 'formik';\nimport { ButtonsComponent } from '../ButtonsComponent';\nimport { Statuses } from '../EventConfirmationModal';\nimport { validateButtonsCashForm } from '../../../utils/formValidators';\nimport { useUpdateEventProductDataUsingPutMutation } from '@luma-fe-workspace/redux';\nimport { getCashSettlementValues } from '../../../utils/modalUtils';\nimport { Input, LabelText, Form, InputWrapper, ContentWrapper, ButtonContainer } from './CashForm.style';\nimport { useCreateEventConfirmationListUsingGetQuery } from '@luma-fe-workspace/redux';\nimport { useEventConfirmationOptions, StatusOptions } from '../../../utils/hooks/useEventConfirmationOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CashForm = ({\n  eventType,\n  cashOnly\n}) => {\n  _s();\n\n  const {\n    opsModal,\n    toastData\n  } = useEventConfirmationOptions();\n  const [confirmationStatus, setConfirmationStatus] = useState(Statuses.NOT_SET);\n  const [buttonValidation, setButtonValidation] = useState({\n    allButtonsDisabled: true,\n    canReview: false,\n    canConfirm: false,\n    canNotConfirm: false\n  });\n  const [submitRates, {\n    status\n  }] = useUpdateEventProductDataUsingPutMutation();\n  const {\n    refetch: eventsRefetch\n  } = useCreateEventConfirmationListUsingGetQuery();\n  const initialValues = useMemo(() => {\n    var _opsModal$data$cashSe, _opsModal$data, _opsModal$data$cashSe2, _opsModal$data$cashSe3, _opsModal$data2, _opsModal$data2$cashS, _opsModal$data$cashSe4, _opsModal$data3, _opsModal$data3$cashS;\n\n    return {\n      Luma: (_opsModal$data$cashSe = (_opsModal$data = opsModal.data) == null ? void 0 : (_opsModal$data$cashSe2 = _opsModal$data.cashSettlementRates) == null ? void 0 : _opsModal$data$cashSe2.lumaRate) != null ? _opsModal$data$cashSe : '',\n      Issuer: (_opsModal$data$cashSe3 = (_opsModal$data2 = opsModal.data) == null ? void 0 : (_opsModal$data2$cashS = _opsModal$data2.cashSettlementRates) == null ? void 0 : _opsModal$data2$cashS.issuerRate) != null ? _opsModal$data$cashSe3 : '',\n      Confirmed: (_opsModal$data$cashSe4 = (_opsModal$data3 = opsModal.data) == null ? void 0 : (_opsModal$data3$cashS = _opsModal$data3.cashSettlementRates) == null ? void 0 : _opsModal$data3$cashS.rate) != null ? _opsModal$data$cashSe4 : ''\n    };\n  }, [opsModal]);\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: async formValues => {\n      const dataToSubmit = structuredClone(opsModal.data);\n      if (!dataToSubmit) return;\n      dataToSubmit.cashSettlementRates = getCashSettlementValues(formValues);\n      dataToSubmit.confirmationStatus = confirmationStatus;\n      dataToSubmit.settlementType = 'CASH';\n\n      if (formValues.Confirmed || formValues.Luma && formValues.Issuer && formValues.Luma === formValues.Issuer) {\n        if (!formValues.Confirmed) {\n          if (dataToSubmit != null && dataToSubmit.cashSettlementRates) {\n            dataToSubmit.cashSettlementRates.rate = Number(formValues.Luma);\n          }\n        }\n      }\n\n      await submitRates({\n        eventProductData: dataToSubmit\n      });\n      eventsRefetch();\n      opsModal.setOpen(false);\n      formik.resetForm();\n    }\n  });\n  useEffect(() => {\n    toastData.setOpen(true);\n\n    if (status === 'fulfilled') {\n      toastData.setStatus(StatusOptions.Success);\n    } else if (status === 'rejected') {\n      toastData.setStatus(StatusOptions.Failure);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [status]);\n  useEffect(() => {\n    if (!opsModal.isOpen) {\n      formik.resetForm({\n        values: initialValues\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [opsModal.data]);\n  useEffect(() => {\n    setButtonValidation(validateButtonsCashForm(formik.values));\n  }, [formik.values]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(ContentWrapper, {\n      cashOnly: cashOnly,\n      children: [/*#__PURE__*/_jsxDEV(InputWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(LabelText, {\n          htmlFor: \"Luma\",\n          children: \"Luma\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"Luma\",\n          name: \"Luma\",\n          type: \"number\",\n          onChange: formik.handleChange,\n          value: formik.values.Luma,\n          placeholder: \"Enter Percentage\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(LabelText, {\n          htmlFor: \"Issuer\",\n          children: \"Issuer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"Issuer\",\n          name: \"Issuer\",\n          type: \"number\",\n          onChange: formik.handleChange,\n          value: formik.values.Issuer,\n          placeholder: \"Enter Percentage\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(LabelText, {\n          htmlFor: \"Confirmed\",\n          children: \"Confirmed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"Confirmed\",\n          name: \"Confirmed\",\n          type: \"number\",\n          onChange: formik.handleChange,\n          value: formik.values.Confirmed,\n          placeholder: \"Enter Percentage\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      children: /*#__PURE__*/_jsxDEV(ButtonsComponent, {\n        setConfirmationStatus: setConfirmationStatus,\n        eventType: eventType,\n        buttonValidation: buttonValidation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CashForm, \"93FJx4GRvX8/7ZFFtRTWNK6qDhs=\", false, function () {\n  return [useEventConfirmationOptions, useUpdateEventProductDataUsingPutMutation, useCreateEventConfirmationListUsingGetQuery, useFormik];\n});\n\n_c = CashForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CashForm\");","map":{"version":3,"names":["useState","useEffect","useMemo","useFormik","ButtonsComponent","Statuses","validateButtonsCashForm","useUpdateEventProductDataUsingPutMutation","getCashSettlementValues","Input","LabelText","Form","InputWrapper","ContentWrapper","ButtonContainer","useCreateEventConfirmationListUsingGetQuery","useEventConfirmationOptions","StatusOptions","CashForm","eventType","cashOnly","opsModal","toastData","confirmationStatus","setConfirmationStatus","NOT_SET","buttonValidation","setButtonValidation","allButtonsDisabled","canReview","canConfirm","canNotConfirm","submitRates","status","refetch","eventsRefetch","initialValues","Luma","data","cashSettlementRates","lumaRate","Issuer","issuerRate","Confirmed","rate","formik","onSubmit","formValues","dataToSubmit","structuredClone","settlementType","Number","eventProductData","setOpen","resetForm","setStatus","Success","Failure","isOpen","values","handleSubmit","handleChange"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/CashForm/CashForm.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { useFormik } from 'formik';\n\nimport { ButtonsComponent } from '../ButtonsComponent';\nimport { Statuses } from '../EventConfirmationModal';\nimport {\n  FormButtonValidation,\n  validateButtonsCashForm,\n} from '../../../utils/formValidators';\nimport { useUpdateEventProductDataUsingPutMutation } from '@luma-fe-workspace/redux';\nimport { getCashSettlementValues } from '../../../utils/modalUtils';\n\nimport {\n  Input,\n  LabelText,\n  Form,\n  InputWrapper,\n  ContentWrapper,\n  ButtonContainer,\n} from './CashForm.style';\nimport {\n  EventProductData,\n  useCreateEventConfirmationListUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport {\n  useEventConfirmationOptions,\n  StatusOptions,\n} from '../../../utils/hooks/useEventConfirmationOptions';\nimport { EventTypesDisplay } from '../../../utils/gridUtils';\n\ninterface Props {\n  cashOnly: boolean;\n  eventType: EventTypesDisplay | '';\n}\n\nexport const CashForm = ({ eventType, cashOnly }: Props) => {\n  const { opsModal, toastData } = useEventConfirmationOptions();\n  const [confirmationStatus, setConfirmationStatus] = useState<Statuses>(\n    Statuses.NOT_SET\n  );\n  const [buttonValidation, setButtonValidation] =\n    useState<FormButtonValidation>({\n      allButtonsDisabled: true,\n      canReview: false,\n      canConfirm: false,\n      canNotConfirm: false,\n    });\n\n  const [submitRates, { status }] = useUpdateEventProductDataUsingPutMutation();\n  const { refetch: eventsRefetch } =\n    useCreateEventConfirmationListUsingGetQuery();\n\n  const initialValues = useMemo(\n    () => ({\n      Luma: opsModal.data?.cashSettlementRates?.lumaRate ?? '',\n      Issuer: opsModal.data?.cashSettlementRates?.issuerRate ?? '',\n      Confirmed: opsModal.data?.cashSettlementRates?.rate ?? '',\n    }),\n    [opsModal]\n  );\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: async (formValues) => {\n      const dataToSubmit: EventProductData | undefined = structuredClone(\n        opsModal.data\n      );\n      if (!dataToSubmit) return;\n      dataToSubmit.cashSettlementRates = getCashSettlementValues(formValues);\n      dataToSubmit.confirmationStatus = confirmationStatus;\n      dataToSubmit.settlementType = 'CASH';\n      if (\n        formValues.Confirmed ||\n        (formValues.Luma &&\n          formValues.Issuer &&\n          formValues.Luma === formValues.Issuer)\n      ) {\n        if (!formValues.Confirmed) {\n          if (dataToSubmit?.cashSettlementRates) {\n            dataToSubmit.cashSettlementRates.rate = Number(formValues.Luma);\n          }\n        }\n      }\n      await submitRates({ eventProductData: dataToSubmit });\n      eventsRefetch();\n      opsModal.setOpen(false);\n      formik.resetForm();\n    },\n  });\n\n  useEffect(() => {\n    toastData.setOpen(true);\n\n    if (status === 'fulfilled') {\n      toastData.setStatus(StatusOptions.Success);\n    } else if (status === 'rejected') {\n      toastData.setStatus(StatusOptions.Failure);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status]);\n\n  useEffect(() => {\n    if (!opsModal.isOpen) {\n      formik.resetForm({\n        values: initialValues,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [opsModal.data]);\n\n  useEffect(() => {\n    setButtonValidation(validateButtonsCashForm(formik.values));\n  }, [formik.values]);\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <ContentWrapper cashOnly={cashOnly}>\n        <InputWrapper>\n          <LabelText htmlFor=\"Luma\">Luma</LabelText>\n          <Input\n            id=\"Luma\"\n            name=\"Luma\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.Luma}\n            placeholder=\"Enter Percentage…\"\n          />\n        </InputWrapper>\n        <InputWrapper>\n          <LabelText htmlFor=\"Issuer\">Issuer</LabelText>\n          <Input\n            id=\"Issuer\"\n            name=\"Issuer\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.Issuer}\n            placeholder=\"Enter Percentage…\"\n          />\n        </InputWrapper>\n        <InputWrapper>\n          <LabelText htmlFor=\"Confirmed\">Confirmed</LabelText>\n          <Input\n            id=\"Confirmed\"\n            name=\"Confirmed\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.Confirmed}\n            placeholder=\"Enter Percentage…\"\n          />\n        </InputWrapper>\n      </ContentWrapper>\n      <ButtonContainer>\n        <ButtonsComponent\n          setConfirmationStatus={setConfirmationStatus}\n          eventType={eventType}\n          buttonValidation={buttonValidation}\n        />\n      </ButtonContainer>\n    </Form>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}