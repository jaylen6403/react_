{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/EventConfirmationModal.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { useEffect, useState } from 'react';\nimport { Modal } from '@luma-fe-workspace/design-system';\nimport { CashForm } from './CashForm/CashForm';\nimport { PhysicalForm } from './PhysicalForm/PhysicalForm';\nimport { IssuerLogo } from '../AGGridTable/AGGridTableComponents.style';\nimport { bofaLogo } from '../../utils/constants';\nimport { ModalContainer, ModalSubTitle, CloseButton, CloseIcon, TopElementsWrapper, ToggleButtons, ToggleWrapper } from './EventConfirmationModal.styles';\nimport { useEventConfirmationOptions } from '../../utils/hooks/useEventConfirmationOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ConfirmationTypes;\n\n(function (ConfirmationTypes) {\n  ConfirmationTypes[\"Maturity\"] = \"MATURITY\";\n  ConfirmationTypes[\"Auto Call\"] = \"AUTO_CALL\";\n  ConfirmationTypes[\"Issuer Call\"] = \"ISSUER_CALL\";\n  ConfirmationTypes[\"Coupon Payment\"] = \"COUPON_PAYMENT\";\n})(ConfirmationTypes || (ConfirmationTypes = {}));\n\nexport let Statuses;\n\n(function (Statuses) {\n  Statuses[\"CONFIRMED\"] = \"CONFIRMED\";\n  Statuses[\"REQUIRES_RESOLUTION\"] = \"REQUIRES_RESOLUTION\";\n  Statuses[\"NOT_CONFIRMED\"] = \"NOT_CONFIRMED\";\n  Statuses[\"NOT_SET\"] = \"\";\n})(Statuses || (Statuses = {}));\n\nexport const EventConfirmationModal = ({\n  modalOpen,\n  setModalOpen\n}) => {\n  _s();\n\n  var _opsModal$data, _opsModal$data2, _opsModal$data3, _opsModal$data5, _opsModal$data6;\n\n  const {\n    opsModal\n  } = useEventConfirmationOptions();\n  const [modalToggle, setModalToggle] = useState({\n    cash: true,\n    physical: false\n  });\n  const confirmationType = (_opsModal$data = opsModal.data) == null ? void 0 : _opsModal$data.confirmationType;\n  const cashOnly = ((_opsModal$data2 = opsModal.data) == null ? void 0 : _opsModal$data2.settlementType) === 'CASH' || ((_opsModal$data3 = opsModal.data) == null ? void 0 : _opsModal$data3.settlementType) === 'PHYSICAL' && confirmationType !== ConfirmationTypes.Maturity;\n  useEffect(() => {\n    var _opsModal$data4;\n\n    if (opsModal.data && ((_opsModal$data4 = opsModal.data) == null ? void 0 : _opsModal$data4.settlementType) === 'PHYSICAL' && confirmationType === ConfirmationTypes.Maturity) {\n      setModalToggle({\n        cash: false,\n        physical: true\n      });\n    } else {\n      setModalToggle({\n        cash: true,\n        physical: false\n      });\n    }\n  }, [opsModal.data, confirmationType]);\n\n  if (!opsModal.data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: modalOpen,\n    background: 'transparent',\n    position: 'absolute',\n    top: '0%',\n    children: /*#__PURE__*/_jsxDEV(ModalContainer, {\n      cashOnly: cashOnly,\n      children: [/*#__PURE__*/_jsxDEV(TopElementsWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(IssuerLogo, {\n          src: bofaLogo,\n          alt: (_opsModal$data5 = opsModal.data) == null ? void 0 : _opsModal$data5.issuer,\n          height: '2rem'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => {\n            setModalOpen(false);\n            opsModal.setData(undefined);\n          },\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            iconCode: \"xmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalSubTitle, {\n        children: (_opsModal$data6 = opsModal.data) == null ? void 0 : _opsModal$data6.structureNameInternal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), cashOnly ? null : /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtons, {\n          isSelected: modalToggle.cash === true,\n          onClick: () => setModalToggle({\n            cash: true,\n            physical: false\n          }),\n          children: \"Cash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButtons, {\n          isSelected: modalToggle.physical === true,\n          onClick: () => setModalToggle({\n            cash: false,\n            physical: true\n          }),\n          children: \"Physical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), modalToggle.cash === true ? /*#__PURE__*/_jsxDEV(CashForm, {\n        setModalOpen: setModalOpen,\n        cashOnly: cashOnly,\n        confirmationType: confirmationType,\n        modalOpen: modalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PhysicalForm, {\n        setModalOpen: setModalOpen,\n        confirmationType: confirmationType,\n        modalOpen: modalOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EventConfirmationModal, \"Fjqb+0OFa0R1/+EZZ9B70wBXfhs=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = EventConfirmationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventConfirmationModal\");","map":{"version":3,"names":["useEffect","useState","Modal","CashForm","PhysicalForm","IssuerLogo","bofaLogo","ModalContainer","ModalSubTitle","CloseButton","CloseIcon","TopElementsWrapper","ToggleButtons","ToggleWrapper","useEventConfirmationOptions","ConfirmationTypes","Statuses","EventConfirmationModal","modalOpen","setModalOpen","opsModal","modalToggle","setModalToggle","cash","physical","confirmationType","data","cashOnly","settlementType","Maturity","issuer","setData","undefined","structureNameInternal"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/EventConfirmationModal.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\nimport { Modal } from '@luma-fe-workspace/design-system';\n\nimport { CashForm } from './CashForm/CashForm';\nimport { PhysicalForm } from './PhysicalForm/PhysicalForm';\nimport { IssuerLogo } from '../AGGridTable/AGGridTableComponents.style';\nimport { bofaLogo } from '../../utils/constants';\nimport {\n  ModalContainer,\n  ModalSubTitle,\n  CloseButton,\n  CloseIcon,\n  TopElementsWrapper,\n  ToggleButtons,\n  ToggleWrapper,\n} from './EventConfirmationModal.styles';\nimport { useEventConfirmationOptions } from '../../utils/hooks/useEventConfirmationOptions';\n\ninterface Props {\n  modalOpen: boolean;\n  setModalOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nexport enum ConfirmationTypes {\n  Maturity = 'MATURITY',\n  'Auto Call' = 'AUTO_CALL',\n  'Issuer Call' = 'ISSUER_CALL',\n  'Coupon Payment' = 'COUPON_PAYMENT',\n}\n\nexport enum Statuses {\n  CONFIRMED = 'CONFIRMED',\n  REQUIRES_RESOLUTION = 'REQUIRES_RESOLUTION',\n  NOT_CONFIRMED = 'NOT_CONFIRMED',\n  NOT_SET = '',\n}\n\nexport const EventConfirmationModal = ({ modalOpen, setModalOpen }: Props) => {\n  const { opsModal } = useEventConfirmationOptions();\n  const [modalToggle, setModalToggle] = useState({\n    cash: true,\n    physical: false,\n  });\n  const confirmationType = opsModal.data?.confirmationType as ConfirmationTypes;\n  const cashOnly =\n    opsModal.data?.settlementType === 'CASH' ||\n    (opsModal.data?.settlementType === 'PHYSICAL' &&\n      confirmationType !== ConfirmationTypes.Maturity);\n\n  useEffect(() => {\n    if (\n      opsModal.data &&\n      opsModal.data?.settlementType === 'PHYSICAL' &&\n      confirmationType === ConfirmationTypes.Maturity\n    ) {\n      setModalToggle({ cash: false, physical: true });\n    } else {\n      setModalToggle({ cash: true, physical: false });\n    }\n  }, [opsModal.data, confirmationType]);\n\n  if (!opsModal.data) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={modalOpen}\n      background={'transparent'}\n      position={'absolute'}\n      top={'0%'}\n    >\n      <ModalContainer cashOnly={cashOnly}>\n        <TopElementsWrapper>\n          <IssuerLogo\n            src={bofaLogo}\n            alt={opsModal.data?.issuer}\n            height={'2rem'}\n          />\n          <CloseButton\n            onClick={() => {\n              setModalOpen(false);\n              opsModal.setData(undefined);\n            }}\n          >\n            <CloseIcon iconCode=\"xmark\" />\n          </CloseButton>\n        </TopElementsWrapper>\n        <ModalSubTitle>{opsModal.data?.structureNameInternal}</ModalSubTitle>\n        {cashOnly ? null : (\n          <ToggleWrapper>\n            <ToggleButtons\n              isSelected={modalToggle.cash === true}\n              onClick={() => setModalToggle({ cash: true, physical: false })}\n            >\n              Cash\n            </ToggleButtons>\n            <ToggleButtons\n              isSelected={modalToggle.physical === true}\n              onClick={() => setModalToggle({ cash: false, physical: true })}\n            >\n              Physical\n            </ToggleButtons>\n          </ToggleWrapper>\n        )}\n\n        {modalToggle.cash === true ? (\n          <CashForm\n            setModalOpen={setModalOpen}\n            cashOnly={cashOnly}\n            confirmationType={confirmationType}\n            modalOpen={modalOpen}\n          />\n        ) : (\n          <PhysicalForm\n            setModalOpen={setModalOpen}\n            confirmationType={confirmationType}\n            modalOpen={modalOpen}\n          />\n        )}\n      </ModalContainer>\n    </Modal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}