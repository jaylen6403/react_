{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/DatePicker/DateRangeFilter.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { DatePickerWrapperStyles, CalendarIcon, DatePickerWrapper } from './DateRangeFilter.styles';\nimport { DateHelper } from '@luma-fe-workspace/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DateRangeFilter = () => {\n  _s();\n\n  const {\n    dateRangeFilter\n  } = useEventConfirmationOptions();\n  const minDate = useMemo(() => {\n    const minDateValue = new Date();\n    minDateValue.setDate(minDateValue.getDate() - 30);\n    return minDateValue;\n  }, []);\n  const maxDate = useMemo(() => {\n    const maxDateValue = new Date();\n    maxDateValue.setDate(maxDateValue.getDate() + 365);\n    return maxDateValue;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DatePickerWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      selected: dateRangeFilter.startDate,\n      wrapperClassName: \"date_picker\",\n      onChange: dates => {\n        const [start, end] = dates;\n        /* The below logic is to fix the bug where if you manually delete a date range from the input,\n        it auto selects the beginning of 2001 or 2000 as the date instead of clearing */\n\n        const oldDate = new Date('01/01/2002');\n\n        if (start && DateHelper.isDateBefore(start, oldDate)) {\n          dateRangeFilter.setStartDate(null);\n        } else {\n          dateRangeFilter.setStartDate(start);\n        }\n\n        dateRangeFilter.setEndDate(end);\n      },\n      startDate: dateRangeFilter.startDate,\n      endDate: dateRangeFilter.endDate,\n      minDate: minDate,\n      maxDate: maxDate,\n      placeholderText: \"Select a Date Range\",\n      formatWeekDay: nameOfDay => nameOfDay.substring(0, 1),\n      onChangeRaw: dateEntered => {\n        if (dateEntered.target.value) {\n          var _endDate, _startDate;\n\n          const dates = dateEntered.target.value.split('-');\n          let startDate = new Date(dates[0].trim());\n          let endDate = null;\n\n          if (dates.length === 2) {\n            endDate = new Date(dates[1].trim());\n          }\n\n          if (endDate && isNaN((_endDate = endDate) == null ? void 0 : _endDate.getTime())) {\n            endDate = null;\n          }\n\n          if (startDate && isNaN((_startDate = startDate) == null ? void 0 : _startDate.getTime())) {\n            startDate = null;\n          }\n\n          dateRangeFilter.setStartDate(startDate);\n          dateRangeFilter.setEndDate(endDate);\n        }\n      },\n      selectsRange: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalendarIcon, {\n      prefix: \"far\",\n      iconCode: \"calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DatePickerWrapperStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DateRangeFilter, \"hG2Os961Ps++hrefRxO6xkX9jGo=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = DateRangeFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateRangeFilter\");","map":{"version":3,"names":["useMemo","useEventConfirmationOptions","DatePicker","DatePickerWrapperStyles","CalendarIcon","DatePickerWrapper","DateHelper","DateRangeFilter","dateRangeFilter","minDate","minDateValue","Date","setDate","getDate","maxDate","maxDateValue","startDate","dates","start","end","oldDate","isDateBefore","setStartDate","setEndDate","endDate","nameOfDay","substring","dateEntered","target","value","split","trim","length","isNaN","getTime"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/DatePicker/DateRangeFilter.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {\n  DatePickerWrapperStyles,\n  CalendarIcon,\n  DatePickerWrapper,\n} from './DateRangeFilter.styles';\nimport { DateHelper } from '@luma-fe-workspace/utility';\n\nexport const DateRangeFilter = () => {\n  const { dateRangeFilter } = useEventConfirmationOptions();\n\n  const minDate = useMemo(() => {\n    const minDateValue = new Date();\n\n    minDateValue.setDate(minDateValue.getDate() - 30);\n    return minDateValue;\n  }, []);\n\n  const maxDate = useMemo(() => {\n    const maxDateValue = new Date();\n\n    maxDateValue.setDate(maxDateValue.getDate() + 365);\n    return maxDateValue;\n  }, []);\n\n  return (\n    <DatePickerWrapper>\n      <DatePicker\n        selected={dateRangeFilter.startDate}\n        wrapperClassName=\"date_picker\"\n        onChange={(dates) => {\n          const [start, end] = dates;\n          /* The below logic is to fix the bug where if you manually delete a date range from the input,\n          it auto selects the beginning of 2001 or 2000 as the date instead of clearing */\n          const oldDate = new Date('01/01/2002');\n\n          if (start && DateHelper.isDateBefore(start, oldDate)) {\n            dateRangeFilter.setStartDate(null);\n          } else {\n            dateRangeFilter.setStartDate(start);\n          }\n\n          dateRangeFilter.setEndDate(end);\n        }}\n        startDate={dateRangeFilter.startDate}\n        endDate={dateRangeFilter.endDate}\n        minDate={minDate}\n        maxDate={maxDate}\n        placeholderText=\"Select a Date Range\"\n        formatWeekDay={(nameOfDay) => nameOfDay.substring(0, 1)}\n        onChangeRaw={(dateEntered) => {\n          if (dateEntered.target.value) {\n            const dates = dateEntered.target.value.split('-');\n            let startDate: Date | null = new Date(dates[0].trim());\n            let endDate: Date | null = null;\n            if (dates.length === 2) {\n              endDate = new Date(dates[1].trim());\n            }\n\n            if (endDate && isNaN(endDate?.getTime())) {\n              endDate = null;\n            }\n\n            if (startDate && isNaN(startDate?.getTime())) {\n              startDate = null;\n            }\n\n            dateRangeFilter.setStartDate(startDate);\n            dateRangeFilter.setEndDate(endDate);\n          }\n        }}\n        selectsRange\n      />\n      <CalendarIcon prefix=\"far\" iconCode=\"calendar\" />\n      <DatePickerWrapperStyles />\n    </DatePickerWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}