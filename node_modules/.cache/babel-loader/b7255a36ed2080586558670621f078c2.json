{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/QuoteResponseButton/QuoteResponseButton.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { CellButton } from './QuoteResponseButton.styles';\nimport { secondariesSlice, selectSecondaries, selectJwt, useAppDispatch, useAppSelector, useCreateQuoteUsingPostMutation } from '@luma-fe-workspace/redux';\nimport { DateHelper } from '@luma-fe-workspace/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuoteResponseButton = ({\n  children,\n  variant,\n  cellRendererParams\n}) => {\n  _s();\n\n  const JWT = useAppSelector(selectJwt);\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const RFQs = secondariesStore.availableRFQs;\n  const [createResponse] = useCreateQuoteUsingPostMutation();\n  const dispatch = useAppDispatch();\n\n  const handleRfqResponse = async () => {\n    const rowData = cellRendererParams.data;\n\n    if (rowData.price) {\n      // activeResponse is a valid response by the user that has not expired\n      // We are checking if it exists to determine whether we are creating a new quote\n      if (!rowData.activeResponse && rowData.requestId) {\n        try {\n          var _rowData$endTime;\n\n          const response = await createResponse({\n            secondaryQuote: {\n              requestId: rowData.requestId,\n              quoteProvider: JWT == null ? void 0 : JWT.company,\n              quoteAmount: rowData.price,\n              goodUntilTime: typeof rowData.quoteDeadline === 'number' ? DateHelper.convertToUTC(DateHelper.addMilliseconds(new Date().setSeconds(0, 0), rowData.quoteDeadline)).toISOString() : DateHelper.convertToUTC((_rowData$endTime = rowData.endTime) != null ? _rowData$endTime : '').toISOString()\n            }\n          }).unwrap();\n\n          if (response) {\n            var _rowData$productIdent;\n\n            updateRowData(rowData, response);\n            updateSecondariesSlice(response, true);\n            dispatch(secondariesSlice.actions.setMessageObject({\n              title: `${JWT != null && JWT.firstName ? JWT.firstName + \"'s\" : 'Your'} bid for ${rowData.quantity} x ${(_rowData$productIdent = rowData.productIdentifier) == null ? void 0 : _rowData$productIdent.securityIdentifierValue} @ ${response.quoteAmount} has been submitted.`,\n              messageType: 'success',\n              isMessageShowing: true\n            }));\n          }\n        } catch (error) {\n          var _rowData$productIdent2;\n\n          dispatch(secondariesSlice.actions.setMessageObject({\n            title: `Unable to create quote response for security ${(_rowData$productIdent2 = rowData.productIdentifier) == null ? void 0 : _rowData$productIdent2.securityIdentifierValue}.`,\n            messageType: 'error',\n            isMessageShowing: true\n          }));\n        }\n      }\n    }\n  };\n\n  const updateRowData = (rowData, response) => {\n    if (response) {\n      rowData.price = response.quoteAmount;\n      rowData.activeResponse = response;\n      rowData.quoteDeadline = DateHelper.convertToUTC(response.goodUntilTime).getTime();\n      cellRendererParams.api.refreshCells({\n        columns: ['account'],\n        force: true\n      });\n    } else {\n      var _rowData$activeRespon;\n\n      // Resetting it to the old values will trigger a grid update for those cells\n      rowData.price = (_rowData$activeRespon = rowData.activeResponse) == null ? void 0 : _rowData$activeRespon.quoteAmount;\n      rowData.quoteDeadline = rowData.activeResponse !== undefined ? DateHelper.convertToUTC(rowData.activeResponse.goodUntilTime).getTime() : DateHelper.convertToUTC(new Date()).getTime();\n    }\n\n    cellRendererParams.api.applyTransaction({\n      update: [rowData]\n    });\n  };\n\n  const updateSecondariesSlice = (quote, isNewQuote) => {\n    if (RFQs && isNewQuote) {\n      const updatedRFQs = RFQs.map(RFQ => {\n        if (RFQ.requestId === quote.requestId && RFQ.quotes) {\n          const newRFQ = Object.assign({}, RFQ, {\n            quotes: [quote]\n          });\n          return newRFQ;\n        }\n\n        return RFQ;\n      });\n      dispatch(secondariesSlice.actions.setAvailableRFQs(updatedRFQs));\n    } else if (RFQs) {\n      const updatedRFQs = RFQs.map(RFQ => {\n        if (RFQ.requestId === quote.requestId && RFQ.quotes) {\n          const newQuotes = RFQ.quotes.map(existingQuote => {\n            if (quote.responseId === existingQuote.responseId) {\n              return quote;\n            }\n\n            return existingQuote;\n          });\n          const newRFQ = Object.assign({}, RFQ, {\n            quotes: newQuotes\n          });\n          return newRFQ;\n        }\n\n        return RFQ;\n      });\n      dispatch(secondariesSlice.actions.setAvailableRFQs(updatedRFQs));\n    }\n  };\n\n  if (variant === 'disabled') {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CellButton, {\n    variant: variant,\n    onClick: handleRfqResponse,\n    disabled: !!cellRendererParams.data.activeResponse,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteResponseButton, \"TBzCePoP3uR0HlHHaXoUa/8uIYM=\", false, function () {\n  return [useAppSelector, useAppSelector, useCreateQuoteUsingPostMutation, useAppDispatch];\n});\n\n_c = QuoteResponseButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteResponseButton\");","map":{"version":3,"names":["CellButton","secondariesSlice","selectSecondaries","selectJwt","useAppDispatch","useAppSelector","useCreateQuoteUsingPostMutation","DateHelper","QuoteResponseButton","children","variant","cellRendererParams","JWT","secondariesStore","RFQs","availableRFQs","createResponse","dispatch","handleRfqResponse","rowData","data","price","activeResponse","requestId","response","secondaryQuote","quoteProvider","company","quoteAmount","goodUntilTime","quoteDeadline","convertToUTC","addMilliseconds","Date","setSeconds","toISOString","endTime","unwrap","updateRowData","updateSecondariesSlice","actions","setMessageObject","title","firstName","quantity","productIdentifier","securityIdentifierValue","messageType","isMessageShowing","error","getTime","api","refreshCells","columns","force","undefined","applyTransaction","update","quote","isNewQuote","updatedRFQs","map","RFQ","quotes","newRFQ","setAvailableRFQs","newQuotes","existingQuote","responseId"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/QuoteResponseButton/QuoteResponseButton.tsx"],"sourcesContent":["import { CellButton } from './QuoteResponseButton.styles';\nimport { ICellRendererParams } from 'ag-grid-community';\nimport {\n  RFQSearchQuoted,\n  secondariesSlice,\n  SecondaryQuote,\n  SecondaryRequestForQuote,\n  selectSecondaries,\n  selectJwt,\n  useAppDispatch,\n  useAppSelector,\n  useCreateQuoteUsingPostMutation,\n} from '@luma-fe-workspace/redux';\nimport { DateHelper } from '@luma-fe-workspace/utility';\n\nexport interface QuoteResponseButtonProps {\n  /**\n   *  Button Text\n   */\n  children: React.ReactNode;\n  /**\n   * Style variant.\n   */\n  variant: 'primary' | 'secondary' | 'disabled';\n  /**\n   * AG-Grid cellRendererParams\n   */\n  cellRendererParams: ICellRendererParams;\n}\n\nexport const QuoteResponseButton = ({\n  children,\n  variant,\n  cellRendererParams,\n}: QuoteResponseButtonProps) => {\n  const JWT = useAppSelector(selectJwt);\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const RFQs = secondariesStore.availableRFQs;\n  const [createResponse] = useCreateQuoteUsingPostMutation();\n  const dispatch = useAppDispatch();\n\n  const handleRfqResponse = async () => {\n    const rowData: RFQSearchQuoted = cellRendererParams.data;\n    if (rowData.price) {\n      // activeResponse is a valid response by the user that has not expired\n      // We are checking if it exists to determine whether we are creating a new quote\n      if (!rowData.activeResponse && rowData.requestId) {\n        try {\n          const response = await createResponse({\n            secondaryQuote: {\n              requestId: rowData.requestId,\n              quoteProvider: JWT?.company,\n              quoteAmount: rowData.price,\n              goodUntilTime:\n                typeof rowData.quoteDeadline === 'number'\n                  ? DateHelper.convertToUTC(\n                      DateHelper.addMilliseconds(\n                        new Date().setSeconds(0, 0),\n                        rowData.quoteDeadline\n                      )\n                    ).toISOString()\n                  : DateHelper.convertToUTC(\n                      rowData.endTime ?? ''\n                    ).toISOString(),\n            },\n          }).unwrap();\n          if (response) {\n            updateRowData(rowData, response);\n            updateSecondariesSlice(response, true);\n            dispatch(\n              secondariesSlice.actions.setMessageObject({\n                title: `${\n                  JWT?.firstName ? JWT.firstName + \"'s\" : 'Your'\n                } bid for ${rowData.quantity} x ${\n                  rowData.productIdentifier?.securityIdentifierValue\n                } @ ${response.quoteAmount} has been submitted.`,\n                messageType: 'success',\n                isMessageShowing: true,\n              })\n            );\n          }\n        } catch (error) {\n          dispatch(\n            secondariesSlice.actions.setMessageObject({\n              title: `Unable to create quote response for security ${rowData.productIdentifier?.securityIdentifierValue}.`,\n              messageType: 'error',\n              isMessageShowing: true,\n            })\n          );\n        }\n      }\n    }\n  };\n\n  const updateRowData = (\n    rowData: RFQSearchQuoted,\n    response?: SecondaryQuote\n  ) => {\n    if (response) {\n      rowData.price = response.quoteAmount;\n      rowData.activeResponse = response;\n      rowData.quoteDeadline = DateHelper.convertToUTC(\n        response.goodUntilTime\n      ).getTime();\n      cellRendererParams.api.refreshCells({\n        columns: ['account'],\n        force: true,\n      });\n    } else {\n      // Resetting it to the old values will trigger a grid update for those cells\n      rowData.price = rowData.activeResponse?.quoteAmount;\n      rowData.quoteDeadline =\n        rowData.activeResponse !== undefined\n          ? DateHelper.convertToUTC(\n              rowData.activeResponse.goodUntilTime\n            ).getTime()\n          : DateHelper.convertToUTC(new Date()).getTime();\n    }\n    cellRendererParams.api.applyTransaction({ update: [rowData] });\n  };\n\n  const updateSecondariesSlice = (\n    quote: SecondaryQuote,\n    isNewQuote: boolean\n  ) => {\n    if (RFQs && isNewQuote) {\n      const updatedRFQs: SecondaryRequestForQuote[] = RFQs.map(\n        (RFQ: SecondaryRequestForQuote) => {\n          if (RFQ.requestId === quote.requestId && RFQ.quotes) {\n            const newRFQ = { ...RFQ, quotes: [quote] };\n            return newRFQ;\n          }\n          return RFQ;\n        }\n      );\n\n      dispatch(secondariesSlice.actions.setAvailableRFQs(updatedRFQs));\n    } else if (RFQs) {\n      const updatedRFQs: SecondaryRequestForQuote[] = RFQs.map(\n        (RFQ: SecondaryRequestForQuote) => {\n          if (RFQ.requestId === quote.requestId && RFQ.quotes) {\n            const newQuotes = RFQ.quotes.map((existingQuote) => {\n              if (quote.responseId === existingQuote.responseId) {\n                return quote;\n              }\n              return existingQuote;\n            });\n\n            const newRFQ = { ...RFQ, quotes: newQuotes };\n            return newRFQ;\n          }\n          return RFQ;\n        }\n      );\n      dispatch(secondariesSlice.actions.setAvailableRFQs(updatedRFQs));\n    }\n  };\n  if (variant === 'disabled') {\n    return <span>{children}</span>;\n  }\n  return (\n    <CellButton\n      variant={variant}\n      onClick={handleRfqResponse}\n      disabled={!!cellRendererParams.data.activeResponse}\n    >\n      {children}\n    </CellButton>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}