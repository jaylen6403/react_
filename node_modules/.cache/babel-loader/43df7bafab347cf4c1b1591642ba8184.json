{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { apiUrl } from '@luma-fe-workspace/common';\nimport { prepareHeadersWithAuth } from '../../utils/prepareHeadersWithAuth';\nexport const lifecycleManagerServiceApi = createApi({\n  reducerPath: 'lifecycleManagerService',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${apiUrl}/lifecycle-manager-service/`,\n    prepareHeaders: prepareHeadersWithAuth()\n  }),\n  endpoints: build => ({\n    getAccountEventsByUsingPost: build.query({\n      query: queryArg => ({\n        url: `events?page=${queryArg.pageNumber}&size=${queryArg.pageSize}`,\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes\n        }\n      })\n    }),\n    getFiltersUsingGet: build.query({\n      query: queryArg => ({\n        url: '/filters',\n        params: {\n          displayCurrency: queryArg.displayCurrency\n        }\n      })\n    }),\n    getPayoutHorizonUsingGet: build.query({\n      query: queryArg => ({\n        url: '/payout-horizon',\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes\n        }\n      })\n    }),\n    getPayoutSummaryUsingPost: build.query({\n      query: queryArg => ({\n        url: '/payout-summary',\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes\n        }\n      })\n    }),\n    getPayoutBreakdownUsingPost: build.query({\n      query: queryArg => {\n        return {\n          url: '/payout-breakdown',\n          method: 'POST',\n          params: {\n            displayCurrency: queryArg.displayCurrency,\n            groupByName: queryArg.groupByName,\n            breakdownType: queryArg.breakdownType\n          },\n          body: {\n            dateRange: queryArg.dateRange,\n            portfolioAttributes: queryArg.portfolioAttributes,\n            productAttributes: queryArg.productAttributes\n          }\n        };\n      }\n    }),\n    getAccountsByRepresentativeUsingPost: build.query({\n      query: queryArg => {\n        return {\n          url: '/accounts-by-representative',\n          method: 'POST',\n          params: {\n            eventId: queryArg.eventId,\n            displayCurrency: queryArg.displayCurrency\n          },\n          body: {\n            dateRange: queryArg.dateRange,\n            portfolioAttributes: queryArg.portfolioAttributes,\n            productAttributes: queryArg.productAttributes\n          }\n        };\n      }\n    }),\n    getDisplayCurrenciesUsingGet: build.query({\n      query: () => {\n        return {\n          url: '/currencies',\n          method: 'GET'\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetAccountEventsByUsingPostQuery,\n  useGetFiltersUsingGetQuery,\n  useGetPayoutHorizonUsingGetQuery,\n  useGetPayoutSummaryUsingPostQuery,\n  useGetPayoutBreakdownUsingPostQuery,\n  useGetAccountsByRepresentativeUsingPostQuery,\n  useGetDisplayCurrenciesUsingGetQuery\n} = lifecycleManagerServiceApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiUrl","prepareHeadersWithAuth","lifecycleManagerServiceApi","reducerPath","baseQuery","baseUrl","prepareHeaders","endpoints","build","getAccountEventsByUsingPost","query","queryArg","url","pageNumber","pageSize","method","params","displayCurrency","body","dateRange","portfolioAttributes","productAttributes","getFiltersUsingGet","getPayoutHorizonUsingGet","getPayoutSummaryUsingPost","getPayoutBreakdownUsingPost","groupByName","breakdownType","getAccountsByRepresentativeUsingPost","eventId","getDisplayCurrenciesUsingGet","useGetAccountEventsByUsingPostQuery","useGetFiltersUsingGetQuery","useGetPayoutHorizonUsingGetQuery","useGetPayoutSummaryUsingPostQuery","useGetPayoutBreakdownUsingPostQuery","useGetAccountsByRepresentativeUsingPostQuery","useGetDisplayCurrenciesUsingGetQuery"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/redux/lifecycleManagerService/lifecycleManagerServiceApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { apiUrl } from '@luma-fe-workspace/common';\n\nimport { prepareHeadersWithAuth } from '../../utils/prepareHeadersWithAuth';\nimport {\n  GetAccountsByRepresentativeUsingPostApiArg,\n  GetAccountsByRepresentativeUsingPostApiResponse,\n  GetEventsByUsingPostApiArg,\n  GetEventsByUsingPostApiResponse,\n  GetFiltersUsingGetApiResponse,\n  GetPayoutBreakdownUsingPostApiArg,\n  GetPayoutBreakdownUsingPostApiResponse,\n  GetPayoutHorizonByUsingPostApiArg,\n  GetPayoutHorizonByUsingPostApiResponse,\n  GetPayoutSummaryUsingPostApiArg,\n  GetPayoutSummaryUsingPostApiResponse,\n  GetDisplayCurrenciesUsingGetApiResponse,\n  GetFiltersUsingGetApiArg,\n} from './types';\n\nexport const lifecycleManagerServiceApi = createApi({\n  reducerPath: 'lifecycleManagerService',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${apiUrl}/lifecycle-manager-service/`,\n    prepareHeaders: prepareHeadersWithAuth(),\n  }),\n  endpoints: (build) => ({\n    getAccountEventsByUsingPost: build.query<\n      GetEventsByUsingPostApiResponse,\n      GetEventsByUsingPostApiArg\n    >({\n      query: (queryArg) => ({\n        url: `events?page=${queryArg.pageNumber}&size=${queryArg.pageSize}`,\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency,\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes,\n        },\n      }),\n    }),\n    getFiltersUsingGet: build.query<\n      GetFiltersUsingGetApiResponse,\n      GetFiltersUsingGetApiArg\n    >({\n      query: (queryArg) => ({\n        url: '/filters',\n        params: {\n          displayCurrency: queryArg.displayCurrency,\n        },\n      }),\n    }),\n    getPayoutHorizonUsingGet: build.query<\n      GetPayoutHorizonByUsingPostApiResponse,\n      GetPayoutHorizonByUsingPostApiArg\n    >({\n      query: (queryArg) => ({\n        url: '/payout-horizon',\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency,\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes,\n        },\n      }),\n    }),\n    getPayoutSummaryUsingPost: build.query<\n      GetPayoutSummaryUsingPostApiResponse,\n      GetPayoutSummaryUsingPostApiArg\n    >({\n      query: (queryArg) => ({\n        url: '/payout-summary',\n        method: 'POST',\n        params: {\n          displayCurrency: queryArg.displayCurrency,\n        },\n        body: {\n          dateRange: queryArg.dateRange,\n          portfolioAttributes: queryArg.portfolioAttributes,\n          productAttributes: queryArg.productAttributes,\n        },\n      }),\n    }),\n    getPayoutBreakdownUsingPost: build.query<\n      GetPayoutBreakdownUsingPostApiResponse,\n      GetPayoutBreakdownUsingPostApiArg\n    >({\n      query: (queryArg) => {\n        return {\n          url: '/payout-breakdown',\n          method: 'POST',\n          params: {\n            displayCurrency: queryArg.displayCurrency,\n            groupByName: queryArg.groupByName,\n            breakdownType: queryArg.breakdownType,\n          },\n          body: {\n            dateRange: queryArg.dateRange,\n            portfolioAttributes: queryArg.portfolioAttributes,\n            productAttributes: queryArg.productAttributes,\n          },\n        };\n      },\n    }),\n    getAccountsByRepresentativeUsingPost: build.query<\n      GetAccountsByRepresentativeUsingPostApiResponse,\n      GetAccountsByRepresentativeUsingPostApiArg\n    >({\n      query: (queryArg) => {\n        return {\n          url: '/accounts-by-representative',\n          method: 'POST',\n          params: {\n            eventId: queryArg.eventId,\n            displayCurrency: queryArg.displayCurrency,\n          },\n          body: {\n            dateRange: queryArg.dateRange,\n            portfolioAttributes: queryArg.portfolioAttributes,\n            productAttributes: queryArg.productAttributes,\n          },\n        };\n      },\n    }),\n    getDisplayCurrenciesUsingGet: build.query<\n      GetDisplayCurrenciesUsingGetApiResponse,\n      void\n    >({\n      query: () => {\n        return {\n          url: '/currencies',\n          method: 'GET',\n        };\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetAccountEventsByUsingPostQuery,\n  useGetFiltersUsingGetQuery,\n  useGetPayoutHorizonUsingGetQuery,\n  useGetPayoutSummaryUsingPostQuery,\n  useGetPayoutBreakdownUsingPostQuery,\n  useGetAccountsByRepresentativeUsingPostQuery,\n  useGetDisplayCurrenciesUsingGetQuery,\n} = lifecycleManagerServiceApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}