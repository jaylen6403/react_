{"ast":null,"code":"export const MaxLengthValue = 15;","map":{"version":3,"names":["MaxLengthValue"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaDropdown/LumaDropDownBasicType.ts"],"sourcesContent":["import { FocusEvent } from 'react';\nimport { IconCode, IconProps } from '../LumaIcon';\n\nexport type SizeType = 'small' | 'medium' | 'large' | 'top' | 'bottom';\n\nexport interface DataItemProps {\n  /**  displayed item's label in the list */\n  label?: string;\n  /**  item value in dropdown */\n  value?: string | number;\n  /** function value in dropdown - when string or number are not enough */\n  action?: (arg: any) => void;\n  /** checkbox index for multidropdown */\n  checkboxIndex?: number;\n  /**\n   * code for the icon that will be displayed\n   * to the right of the item in the dropdown list\n   */\n  iconCode?: IconCode;\n  /**\n   * Sets the name of the section\n   * that is displayed above this item\n   */\n  sectionName?: string;\n  /**\n   * Determines whether the item is disabled\n   */\n  isDisabled?: boolean;\n}\n\nexport interface CommonDropdownProps {\n  /**  A name(string) for the field */\n  name: string;\n  /** A unique id for the field */\n  id: string;\n  /** Whether input has an error */\n  error?: boolean;\n  /**  helperText will show a label below the box for showing information or error message */\n  helperText?: string;\n  /** input will be readonly */\n  readOnly?: boolean;\n  /** fullwidth will make the field 100% width  */\n  fullWidth?: boolean;\n  /** disabled will disable the field */\n  disabled?: boolean;\n  /** sets the size of the dropdown */\n  size?: SizeType;\n  /** act like a placeholder */\n  placeholder?: string;\n  /** allows to use dropdown as styled component */\n  className?: string;\n  /** data array for dropdown */\n  items: DataItemProps[];\n  /** action item on blur */\n  handleBlur?: (e: FocusEvent<HTMLInputElement>) => void;\n  /** action to output string */\n  itemToString?: (item: DataItemProps | null) => string;\n}\n\nexport interface LumaSingleDropDownProps extends CommonDropdownProps {\n  /** For selected data */\n  defaultSelectedItem?: DataItemProps;\n  /** action item selection a dropdown */\n  onChange?: (newItem: DataItemProps | null) => void;\n  /** dropDownIcon */\n  dropDownIcon?: IconCode;\n  /** The type of font-awesome icon the dropdown should show  */\n  dropDownIconType?: IconProps['type'];\n}\n\nexport interface LumaMultiDropDownProps extends CommonDropdownProps {\n  /** For selected data */\n  defaultSelectedItems?: DataItemProps[];\n  /** action item selection a dropdown */\n  onChange?: (newItems: DataItemProps[]) => void;\n}\n\nexport const MaxLengthValue = 15;\n\nexport type getItemProps = {\n  item: DataItemProps | TextSearchItem;\n  index: number;\n  disabled?: boolean;\n};\n\nexport type TextSearchItem = {\n  label: string;\n  id: string;\n};\n"],"mappings":"AA6EA,OAAO,MAAMA,cAAc,GAAG,EAAvB"},"metadata":{},"sourceType":"module"}