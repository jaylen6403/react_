{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport { formatDisplayString, getPercentString } from '../components/EventTable/columnHelpers';\nexport let LifecycleRoutes;\n\n(function (LifecycleRoutes) {\n  LifecycleRoutes[\"Events\"] = \"events\";\n  LifecycleRoutes[\"Products\"] = \"products\";\n  LifecycleRoutes[\"Accounts\"] = \"accounts\";\n})(LifecycleRoutes || (LifecycleRoutes = {}));\n\nexport const exportExcel = (gridApi, tableName) => {\n  gridApi == null ? void 0 : gridApi.exportDataAsExcel({\n    sheetName: tableName != null ? tableName : 'Exported Data',\n    fileName: `${tableName} ${new Date().toLocaleDateString()}`\n  });\n};\nexport const exportCSV = (gridApi, tableName) => {\n  gridApi == null ? void 0 : gridApi.exportDataAsCsv({\n    suppressQuotes: true,\n    fileName: `${tableName} ${new Date().toLocaleDateString()}`,\n    processCellCallback: params => {\n      var _params$node, _cellData$cusip, _exportedValue;\n\n      const cellData = (_params$node = params.node) == null ? void 0 : _params$node.data;\n      const columnId = params.column.getColId();\n      let exportedValue;\n\n      switch (columnId) {\n        case 'eventDate':\n        case 'structureType':\n        case 'basketType':\n          exportedValue = params.value;\n          break;\n\n        case 'productIdentifier':\n          exportedValue = `${cellData['issuer']} ~ ${(_cellData$cusip = cellData['cusip']) != null ? _cellData$cusip : cellData['isin']}`;\n          break;\n\n        case 'eventType':\n          exportedValue = `${formatDisplayString(cellData['eventType'])} ${(cellData['eventType'] === 'COUPON' || cellData['eventType'] === 'CALL') && 'Eval'} ~ ${(cellData['couponRatePercent'] * 100).toFixed(2)}% p.p.`;\n          break;\n\n        case 'underlierPerformance':\n          exportedValue = `${getPercentString(cellData['underlierPerformancePercent'], 2)} ~ Active: ${cellData['activeUnderlier']} ~ All Underliers: ${cellData['listOfUnderliers'].join(' | ')}`;\n          break;\n\n        case 'protectionProximity':\n          exportedValue = `${getPercentString(cellData['protectionProximityLevelPercent'] * 100, 2)} ~ ${cellData['protectionLevelPercent'] * 100} ~ ${formatDisplayString(cellData['protectionType'])}`;\n          break;\n\n        case 'eventProximity':\n          exportedValue = `${getPercentString(cellData['eventProximityPercent'] * 100, 2)} ~ ${cellData['eventLevelPercent'] * 100} ~ ${formatDisplayString(cellData['eventType'])}`;\n          break;\n\n        case 'payoutAmount':\n          exportedValue = `${cellData['payoutAmount']}`;\n          break;\n\n        case 'currency':\n          exportedValue = 'USD';\n          break;\n\n        case 'markToMarket':\n          exportedValue = `${Number(cellData['markToMarketPercent']).toFixed(3)}`;\n          break;\n\n        case 'notional':\n          exportedValue = `${cellData['notionalHoldingsSum']}`;\n          break;\n\n        default:\n          break;\n      }\n\n      return (_exportedValue = exportedValue) != null ? _exportedValue : '';\n    }\n  });\n};","map":{"version":3,"names":["formatDisplayString","getPercentString","LifecycleRoutes","exportExcel","gridApi","tableName","exportDataAsExcel","sheetName","fileName","Date","toLocaleDateString","exportCSV","exportDataAsCsv","suppressQuotes","processCellCallback","params","cellData","node","data","columnId","column","getColId","exportedValue","value","toFixed","join","Number"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/utils/lmUtils.ts"],"sourcesContent":["import { GridApi } from 'ag-grid-community';\nimport {\n  formatDisplayString,\n  getPercentString,\n} from '../components/EventTable/columnHelpers';\n\nexport enum LifecycleRoutes {\n  Events = 'events',\n  Products = 'products',\n  Accounts = 'accounts',\n}\n\nexport const exportExcel = (gridApi?: GridApi, tableName?: string) => {\n  gridApi?.exportDataAsExcel({\n    sheetName: tableName ?? 'Exported Data',\n    fileName: `${tableName} ${new Date().toLocaleDateString()}`,\n  });\n};\n\nexport const exportCSV = (gridApi?: GridApi, tableName?: string) => {\n  gridApi?.exportDataAsCsv({\n    suppressQuotes: true,\n    fileName: `${tableName} ${new Date().toLocaleDateString()}`,\n    processCellCallback: (params) => {\n      const cellData = params.node?.data;\n      const columnId = params.column.getColId();\n\n      let exportedValue;\n      switch (columnId) {\n        case 'eventDate':\n        case 'structureType':\n        case 'basketType':\n          exportedValue = params.value;\n          break;\n        case 'productIdentifier':\n          exportedValue = `${cellData['issuer']} ~ ${\n            cellData['cusip'] ?? cellData['isin']\n          }`;\n          break;\n        case 'eventType':\n          exportedValue = `${formatDisplayString(cellData['eventType'])} ${\n            (cellData['eventType'] === 'COUPON' ||\n              cellData['eventType'] === 'CALL') &&\n            'Eval'\n          } ~ ${(cellData['couponRatePercent'] * 100).toFixed(2)}% p.p.`;\n          break;\n        case 'underlierPerformance':\n          exportedValue = `${getPercentString(\n            cellData['underlierPerformancePercent'],\n            2\n          )} ~ Active: ${\n            cellData['activeUnderlier']\n          } ~ All Underliers: ${cellData['listOfUnderliers'].join(' | ')}`;\n          break;\n        case 'protectionProximity':\n          exportedValue = `${getPercentString(\n            cellData['protectionProximityLevelPercent'] * 100,\n            2\n          )} ~ ${\n            cellData['protectionLevelPercent'] * 100\n          } ~ ${formatDisplayString(cellData['protectionType'])}`;\n          break;\n        case 'eventProximity':\n          exportedValue = `${getPercentString(\n            cellData['eventProximityPercent'] * 100,\n            2\n          )} ~ ${cellData['eventLevelPercent'] * 100} ~ ${formatDisplayString(\n            cellData['eventType']\n          )}`;\n          break;\n        case 'payoutAmount':\n          exportedValue = `${cellData['payoutAmount']}`;\n          break;\n        case 'currency':\n          exportedValue = 'USD';\n          break;\n        case 'markToMarket':\n          exportedValue = `${Number(cellData['markToMarketPercent']).toFixed(\n            3\n          )}`;\n          break;\n        case 'notional':\n          exportedValue = `${cellData['notionalHoldingsSum']}`;\n          break;\n        default:\n          break;\n      }\n      return exportedValue ?? '';\n    },\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}