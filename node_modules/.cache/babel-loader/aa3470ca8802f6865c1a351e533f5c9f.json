{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/EventTypeFilterDropdown/EventTypeFilterDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport { FilterDropdown } from '../FilterDropdown/FilterDropdown';\nimport { formatEventType } from '../../../../../utils/gridUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EventTypeFilterDropdown = () => {\n  _s();\n\n  const {\n    events,\n    eventTypeFilter\n  } = useEventConfirmationOptions();\n  const eventTypes = useMemo(() => [...new Set(events.data.flatMap(event => formatEventType(event.eventType) || []))], [events.data]);\n  const options = useMemo(() => eventTypes.map(eventType => ({\n    label: eventType,\n    value: eventType\n  })), [eventTypes]);\n  return /*#__PURE__*/_jsxDEV(FilterDropdown, {\n    options: options,\n    label: `Event Type`,\n    selected: eventTypeFilter.value,\n    onChange: typeValue => //Sadly this must be any for the time being as the correct MenuItem is not export from the design-system\n    eventTypeFilter.setFilter( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeValue.map(typeOption => typeOption.value) || [])\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EventTypeFilterDropdown, \"bxe2E1SWEScISr1E8pwlS4aTSPU=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = EventTypeFilterDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventTypeFilterDropdown\");","map":{"version":3,"names":["useMemo","useEventConfirmationOptions","FilterDropdown","formatEventType","EventTypeFilterDropdown","events","eventTypeFilter","eventTypes","Set","data","flatMap","event","eventType","options","map","label","value","typeValue","setFilter","typeOption"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/EventTypeFilterDropdown/EventTypeFilterDropdown.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport {\n  FilterDropdown,\n  FilterDropdownOptions,\n} from '../FilterDropdown/FilterDropdown';\nimport { formatEventType } from '../../../../../utils/gridUtils';\n\nexport const EventTypeFilterDropdown = () => {\n  const { events, eventTypeFilter } = useEventConfirmationOptions();\n  const eventTypes = useMemo(\n    () => [\n      ...new Set(\n        events.data.flatMap((event) => formatEventType(event.eventType) || [])\n      ),\n    ],\n    [events.data]\n  );\n\n  const options: FilterDropdownOptions<string>[] = useMemo(\n    () =>\n      eventTypes.map((eventType) => ({ label: eventType, value: eventType })),\n    [eventTypes]\n  );\n\n  return (\n    <FilterDropdown<string>\n      options={options}\n      label={`Event Type`}\n      selected={eventTypeFilter.value}\n      onChange={(typeValue) =>\n        //Sadly this must be any for the time being as the correct MenuItem is not export from the design-system\n        eventTypeFilter.setFilter(\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          typeValue.map((typeOption: any) => typeOption.value) || []\n        )\n      }\n    />\n  );\n};\n"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,2BAAT,QAA4C,wDAA5C;AACA,SACEC,cADF,QAGO,kCAHP;AAIA,SAASC,eAAT,QAAgC,gCAAhC;;AAEA,OAAO,MAAMC,uBAAuB,GAAG,MAAM;EAAA;;EAC3C,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAA8BL,2BAA2B,EAA/D;EACA,MAAMM,UAAU,GAAGP,OAAO,CACxB,MAAM,CACJ,GAAG,IAAIQ,GAAJ,CACDH,MAAM,CAACI,IAAP,CAAYC,OAAZ,CAAqBC,KAAD,IAAWR,eAAe,CAACQ,KAAK,CAACC,SAAP,CAAf,IAAoC,EAAnE,CADC,CADC,CADkB,EAMxB,CAACP,MAAM,CAACI,IAAR,CANwB,CAA1B;EASA,MAAMI,OAAwC,GAAGb,OAAO,CACtD,MACEO,UAAU,CAACO,GAAX,CAAgBF,SAAD,KAAgB;IAAEG,KAAK,EAAEH,SAAT;IAAoBI,KAAK,EAAEJ;EAA3B,CAAhB,CAAf,CAFoD,EAGtD,CAACL,UAAD,CAHsD,CAAxD;EAMA,oBACE,QAAC,cAAD;IACE,OAAO,EAAEM,OADX;IAEE,KAAK,EAAG,YAFV;IAGE,QAAQ,EAAEP,eAAe,CAACU,KAH5B;IAIE,QAAQ,EAAGC,SAAD,IACR;IACAX,eAAe,CAACY,SAAhB,EACE;IACAD,SAAS,CAACH,GAAV,CAAeK,UAAD,IAAqBA,UAAU,CAACH,KAA9C,KAAwD,EAF1D;EANJ;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CA/BM;;GAAMZ,uB;UACyBH,2B;;;KADzBG,uB"},"metadata":{},"sourceType":"module"}