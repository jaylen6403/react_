{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nexport const selectAuth = state => state.auth;\nexport const selectAccessToken = state => selectAuth(state).accessToken;\nexport const selectRefreshToken = state => selectAuth(state).refreshToken;\nexport const selectJwt = state => {\n  const accessToken = selectAccessToken(state);\n  return accessToken ? jwt_decode(accessToken) : null;\n};\nexport const isLoggedIn = state => {\n  const jwt = selectJwt(state);\n\n  if (jwt) {\n    const expiration = jwt.exp;\n    return Date.now() + 10000 < expiration * 1000;\n  }\n\n  return false;\n};\nexport const selectUsername = state => {\n  const jwt = selectJwt(state);\n\n  if (jwt && jwt.user_name) {\n    return jwt.user_name;\n  }\n\n  return '';\n};\nexport const selectPermissions = state => {\n  const jwt = selectJwt(state);\n\n  if (jwt && jwt.permissions) {\n    return jwt.permissions;\n  }\n\n  return [];\n};\nexport const selectCompany = state => {\n  const jwt = selectJwt(state);\n\n  if (jwt && jwt.company) {\n    return jwt.company;\n  }\n\n  return [];\n};","map":{"version":3,"names":["jwt_decode","selectAuth","state","auth","selectAccessToken","accessToken","selectRefreshToken","refreshToken","selectJwt","isLoggedIn","jwt","expiration","exp","Date","now","selectUsername","user_name","selectPermissions","permissions","selectCompany","company"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/redux/auth/selector.ts"],"sourcesContent":["import jwt_decode from 'jwt-decode';\nimport type { RootState } from '../configureStore';\n\ninterface Jwt {\n  lastName: string;\n  user_name: string;\n  locale: string;\n  uuid: string;\n  authorities: string[];\n  client_id: string;\n  firstName: string;\n  aud: string[];\n  permissions: string[];\n  scope: string[];\n  name: string;\n  company: string;\n  exp: number;\n  jti: string;\n}\n\nexport const selectAuth = (state: RootState) => state.auth;\nexport const selectAccessToken = (state: RootState) =>\n  selectAuth(state).accessToken;\nexport const selectRefreshToken = (state: RootState) =>\n  selectAuth(state).refreshToken;\nexport const selectJwt = (state: RootState) => {\n  const accessToken = selectAccessToken(state);\n  return accessToken ? jwt_decode<Jwt>(accessToken) : null;\n};\nexport const isLoggedIn = (state: RootState) => {\n  const jwt = selectJwt(state);\n  if (jwt) {\n    const expiration = jwt.exp;\n    return Date.now() + 10000 < expiration * 1000;\n  }\n  return false;\n};\nexport const selectUsername = (state: RootState) => {\n  const jwt = selectJwt(state);\n  if (jwt && jwt.user_name) {\n    return jwt.user_name;\n  }\n  return '';\n};\nexport const selectPermissions = (state: RootState) => {\n  const jwt = selectJwt(state);\n  if (jwt && jwt.permissions) {\n    return jwt.permissions;\n  }\n  return [];\n};\nexport const selectCompany = (state: RootState) => {\n  const jwt = selectJwt(state);\n  if (jwt && jwt.company) {\n    return jwt.company;\n  }\n  return [];\n};\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AAoBA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAsBA,KAAK,CAACC,IAA/C;AACP,OAAO,MAAMC,iBAAiB,GAAIF,KAAD,IAC/BD,UAAU,CAACC,KAAD,CAAV,CAAkBG,WADb;AAEP,OAAO,MAAMC,kBAAkB,GAAIJ,KAAD,IAChCD,UAAU,CAACC,KAAD,CAAV,CAAkBK,YADb;AAEP,OAAO,MAAMC,SAAS,GAAIN,KAAD,IAAsB;EAC7C,MAAMG,WAAW,GAAGD,iBAAiB,CAACF,KAAD,CAArC;EACA,OAAOG,WAAW,GAAGL,UAAU,CAAMK,WAAN,CAAb,GAAkC,IAApD;AACD,CAHM;AAIP,OAAO,MAAMI,UAAU,GAAIP,KAAD,IAAsB;EAC9C,MAAMQ,GAAG,GAAGF,SAAS,CAACN,KAAD,CAArB;;EACA,IAAIQ,GAAJ,EAAS;IACP,MAAMC,UAAU,GAAGD,GAAG,CAACE,GAAvB;IACA,OAAOC,IAAI,CAACC,GAAL,KAAa,KAAb,GAAqBH,UAAU,GAAG,IAAzC;EACD;;EACD,OAAO,KAAP;AACD,CAPM;AAQP,OAAO,MAAMI,cAAc,GAAIb,KAAD,IAAsB;EAClD,MAAMQ,GAAG,GAAGF,SAAS,CAACN,KAAD,CAArB;;EACA,IAAIQ,GAAG,IAAIA,GAAG,CAACM,SAAf,EAA0B;IACxB,OAAON,GAAG,CAACM,SAAX;EACD;;EACD,OAAO,EAAP;AACD,CANM;AAOP,OAAO,MAAMC,iBAAiB,GAAIf,KAAD,IAAsB;EACrD,MAAMQ,GAAG,GAAGF,SAAS,CAACN,KAAD,CAArB;;EACA,IAAIQ,GAAG,IAAIA,GAAG,CAACQ,WAAf,EAA4B;IAC1B,OAAOR,GAAG,CAACQ,WAAX;EACD;;EACD,OAAO,EAAP;AACD,CANM;AAOP,OAAO,MAAMC,aAAa,GAAIjB,KAAD,IAAsB;EACjD,MAAMQ,GAAG,GAAGF,SAAS,CAACN,KAAD,CAArB;;EACA,IAAIQ,GAAG,IAAIA,GAAG,CAACU,OAAf,EAAwB;IACtB,OAAOV,GAAG,CAACU,OAAX;EACD;;EACD,OAAO,EAAP;AACD,CANM"},"metadata":{},"sourceType":"module"}