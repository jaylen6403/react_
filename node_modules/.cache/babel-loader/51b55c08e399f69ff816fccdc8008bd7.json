{"ast":null,"code":"import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { DateHelper } from '@luma-fe-workspace/utility';\nimport { DISPLAY_EVENT_TYPE } from '../types';\nexport const mockSummaryData = {\n  notional: {\n    amount: 10000,\n    percentage: 0.048\n  },\n  holdings: {\n    amount: 910,\n    percentage: 0.5\n  },\n  totalPayoutAmount: {\n    amount: 1250000,\n    percentage: 0.49\n  },\n  totalEventCount: {\n    amount: 230,\n    percentage: 0.680086\n  }\n}; // Payout Horizon\n\nexport const getMockPayoutHorizonData = (numDays = 400, // Over one year to allow selection of the 1Y button\nindividualValueMaximum = 100000) => {\n  const payoutHorizonData = [];\n\n  for (let dayOffset = 0; dayOffset < numDays; dayOffset++) {\n    payoutHorizonData.push({\n      date: DateHelper.addDays(new Date(), dayOffset).toISOString(),\n      events: [{\n        eventType: 'Maturing',\n        value: Math.random() * individualValueMaximum\n      }, {\n        eventType: 'Coupon',\n        value: Math.random() * individualValueMaximum\n      }, {\n        eventType: 'Call',\n        value: Math.random() * individualValueMaximum\n      }]\n    });\n  }\n\n  return payoutHorizonData;\n};\nconst mockedConvertedData = {\n  Maturing: [],\n  'Call Opportunity': [],\n  'Coupon Opportunity': []\n}; // Events Data 400 Days in the Future\n// 400 is arbitrary - just needs to be more than 365 so the 1Y button can be clicked\n\nconst mockPayoutHorizonData400 = getMockPayoutHorizonData(400);\nmockPayoutHorizonData400.forEach(day => {\n  day.events.forEach(event => {\n    mockedConvertedData[DISPLAY_EVENT_TYPE[event.eventType]].push([new Date(day.date).getTime(), event.value]);\n  });\n});\nexport const mockConvertedPayoutHorizonData400 = [...Object.keys(mockedConvertedData).map(eventType => {\n  return {\n    name: eventType,\n    data: mockedConvertedData[eventType]\n  };\n})]; // Payout Breakdown\n\nexport const mockPayoutBreakdownData = {\n  groupByValue: 'ISSUER',\n  groups: [{\n    groupByName: 'BARC',\n    breakdownValue: 153900\n  }, {\n    groupByName: 'CITI',\n    breakdownValue: 938100\n  }, {\n    groupByName: 'MS',\n    breakdownValue: 1530000\n  }, {\n    groupByName: 'HSBC USA',\n    breakdownValue: 762000\n  }, {\n    groupByName: 'MORGAN',\n    breakdownValue: 521000\n  }, {\n    groupByName: 'Americas',\n    breakdownValue: 521000\n  }, {\n    groupByName: 'MORGAN',\n    breakdownValue: 521000\n  }, {\n    groupByName: 'MORGAN',\n    breakdownValue: 521000\n  }]\n};\n/**\n * Currency Dropdown items, of type 'DataItemProps[]'\n * Note: cannot be typed here because of circular dependency\n * so type is asserted where used\n */\n\nexport const mockCurrencyDropdownItems = [{\n  label: '$ USD',\n  iconCode: 'times'\n}, {\n  label: '€ EUR',\n  isDisabled: true\n}, // TODO: Remove isDisabled after MVP demo\n{\n  label: '£ GBP',\n  isDisabled: true\n} // TODO: Remove isDisabled after MVP demo\n];","map":{"version":3,"names":["DateHelper","DISPLAY_EVENT_TYPE","mockSummaryData","notional","amount","percentage","holdings","totalPayoutAmount","totalEventCount","getMockPayoutHorizonData","numDays","individualValueMaximum","payoutHorizonData","dayOffset","push","date","addDays","Date","toISOString","events","eventType","value","Math","random","mockedConvertedData","Maturing","mockPayoutHorizonData400","forEach","day","event","getTime","mockConvertedPayoutHorizonData400","Object","keys","map","name","data","mockPayoutBreakdownData","groupByValue","groups","groupByName","breakdownValue","mockCurrencyDropdownItems","label","iconCode","isDisabled"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/redux/lifecycle/mockData/mockWidgetData.ts"],"sourcesContent":["import { DateHelper } from '@luma-fe-workspace/utility';\nimport { SeriesColumnOptions } from 'highcharts';\nimport {\n  DISPLAY_EVENT_TYPE,\n  PayoutBreakdownData,\n  PayoutHorizonData,\n  PayoutSummaryData,\n} from '../types';\n\nexport const mockSummaryData: PayoutSummaryData = {\n  notional: { amount: 10000, percentage: 0.048 },\n  holdings: { amount: 910, percentage: 0.5 },\n  totalPayoutAmount: { amount: 1250000, percentage: 0.49 },\n  totalEventCount: { amount: 230, percentage: 0.680086 },\n};\n\n// Payout Horizon\nexport const getMockPayoutHorizonData = (\n  numDays = 400, // Over one year to allow selection of the 1Y button\n  individualValueMaximum = 100000\n) => {\n  const payoutHorizonData: PayoutHorizonData[] = [];\n  for (let dayOffset = 0; dayOffset < numDays; dayOffset++) {\n    payoutHorizonData.push({\n      date: DateHelper.addDays(new Date(), dayOffset).toISOString(),\n      events: [\n        {\n          eventType: 'Maturing',\n          value: Math.random() * individualValueMaximum,\n        },\n        {\n          eventType: 'Coupon',\n          value: Math.random() * individualValueMaximum,\n        },\n        {\n          eventType: 'Call',\n          value: Math.random() * individualValueMaximum,\n        },\n      ],\n    });\n  }\n  return payoutHorizonData;\n};\n\nconst mockedConvertedData: {\n  /**\n   * Each of these is effectively a `[number, number][]` where the first value is\n   * the offset from the first value and the second is the value. For datetimes,\n   * Highcharts prefers milliseconds. See the related property `relativeXValue`\n   */\n  [key in DISPLAY_EVENT_TYPE]: SeriesColumnOptions['data'][];\n} = {\n  Maturing: [],\n  'Call Opportunity': [],\n  'Coupon Opportunity': [],\n};\n\n// Events Data 400 Days in the Future\n// 400 is arbitrary - just needs to be more than 365 so the 1Y button can be clicked\nconst mockPayoutHorizonData400 = getMockPayoutHorizonData(400);\nmockPayoutHorizonData400.forEach((day) => {\n  day.events.forEach((event) => {\n    mockedConvertedData[DISPLAY_EVENT_TYPE[event.eventType]].push([\n      new Date(day.date).getTime(),\n      event.value,\n    ]);\n  });\n});\n\nexport const mockConvertedPayoutHorizonData400 = [\n  ...Object.keys(mockedConvertedData).map((eventType) => {\n    return {\n      name: eventType,\n      data: mockedConvertedData[eventType as DISPLAY_EVENT_TYPE],\n    };\n  }),\n];\n\n// Payout Breakdown\nexport const mockPayoutBreakdownData: PayoutBreakdownData = {\n  groupByValue: 'ISSUER',\n  groups: [\n    {\n      groupByName: 'BARC',\n      breakdownValue: 153900,\n    },\n    {\n      groupByName: 'CITI',\n      breakdownValue: 938100,\n    },\n    {\n      groupByName: 'MS',\n      breakdownValue: 1530000,\n    },\n    {\n      groupByName: 'HSBC USA',\n      breakdownValue: 762000,\n    },\n    {\n      groupByName: 'MORGAN',\n      breakdownValue: 521000,\n    },\n    {\n      groupByName: 'Americas',\n      breakdownValue: 521000,\n    },\n    {\n      groupByName: 'MORGAN',\n      breakdownValue: 521000,\n    },\n    {\n      groupByName: 'MORGAN',\n      breakdownValue: 521000,\n    },\n  ],\n};\n\n/**\n * Currency Dropdown items, of type 'DataItemProps[]'\n * Note: cannot be typed here because of circular dependency\n * so type is asserted where used\n */\nexport const mockCurrencyDropdownItems = [\n  { label: '$ USD', iconCode: 'times' },\n  { label: '€ EUR', isDisabled: true }, // TODO: Remove isDisabled after MVP demo\n  { label: '£ GBP', isDisabled: true }, // TODO: Remove isDisabled after MVP demo\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}