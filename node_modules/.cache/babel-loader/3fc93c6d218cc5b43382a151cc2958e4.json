{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/OpsEventConfirmations/OpsEventConfirmations.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { useState, useEffect } from 'react';\nimport { EventConfirmationModal } from '../../EventConfirmationModal';\nimport { UnderlierColumn, formatIssuerColumn, StatusComponent, StructuredComponent, IssuerNameTooltip } from '../../AGGridTable/AGGridTableComponents';\nimport { AGGridConfirmationsTable } from '../../AGGridTable';\nimport { formatEventStatus, formatEventType, formatRegType, ISODateToFormat, observationDateFilterComparator } from '../../../utils/gridUtils';\nimport { useEventConfirmationOptions, StatusOptions } from '../../../utils/hooks/useEventConfirmationOptions';\nimport { ConfirmationPopUp } from '../../ConfirmationPopUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const OpsEventConfirmations = ({\n  eventsData\n}) => {\n  _s();\n\n  const {\n    events,\n    opsModal,\n    toastData\n  } = useEventConfirmationOptions();\n  const [rowData, setRowData] = useState([]);\n  const [productStructure, setProductStructure] = useState(undefined);\n  const [columnDefs] = useState([{\n    field: 'Product',\n    cellRenderer: formatIssuerColumn,\n    tooltipComponent: IssuerNameTooltip,\n    tooltipField: 'Product',\n    suppressMenu: true\n  }, {\n    field: 'Obv Date',\n    comparator: observationDateFilterComparator\n  }, // {\n  //   field: 'Registration Type',\n  //   filter: false,\n  //   suppressMenu: true,\n  // },\n  {\n    field: 'Event Type',\n    suppressMenu: true\n  }, {\n    field: 'Structure',\n    cellRenderer: StructuredComponent\n  }, {\n    field: 'Underliers',\n    cellRenderer: UnderlierColumn,\n    sortable: false,\n    filter: false,\n    suppressMenu: true\n  }, {\n    field: 'Event Calculation',\n    cellRenderer: StatusComponent,\n    suppressMenu: true\n  }]);\n  useEffect(() => {\n    const compileRowData = () => {\n      const updatedEvents = eventsData.map(event => {\n        var _event$confirmationTy, _event$observationDat;\n\n        const eventType = formatEventType((_event$confirmationTy = event.confirmationType) != null ? _event$confirmationTy : event.eventType);\n        const eventStatus = formatEventStatus(event);\n        return {\n          activeUnderlier: event.activeUnderlier,\n          Product: event.productIdentifier,\n          'Obv Date': ISODateToFormat((_event$observationDat = event.observationDate) != null ? _event$observationDat : event.eventDate),\n          'Registration Type': formatRegType(event.registrationType),\n          'Event Type': eventType,\n          Structure: event.structureNameInternal,\n          Underliers: event.underlierList,\n          cusip: event.productIdentifier,\n          'Event Calculation': eventStatus == null ? void 0 : eventStatus.status,\n          basketType: event.basketType,\n          cashSettlementRates: event.cashSettlementRates,\n          eventStatus: eventStatus,\n          eventProductData: event,\n          productSymbol: event.productSymbol\n        };\n      });\n      setRowData(updatedEvents);\n      events.setEvents(eventsData);\n    };\n\n    compileRowData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [eventsData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AGGridConfirmationsTable, {\n      rowData: rowData,\n      columnData: columnDefs,\n      setModalOpen: opsModal.setOpen,\n      modalOpen: opsModal.isOpen,\n      modalData: opsModal.data,\n      setModalData: opsModal.setData,\n      setProductStructure: setProductStructure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventConfirmationModal, {\n      modalOpen: opsModal.isOpen,\n      setModalOpen: opsModal.setOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationPopUp, {\n      closePopUp: () => toastData.setStatus(StatusOptions.None),\n      productStructure: productStructure,\n      successHeader: \"Values Submitted\",\n      failureHeader: \"Failed to Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(OpsEventConfirmations, \"IsITewOppjYBSnAwu5dsKD0/nBk=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = OpsEventConfirmations;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpsEventConfirmations\");","map":{"version":3,"names":["useState","useEffect","EventConfirmationModal","UnderlierColumn","formatIssuerColumn","StatusComponent","StructuredComponent","IssuerNameTooltip","AGGridConfirmationsTable","formatEventStatus","formatEventType","formatRegType","ISODateToFormat","observationDateFilterComparator","useEventConfirmationOptions","StatusOptions","ConfirmationPopUp","OpsEventConfirmations","eventsData","events","opsModal","toastData","rowData","setRowData","productStructure","setProductStructure","undefined","columnDefs","field","cellRenderer","tooltipComponent","tooltipField","suppressMenu","comparator","sortable","filter","compileRowData","updatedEvents","map","event","eventType","confirmationType","eventStatus","activeUnderlier","Product","productIdentifier","observationDate","eventDate","registrationType","Structure","structureNameInternal","Underliers","underlierList","cusip","status","basketType","cashSettlementRates","eventProductData","productSymbol","setEvents","setOpen","isOpen","data","setData","setStatus","None"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/OpsEventConfirmations/OpsEventConfirmations.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { EventProductData } from '@luma-fe-workspace/redux';\n\nimport { EventConfirmationModal } from '../../EventConfirmationModal';\nimport {\n  UnderlierColumn,\n  formatIssuerColumn,\n  StatusComponent,\n  StructuredComponent,\n  IssuerNameTooltip,\n} from '../../AGGridTable/AGGridTableComponents';\nimport { AGGridConfirmationsTable, RowData } from '../../AGGridTable';\nimport {\n  formatEventStatus,\n  formatEventType,\n  formatRegType,\n  ISODateToFormat,\n  observationDateFilterComparator,\n} from '../../../utils/gridUtils';\nimport {\n  useEventConfirmationOptions,\n  StatusOptions,\n} from '../../../utils/hooks/useEventConfirmationOptions';\n\nimport { ConfirmationPopUp } from '../../ConfirmationPopUp';\n\ninterface Props {\n  eventsData: EventProductData[];\n}\n\nexport const OpsEventConfirmations = ({ eventsData }: Props) => {\n  const { events, opsModal, toastData } = useEventConfirmationOptions();\n  const [rowData, setRowData] = useState<RowData[] | []>([]);\n  const [productStructure, setProductStructure] = useState<string | undefined>(\n    undefined\n  );\n\n  const [columnDefs] = useState([\n    {\n      field: 'Product',\n      cellRenderer: formatIssuerColumn,\n      tooltipComponent: IssuerNameTooltip,\n      tooltipField: 'Product',\n      suppressMenu: true,\n    },\n    {\n      field: 'Obv Date',\n      comparator: observationDateFilterComparator,\n    },\n    // {\n    //   field: 'Registration Type',\n    //   filter: false,\n    //   suppressMenu: true,\n    // },\n    { field: 'Event Type', suppressMenu: true },\n    {\n      field: 'Structure',\n      cellRenderer: StructuredComponent,\n    },\n    {\n      field: 'Underliers',\n      cellRenderer: UnderlierColumn,\n      sortable: false,\n      filter: false,\n      suppressMenu: true,\n    },\n    {\n      field: 'Event Calculation',\n      cellRenderer: StatusComponent,\n      suppressMenu: true,\n    },\n  ]);\n\n  useEffect(() => {\n    const compileRowData = () => {\n      const updatedEvents = eventsData.map((event) => {\n        const eventType = formatEventType(\n          event.confirmationType ?? event.eventType\n        );\n        const eventStatus = formatEventStatus(event);\n\n        return {\n          activeUnderlier: event.activeUnderlier,\n          Product: event.productIdentifier,\n          'Obv Date': ISODateToFormat(event.observationDate ?? event.eventDate),\n          'Registration Type': formatRegType(event.registrationType),\n          'Event Type': eventType,\n          Structure: event.structureNameInternal,\n          Underliers: event.underlierList,\n          cusip: event.productIdentifier,\n          'Event Calculation': eventStatus?.status,\n          basketType: event.basketType,\n          cashSettlementRates: event.cashSettlementRates,\n          eventStatus: eventStatus,\n          eventProductData: event,\n          productSymbol: event.productSymbol,\n        };\n      });\n\n      setRowData(updatedEvents);\n      events.setEvents(eventsData);\n    };\n    compileRowData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [eventsData]);\n\n  return (\n    <>\n      <AGGridConfirmationsTable\n        rowData={rowData}\n        columnData={columnDefs}\n        setModalOpen={opsModal.setOpen}\n        modalOpen={opsModal.isOpen}\n        modalData={opsModal.data}\n        setModalData={opsModal.setData}\n        setProductStructure={setProductStructure}\n      />\n      <EventConfirmationModal\n        modalOpen={opsModal.isOpen}\n        setModalOpen={opsModal.setOpen}\n      />\n      <ConfirmationPopUp\n        closePopUp={() => toastData.setStatus(StatusOptions.None)}\n        productStructure={productStructure}\n        successHeader=\"Values Submitted\"\n        failureHeader=\"Failed to Submit\"\n      />\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}