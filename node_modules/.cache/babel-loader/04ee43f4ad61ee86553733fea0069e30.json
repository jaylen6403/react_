{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/AccountsByRepDrawer/AccountsByRepLists/AccountsByRepLists.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { selectLifecycleEventRequestObject, useAppSelector, useGetAccountsByRepresentativeUsingPostQuery } from '@luma-fe-workspace/redux';\nimport { useEffect, useState } from 'react';\nimport { Separator } from '../AccountsByRepDrawer.styles';\nimport { AccountsByRepDropdown } from './AccountsByRepDropdown';\nimport { ContentHeader, ContentWrapper, AccountRows, DataHeader, CheckBox, DataRow } from './AccountsByRepLists.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountsByRepLists = ({\n  selectedEvent\n}) => {\n  _s();\n\n  var _selectedEvent$eventI;\n\n  const [accountData, setAccountData] = useState([]);\n  const numberOfaccounts = accountData.reduce((total, obj) => obj.accountNotionals.length + total, 0);\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const accountsResponse = useGetAccountsByRepresentativeUsingPostQuery(Object.assign({\n    eventId: (_selectedEvent$eventI = selectedEvent == null ? void 0 : selectedEvent.eventId) != null ? _selectedEvent$eventI : ''\n  }, eventRequestObject));\n  useEffect(() => {\n    if (accountsResponse.isSuccess && !accountsResponse.isFetching) {\n      setAccountData(accountsResponse.data);\n    } else if (accountsResponse.isError) {\n      setAccountData([]);\n    }\n  }, [accountsResponse]);\n  return /*#__PURE__*/_jsxDEV(ContentWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(ContentHeader, {\n      children: [\"Accounts (\", numberOfaccounts, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Separator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountRows, {\n      children: accountData.length === 1 ? accountData[0].accountNotionals.map(account => {\n        return /*#__PURE__*/_jsxDEV(DataRow, {\n          children: [/*#__PURE__*/_jsxDEV(DataHeader, {\n            children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this), \"Account ID #\", account.accountId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 19\n          }, this), Intl.NumberFormat().format(account.notional)]\n        }, account.accountId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this);\n      }) : accountData.map(account => {\n        return /*#__PURE__*/_jsxDEV(AccountsByRepDropdown, {\n          account: account\n        }, account.representative, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountsByRepLists, \"ajuXQ3YFLjYoFEgzrL1MfXExvUE=\", false, function () {\n  return [useAppSelector, useGetAccountsByRepresentativeUsingPostQuery];\n});\n\n_c = AccountsByRepLists;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountsByRepLists\");","map":{"version":3,"names":["selectLifecycleEventRequestObject","useAppSelector","useGetAccountsByRepresentativeUsingPostQuery","useEffect","useState","Separator","AccountsByRepDropdown","ContentHeader","ContentWrapper","AccountRows","DataHeader","CheckBox","DataRow","AccountsByRepLists","selectedEvent","accountData","setAccountData","numberOfaccounts","reduce","total","obj","accountNotionals","length","eventRequestObject","accountsResponse","eventId","isSuccess","isFetching","data","isError","map","account","accountId","Intl","NumberFormat","format","notional","representative"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/AccountsByRepDrawer/AccountsByRepLists/AccountsByRepLists.tsx"],"sourcesContent":["import {\n  LifecycleEventLM,\n  selectLifecycleEventRequestObject,\n  useAppSelector,\n  useGetAccountsByRepresentativeUsingPostQuery,\n  AccountsByRepresentative,\n} from '@luma-fe-workspace/redux';\nimport { useEffect, useState } from 'react';\nimport { Separator } from '../AccountsByRepDrawer.styles';\nimport { AccountsByRepDropdown } from './AccountsByRepDropdown';\nimport {\n  ContentHeader,\n  ContentWrapper,\n  AccountRows,\n  DataHeader,\n  CheckBox,\n  DataRow,\n} from './AccountsByRepLists.styles';\n\ninterface AccountsByRepListsProps {\n  selectedEvent: LifecycleEventLM;\n}\nexport const AccountsByRepLists = ({\n  selectedEvent,\n}: AccountsByRepListsProps) => {\n  const [accountData, setAccountData] = useState<AccountsByRepresentative[]>(\n    []\n  );\n  const numberOfaccounts = accountData.reduce(\n    (total, obj) => obj.accountNotionals.length + total,\n    0\n  );\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const accountsResponse = useGetAccountsByRepresentativeUsingPostQuery({\n    eventId: selectedEvent?.eventId ?? '',\n    ...eventRequestObject,\n  });\n  useEffect(() => {\n    if (accountsResponse.isSuccess && !accountsResponse.isFetching) {\n      setAccountData(accountsResponse.data);\n    } else if (accountsResponse.isError) {\n      setAccountData([]);\n    }\n  }, [accountsResponse]);\n\n  return (\n    <ContentWrapper>\n      <ContentHeader>Accounts ({numberOfaccounts})</ContentHeader>\n      <Separator />\n\n      <AccountRows>\n        {accountData.length === 1\n          ? accountData[0].accountNotionals.map((account) => {\n              return (\n                <DataRow key={account.accountId}>\n                  <DataHeader>\n                    <CheckBox type=\"checkbox\" />\n                    Account ID #{account.accountId}\n                  </DataHeader>\n                  {Intl.NumberFormat().format(account.notional)}\n                </DataRow>\n              );\n            })\n          : accountData.map((account) => {\n              return (\n                <AccountsByRepDropdown\n                  key={account.representative}\n                  account={account}\n                />\n              );\n            })}\n      </AccountRows>\n    </ContentWrapper>\n  );\n};\n"],"mappings":";;;;;;;AAAA,SAEEA,iCAFF,EAGEC,cAHF,EAIEC,4CAJF,QAMO,0BANP;AAOA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SACEC,aADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,QALF,EAMEC,OANF,QAOO,6BAPP;;AAYA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;EACjCC;AADiC,CAAD,KAEH;EAAA;;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAC5C,EAD4C,CAA9C;EAGA,MAAMa,gBAAgB,GAAGF,WAAW,CAACG,MAAZ,CACvB,CAACC,KAAD,EAAQC,GAAR,KAAgBA,GAAG,CAACC,gBAAJ,CAAqBC,MAArB,GAA8BH,KADvB,EAEvB,CAFuB,CAAzB;EAIA,MAAMI,kBAAkB,GAAGtB,cAAc,CAACD,iCAAD,CAAzC;EACA,MAAMwB,gBAAgB,GAAGtB,4CAA4C;IACnEuB,OAAO,2BAAEX,aAAF,oBAAEA,aAAa,CAAEW,OAAjB,oCAA4B;EADgC,GAEhEF,kBAFgE,EAArE;EAIApB,SAAS,CAAC,MAAM;IACd,IAAIqB,gBAAgB,CAACE,SAAjB,IAA8B,CAACF,gBAAgB,CAACG,UAApD,EAAgE;MAC9DX,cAAc,CAACQ,gBAAgB,CAACI,IAAlB,CAAd;IACD,CAFD,MAEO,IAAIJ,gBAAgB,CAACK,OAArB,EAA8B;MACnCb,cAAc,CAAC,EAAD,CAAd;IACD;EACF,CANQ,EAMN,CAACQ,gBAAD,CANM,CAAT;EAQA,oBACE,QAAC,cAAD;IAAA,wBACE,QAAC,aAAD;MAAA,yBAA0BP,gBAA1B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA,QAFF,eAIE,QAAC,WAAD;MAAA,UACGF,WAAW,CAACO,MAAZ,KAAuB,CAAvB,GACGP,WAAW,CAAC,CAAD,CAAX,CAAeM,gBAAf,CAAgCS,GAAhC,CAAqCC,OAAD,IAAa;QAC/C,oBACE,QAAC,OAAD;UAAA,wBACE,QAAC,UAAD;YAAA,wBACE,QAAC,QAAD;cAAU,IAAI,EAAC;YAAf;cAAA;cAAA;cAAA;YAAA,QADF,kBAEeA,OAAO,CAACC,SAFvB;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,EAKGC,IAAI,CAACC,YAAL,GAAoBC,MAApB,CAA2BJ,OAAO,CAACK,QAAnC,CALH;QAAA,GAAcL,OAAO,CAACC,SAAtB;UAAA;UAAA;UAAA;QAAA,QADF;MASD,CAVD,CADH,GAYGjB,WAAW,CAACe,GAAZ,CAAiBC,OAAD,IAAa;QAC3B,oBACE,QAAC,qBAAD;UAEE,OAAO,EAAEA;QAFX,GACOA,OAAO,CAACM,cADf;UAAA;UAAA;UAAA;QAAA,QADF;MAMD,CAPD;IAbN;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CApDM;;GAAMxB,kB;UAUgBZ,c,EACFC,4C;;;KAXdW,kB"},"metadata":{},"sourceType":"module"}