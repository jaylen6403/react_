{"ast":null,"code":"import { rest } from 'msw';\nimport { mockAuthResponse, mockAuthErrorResponse } from './data';\nexport const getSuccessOauthTokenHandler = (response = mockAuthResponse()) => rest.post('/auth-service/oauth/token', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json(response));\n});\nexport const getFailureOauthTokenHandler = (response = mockAuthErrorResponse()) => rest.post('/auth-service/oauth/token', (req, res, ctx) => {\n  return res(ctx.status(400), ctx.json(response));\n});\nexport const getSuccessUserTokenInfoHandler = (response = mockAuthResponse()) => rest.get('*/auth-service/token-info/user', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json(response));\n});\nexport const getFailureUserTokenInfoHandler = () => rest.get('*/auth-service/token-info/user', (req, res, ctx) => {\n  return res(ctx.status(401));\n});","map":{"version":3,"names":["rest","mockAuthResponse","mockAuthErrorResponse","getSuccessOauthTokenHandler","response","post","req","res","ctx","status","json","getFailureOauthTokenHandler","getSuccessUserTokenInfoHandler","get","getFailureUserTokenInfoHandler"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/testUtils/mocks/authService/handlers.ts"],"sourcesContent":["import { rest } from 'msw';\nimport { mockAuthResponse, mockAuthErrorResponse } from './data';\n\nexport const getSuccessOauthTokenHandler = (response = mockAuthResponse()) =>\n  rest.post('/auth-service/oauth/token', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(response));\n  });\n\nexport const getFailureOauthTokenHandler = (\n  response = mockAuthErrorResponse()\n) =>\n  rest.post('/auth-service/oauth/token', (req, res, ctx) => {\n    return res(ctx.status(400), ctx.json(response));\n  });\n\nexport const getSuccessUserTokenInfoHandler = (response = mockAuthResponse()) =>\n  rest.get('*/auth-service/token-info/user', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json(response));\n  });\n\nexport const getFailureUserTokenInfoHandler = () =>\n  rest.get('*/auth-service/token-info/user', (req, res, ctx) => {\n    return res(ctx.status(401));\n  });\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,KAArB;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,QAAxD;AAEA,OAAO,MAAMC,2BAA2B,GAAG,CAACC,QAAQ,GAAGH,gBAAgB,EAA5B,KACzCD,IAAI,CAACK,IAAL,CAAU,2BAAV,EAAuC,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EACxD,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAD,EAAkBD,GAAG,CAACE,IAAJ,CAASN,QAAT,CAAlB,CAAV;AACD,CAFD,CADK;AAKP,OAAO,MAAMO,2BAA2B,GAAG,CACzCP,QAAQ,GAAGF,qBAAqB,EADS,KAGzCF,IAAI,CAACK,IAAL,CAAU,2BAAV,EAAuC,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EACxD,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAD,EAAkBD,GAAG,CAACE,IAAJ,CAASN,QAAT,CAAlB,CAAV;AACD,CAFD,CAHK;AAOP,OAAO,MAAMQ,8BAA8B,GAAG,CAACR,QAAQ,GAAGH,gBAAgB,EAA5B,KAC5CD,IAAI,CAACa,GAAL,CAAS,gCAAT,EAA2C,CAACP,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EAC5D,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAD,EAAkBD,GAAG,CAACE,IAAJ,CAASN,QAAT,CAAlB,CAAV;AACD,CAFD,CADK;AAKP,OAAO,MAAMU,8BAA8B,GAAG,MAC5Cd,IAAI,CAACa,GAAL,CAAS,gCAAT,EAA2C,CAACP,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;EAC5D,OAAOD,GAAG,CAACC,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAD,CAAV;AACD,CAFD,CADK"},"metadata":{},"sourceType":"module"}