{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQModal/RFQModal.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport { Message } from '@luma-fe-workspace/design-system';\nimport { useAppSelector, useCreateMultipleRequestForQuotesUsingPostMutation, useGetProductsBySearchCriteriaUsingPostMutation, secondariesSlice, useAppDispatch, selectSecondaries, selectMessageObject } from '@luma-fe-workspace/redux';\nimport { addDays, addMinutes } from 'date-fns';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SecondariesModal } from '../SecondariesModal/SecondariesModal';\nimport { AGGridTable } from '../AGGridTable/AGGridTable';\nimport { AddRowButton, BottomActionRow, DropdownButton, DropdownRow, PlusIcon, RFQGrid } from './RFQModal.styles';\nimport { getRFQModalColumns } from './columnHelpers';\nimport { getMsTillUTCMarketClose, UTC_MARKET_CLOSE_HOUR } from '../../utils/getMsTillMarketClose';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RFQModal = ({\n  showModal,\n  setNewCreatedRFQs,\n  setShowModal\n}) => {\n  _s();\n\n  const [createRFQs] = useCreateMultipleRequestForQuotesUsingPostMutation();\n  const [getProductbySearch] = useGetProductsBySearchCriteriaUsingPostMutation();\n  const dispatch = useAppDispatch();\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const myRFQs = secondariesStore.myRFQs;\n  const [gridApi, setGridApi] = useState(null);\n  const [submitDisabled, setSubmitDisabled] = useState(false);\n  const [RFQCount, setRFQCount] = useState(0);\n  const [rowCount, setRowCount] = useState(0);\n  const messageObject = useAppSelector(selectMessageObject);\n  const [dueTime, setDueTime] = useState(null);\n  const [dueTimeOptions, setDueTimeOptions] = useState([]);\n  const [modalErrorMessage, setModalErrorMessage] = useState(undefined);\n  const handleDueTime = useCallback(minutes => {\n    setDueTime(minutes);\n\n    if (modalErrorMessage) {\n      setModalErrorMessage(undefined);\n    }\n  }, [modalErrorMessage]);\n\n  const getMinutesTillMarketClose = () => {\n    const msTillMarketClose = getMsTillUTCMarketClose();\n    const msPerMinute = 60000;\n    const minutesTillMarketClose = msTillMarketClose / msPerMinute;\n    return minutesTillMarketClose;\n  };\n\n  const setDueTimes = useCallback(() => {\n    const baseOptions = [2, 5, 10, 15, 30, 45, 60, 90, 120, 240];\n    const minutesTillMarketClose = getMinutesTillMarketClose();\n    const dueTimes = [];\n\n    for (let i = 0; i < baseOptions.length; i++) {\n      if (baseOptions[i] > minutesTillMarketClose) {\n        break;\n      } else {\n        dueTimes.push({\n          display: `${baseOptions[i]} min`,\n          onClick: () => handleDueTime(baseOptions[i])\n        });\n      }\n    }\n\n    dueTimes.push({\n      display: 'Max',\n      onClick: () => handleDueTime('Max')\n    });\n    setDueTimeOptions(dueTimes);\n  }, [handleDueTime]);\n  useEffect(() => {\n    if (showModal === true) {\n      setDueTimes();\n    }\n  }, [setDueTimes, showModal]);\n\n  const handleCUSIPEntry = async e => {\n    try {\n      const data = await getProductbySearch({\n        searchOptions: {\n          searchCriteriaList: [{\n            key: 'productGeneral.cusip',\n            value: [e.newValue],\n            operation: 'IN'\n          }]\n        }\n      }).unwrap();\n\n      if (data && data[0] && data[0].productId) {\n        var _data$0$productGenera;\n\n        updateItems(e, {\n          description: (_data$0$productGenera = data[0].productGeneral.structureNameInternal) != null ? _data$0$productGenera : 'NA',\n          id: data[0].productId\n        });\n      } else {\n        updateItems(e);\n      }\n    } catch (error) {\n      return;\n    }\n  };\n\n  const handleRFQCount = api => {\n    if (api) {\n      const rowData = [];\n      api.forEachNode(node => rowData.push(node.data));\n      const quantities = rowData.filter(row => row.quantity);\n      setRFQCount(quantities.length);\n      setModalErrorMessage(undefined);\n    }\n  };\n\n  const RFQModalColumns = getRFQModalColumns(handleCUSIPEntry, handleRFQCount);\n\n  const updateItems = (e, product) => {\n    const RFQRowData = e.data;\n\n    if (product) {\n      RFQRowData.description = product.description;\n      RFQRowData.productId = product.id;\n    } else {\n      RFQRowData.description = 'Invalid CUSIP';\n      RFQRowData.productId = null;\n      RFQRowData.quantity = null;\n      handleRFQCount(e.api);\n    }\n\n    e.api.applyTransaction({\n      update: [RFQRowData]\n    });\n\n    if (e.node) {\n      e.api.refreshCells({\n        rowNodes: [e.node],\n        force: true\n      });\n    }\n  };\n\n  const calculateEndTime = (dueTime, now) => {\n    let endTime;\n\n    if (dueTime === 'Max') {\n      const marketCloseAtUTC = new Date().setUTCHours(UTC_MARKET_CLOSE_HOUR, 0, 0, 0);\n      endTime = new Date(marketCloseAtUTC).toISOString();\n    } else if (dueTime) {\n      endTime = addMinutes(now, dueTime).toISOString();\n    }\n\n    return endTime;\n  };\n\n  const handleSubmit = async () => {\n    if (!gridApi || !dueTime) {\n      return;\n    }\n\n    setSubmitDisabled(true);\n    const rowData = [];\n    gridApi.forEachNode(node => rowData.push(node.data));\n    const now = new Date();\n    const body = [];\n    const submittedCusips = [];\n    rowData.forEach((RFQ, i) => {\n      if (!RFQ.productId || !RFQ.quantity || new Date(RFQ.settlement).toString() === 'Invalid Date' || new Date(RFQ.settlement) < now) {\n        return;\n      }\n\n      submittedCusips.push({\n        cusip: RFQ.cusip,\n        productId: RFQ.productId\n      });\n      const request = {\n        productIdentifier: {\n          productId: RFQ.productId\n        },\n        quantity: RFQ.quantity,\n        requestType: RFQ.side,\n        // TODO: change due time name?\n        endTime: calculateEndTime(dueTime, now),\n        settlementTimestamp: new Date(RFQ.settlement).toISOString()\n      };\n      body.push(request);\n    });\n\n    try {\n      const createRFQResponse = await createRFQs({\n        body\n      }).unwrap();\n      setNewCreatedRFQs(createRFQResponse);\n\n      if (myRFQs) {\n        dispatch(secondariesSlice.actions.setMyRFQs([...createRFQResponse, ...myRFQs]));\n      } else {\n        dispatch(secondariesSlice.actions.setMyRFQs(createRFQResponse));\n      }\n\n      handleMessage(createRFQResponse);\n    } catch (error) {\n      handleMessage();\n    }\n  };\n\n  const handleMessage = data => {\n    if (gridApi) {\n      const rowData = [];\n      gridApi.forEachNode(node => rowData.push(node.data));\n\n      if (data && data.length > 0) {\n        var _data$0$productIdenti;\n\n        dispatch(secondariesSlice.actions.setMessageObject({\n          title: `Security ${(_data$0$productIdenti = data[0].productIdentifier) == null ? void 0 : _data$0$productIdenti.securityIdentifierValue} ${data.length > 1 ? `and ${data.length - 1} other${data.length > 2 ? 's' : ''}` : ''} successfully submitted as request for quote.`,\n          messageType: 'success',\n          isMessageShowing: true\n        }));\n        setShowModal(false);\n        setRFQCount(0);\n        setDueTime(null);\n        setModalErrorMessage(undefined);\n      } else {\n        dispatch(secondariesSlice.actions.setMessageObject({\n          title: `Unable to submit ${RFQCount > 1 ? `${RFQCount} securities` : 'security'} as request for quote.`,\n          description: 'Please verify and resubmit or cancel.',\n          messageType: 'error',\n          isMessageShowing: true\n        }));\n        setModalErrorMessage('Unable to submit those securities. Verify and resubmit or cancel.');\n      }\n    }\n\n    setSubmitDisabled(false);\n  };\n\n  const getDueTimePlaceholder = () => {\n    let placeholder = 'Select';\n\n    if (dueTime === 'Max') {\n      placeholder = 'Max';\n    } else if (dueTime) {\n      placeholder = `${dueTime} min`;\n    }\n\n    return placeholder;\n  };\n\n  const addRows = api => {\n    if (api) {\n      const RFQRequests = [];\n\n      for (let i = rowCount; i < rowCount + 10; i++) {\n        RFQRequests.push({\n          id: i,\n          cusip: '',\n          description: null,\n          side: 'BWIC',\n          quantity: null,\n          productId: null,\n          settlement: addDays(new Date(), 2).toLocaleDateString()\n        });\n      }\n\n      api.applyTransaction({\n        add: RFQRequests\n      });\n      setRowCount(rowCount + 10);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SecondariesModal, {\n    id: \"rfq-submit-modal\",\n    title: 'REQUEST FOR QUOTE',\n    showModal: showModal,\n    handleOnClose: () => {\n      setShowModal(false);\n      setRFQCount(0);\n      setDueTime(null);\n      setModalErrorMessage(undefined);\n    },\n    submitAction: {\n      text: `SUBMIT ${RFQCount > 0 ? `(${RFQCount})` : ''}`,\n      onClick: () => handleSubmit()\n    },\n    disableSubmit: !dueTime || RFQCount < 1 || submitDisabled,\n    errorMessage: modalErrorMessage,\n    children: [/*#__PURE__*/_jsxDEV(DropdownRow, {\n      children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n        items: dueTimeOptions,\n        header: 'Due Time',\n        placeholder: getDueTimePlaceholder(),\n        variant: 'tertiary'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RFQGrid, {\n      children: /*#__PURE__*/_jsxDEV(AGGridTable, {\n        getRowNodeId: data => data.id.toString(),\n        gridOptions: {\n          onGridReady: e => {\n            setGridApi(e.api);\n            addRows(e.api);\n          },\n          rowHeight: 32,\n          headerHeight: 48,\n          suppressHorizontalScroll: true,\n          columnDefs: RFQModalColumns,\n          getRowNodeId: data => data.id,\n          stopEditingWhenCellsLoseFocus: true,\n          rowClassRules: {\n            'grid-row-even': e => e.rowIndex % 2 === 0,\n            'grid-row-odd': e => e.rowIndex % 2 !== 0\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BottomActionRow, {\n      children: /*#__PURE__*/_jsxDEV(AddRowButton, {\n        variant: \"secondary\",\n        onClick: () => addRows(gridApi),\n        children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n          iconCode: \"plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), \"Add 10 More Rows\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      title: messageObject.title,\n      showMessage: messageObject.isMessageShowing,\n      setShowMessage: showMessage => dispatch(secondariesSlice.actions.setIsMessageShowing(showMessage)),\n      messageType: messageObject.messageType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RFQModal, \"RBkzn6kX/TzSdOAiMEP0G+qxj/4=\", false, function () {\n  return [useCreateMultipleRequestForQuotesUsingPostMutation, useGetProductsBySearchCriteriaUsingPostMutation, useAppDispatch, useAppSelector, useAppSelector];\n});\n\n_c = RFQModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"RFQModal\");","map":{"version":3,"names":["Message","useAppSelector","useCreateMultipleRequestForQuotesUsingPostMutation","useGetProductsBySearchCriteriaUsingPostMutation","secondariesSlice","useAppDispatch","selectSecondaries","selectMessageObject","addDays","addMinutes","useCallback","useEffect","useState","SecondariesModal","AGGridTable","AddRowButton","BottomActionRow","DropdownButton","DropdownRow","PlusIcon","RFQGrid","getRFQModalColumns","getMsTillUTCMarketClose","UTC_MARKET_CLOSE_HOUR","RFQModal","showModal","setNewCreatedRFQs","setShowModal","createRFQs","getProductbySearch","dispatch","secondariesStore","myRFQs","gridApi","setGridApi","submitDisabled","setSubmitDisabled","RFQCount","setRFQCount","rowCount","setRowCount","messageObject","dueTime","setDueTime","dueTimeOptions","setDueTimeOptions","modalErrorMessage","setModalErrorMessage","undefined","handleDueTime","minutes","getMinutesTillMarketClose","msTillMarketClose","msPerMinute","minutesTillMarketClose","setDueTimes","baseOptions","dueTimes","i","length","push","display","onClick","handleCUSIPEntry","e","data","searchOptions","searchCriteriaList","key","value","newValue","operation","unwrap","productId","updateItems","description","productGeneral","structureNameInternal","id","error","handleRFQCount","api","rowData","forEachNode","node","quantities","filter","row","quantity","RFQModalColumns","product","RFQRowData","applyTransaction","update","refreshCells","rowNodes","force","calculateEndTime","now","endTime","marketCloseAtUTC","Date","setUTCHours","toISOString","handleSubmit","body","submittedCusips","forEach","RFQ","settlement","toString","cusip","request","productIdentifier","requestType","side","settlementTimestamp","createRFQResponse","actions","setMyRFQs","handleMessage","setMessageObject","title","securityIdentifierValue","messageType","isMessageShowing","getDueTimePlaceholder","placeholder","addRows","RFQRequests","toLocaleDateString","add","text","onGridReady","rowHeight","headerHeight","suppressHorizontalScroll","columnDefs","getRowNodeId","stopEditingWhenCellsLoseFocus","rowClassRules","rowIndex","showMessage","setIsMessageShowing"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQModal/RFQModal.tsx"],"sourcesContent":["import { MenuItem, Message } from '@luma-fe-workspace/design-system';\nimport {\n  useAppSelector,\n  SecondaryRequestForQuote,\n  useCreateMultipleRequestForQuotesUsingPostMutation,\n  useGetProductsBySearchCriteriaUsingPostMutation,\n  secondariesSlice,\n  useAppDispatch,\n  selectSecondaries,\n  selectMessageObject,\n} from '@luma-fe-workspace/redux';\nimport { GridApi, NewValueParams, RowClassParams } from 'ag-grid-community';\nimport { addDays, addMinutes } from 'date-fns';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SecondariesModal } from '../SecondariesModal/SecondariesModal';\nimport { AGGridTable } from '../AGGridTable/AGGridTable';\nimport {\n  AddRowButton,\n  BottomActionRow,\n  DropdownButton,\n  DropdownRow,\n  PlusIcon,\n  RFQGrid,\n} from './RFQModal.styles';\nimport { getRFQModalColumns } from './columnHelpers';\nimport {\n  getMsTillUTCMarketClose,\n  UTC_MARKET_CLOSE_HOUR,\n} from '../../utils/getMsTillMarketClose';\n\ninterface RFQModalProps {\n  showModal: boolean;\n  setNewCreatedRFQs: (data: SecondaryRequestForQuote[]) => void;\n  setShowModal: (showModal: boolean) => void;\n}\n\ninterface RFQRequest {\n  id: number;\n  cusip: string;\n  description: string | null;\n  side: 'BWIC' | 'OWIC';\n  quantity: number | null;\n  productId: string | null;\n  settlement: string;\n}\n\ntype DueTimeType = number | 'Max' | null;\n\nexport const RFQModal = ({\n  showModal,\n  setNewCreatedRFQs,\n  setShowModal,\n}: RFQModalProps) => {\n  const [createRFQs] = useCreateMultipleRequestForQuotesUsingPostMutation();\n  const [getProductbySearch] =\n    useGetProductsBySearchCriteriaUsingPostMutation();\n  const dispatch = useAppDispatch();\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const myRFQs = secondariesStore.myRFQs;\n  const [gridApi, setGridApi] = useState<GridApi | null>(null);\n  const [submitDisabled, setSubmitDisabled] = useState<boolean>(false);\n  const [RFQCount, setRFQCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(0);\n  const messageObject = useAppSelector(selectMessageObject);\n  const [dueTime, setDueTime] = useState<DueTimeType>(null);\n  const [dueTimeOptions, setDueTimeOptions] = useState<MenuItem[]>([]);\n  const [modalErrorMessage, setModalErrorMessage] = useState<\n    string | undefined\n  >(undefined);\n\n  const handleDueTime = useCallback(\n    (minutes: DueTimeType) => {\n      setDueTime(minutes);\n      if (modalErrorMessage) {\n        setModalErrorMessage(undefined);\n      }\n    },\n    [modalErrorMessage]\n  );\n\n  const getMinutesTillMarketClose = () => {\n    const msTillMarketClose = getMsTillUTCMarketClose();\n    const msPerMinute = 60000;\n    const minutesTillMarketClose = msTillMarketClose / msPerMinute;\n    return minutesTillMarketClose;\n  };\n\n  const setDueTimes = useCallback(() => {\n    const baseOptions = [2, 5, 10, 15, 30, 45, 60, 90, 120, 240];\n    const minutesTillMarketClose = getMinutesTillMarketClose();\n    const dueTimes: MenuItem[] = [];\n    for (let i = 0; i < baseOptions.length; i++) {\n      if (baseOptions[i] > minutesTillMarketClose) {\n        break;\n      } else {\n        dueTimes.push({\n          display: `${baseOptions[i]} min`,\n          onClick: () => handleDueTime(baseOptions[i]),\n        });\n      }\n    }\n    dueTimes.push({\n      display: 'Max',\n      onClick: () => handleDueTime('Max'),\n    });\n    setDueTimeOptions(dueTimes);\n  }, [handleDueTime]);\n\n  useEffect(() => {\n    if (showModal === true) {\n      setDueTimes();\n    }\n  }, [setDueTimes, showModal]);\n\n  const handleCUSIPEntry = async (e: NewValueParams) => {\n    try {\n      const data = await getProductbySearch({\n        searchOptions: {\n          searchCriteriaList: [\n            {\n              key: 'productGeneral.cusip',\n              value: [e.newValue],\n              operation: 'IN',\n            },\n          ],\n        },\n      }).unwrap();\n      if (data && data[0] && data[0].productId) {\n        updateItems(e, {\n          description: data[0].productGeneral.structureNameInternal ?? 'NA',\n          id: data[0].productId,\n        });\n      } else {\n        updateItems(e);\n      }\n    } catch (error) {\n      return;\n    }\n  };\n\n  const handleRFQCount = (api: GridApi) => {\n    if (api) {\n      const rowData: RFQRequest[] = [];\n      api.forEachNode((node) => rowData.push(node.data));\n      const quantities = rowData.filter((row: RFQRequest) => row.quantity);\n      setRFQCount(quantities.length);\n      setModalErrorMessage(undefined);\n    }\n  };\n\n  const RFQModalColumns = getRFQModalColumns(handleCUSIPEntry, handleRFQCount);\n\n  const updateItems = (\n    e: NewValueParams,\n    product?: {\n      description: string;\n      id: string;\n    }\n  ): void => {\n    const RFQRowData: RFQRequest = e.data;\n    if (product) {\n      RFQRowData.description = product.description;\n      RFQRowData.productId = product.id;\n    } else {\n      RFQRowData.description = 'Invalid CUSIP';\n      RFQRowData.productId = null;\n      RFQRowData.quantity = null;\n      handleRFQCount(e.api);\n    }\n    e.api.applyTransaction({ update: [RFQRowData] });\n    if (e.node) {\n      e.api.refreshCells({ rowNodes: [e.node], force: true });\n    }\n  };\n\n  const calculateEndTime = (dueTime: DueTimeType, now: Date) => {\n    let endTime;\n    if (dueTime === 'Max') {\n      const marketCloseAtUTC = new Date().setUTCHours(\n        UTC_MARKET_CLOSE_HOUR,\n        0,\n        0,\n        0\n      );\n      endTime = new Date(marketCloseAtUTC).toISOString();\n    } else if (dueTime) {\n      endTime = addMinutes(now, dueTime).toISOString();\n    }\n    return endTime;\n  };\n\n  const handleSubmit = async () => {\n    if (!gridApi || !dueTime) {\n      return;\n    }\n    setSubmitDisabled(true);\n    const rowData: RFQRequest[] = [];\n    gridApi.forEachNode((node) => rowData.push(node.data));\n    const now = new Date();\n    const body: SecondaryRequestForQuote[] = [];\n    const submittedCusips: { cusip: string; productId: string }[] = [];\n    rowData.forEach((RFQ, i) => {\n      if (\n        !RFQ.productId ||\n        !RFQ.quantity ||\n        new Date(RFQ.settlement).toString() === 'Invalid Date' ||\n        new Date(RFQ.settlement) < now\n      ) {\n        return;\n      }\n      submittedCusips.push({ cusip: RFQ.cusip, productId: RFQ.productId });\n      const request: SecondaryRequestForQuote = {\n        productIdentifier: {\n          productId: RFQ.productId,\n        },\n        quantity: RFQ.quantity,\n        requestType: RFQ.side,\n        // TODO: change due time name?\n        endTime: calculateEndTime(dueTime, now),\n        settlementTimestamp: new Date(RFQ.settlement).toISOString(),\n      };\n      body.push(request);\n    });\n\n    try {\n      const createRFQResponse = await createRFQs({ body }).unwrap();\n      setNewCreatedRFQs(createRFQResponse);\n      if (myRFQs) {\n        dispatch(\n          secondariesSlice.actions.setMyRFQs([...createRFQResponse, ...myRFQs])\n        );\n      } else {\n        dispatch(secondariesSlice.actions.setMyRFQs(createRFQResponse));\n      }\n      handleMessage(createRFQResponse);\n    } catch (error) {\n      handleMessage();\n    }\n  };\n\n  const handleMessage = (data?: SecondaryRequestForQuote[]) => {\n    if (gridApi) {\n      const rowData: RFQRequest[] = [];\n      gridApi.forEachNode((node) => rowData.push(node.data));\n      if (data && data.length > 0) {\n        dispatch(\n          secondariesSlice.actions.setMessageObject({\n            title: `Security ${\n              data[0].productIdentifier?.securityIdentifierValue\n            } ${\n              data.length > 1\n                ? `and ${data.length - 1} other${data.length > 2 ? 's' : ''}`\n                : ''\n            } successfully submitted as request for quote.`,\n            messageType: 'success',\n            isMessageShowing: true,\n          })\n        );\n        setShowModal(false);\n        setRFQCount(0);\n        setDueTime(null);\n        setModalErrorMessage(undefined);\n      } else {\n        dispatch(\n          secondariesSlice.actions.setMessageObject({\n            title: `Unable to submit ${\n              RFQCount > 1 ? `${RFQCount} securities` : 'security'\n            } as request for quote.`,\n            description: 'Please verify and resubmit or cancel.',\n            messageType: 'error',\n            isMessageShowing: true,\n          })\n        );\n        setModalErrorMessage(\n          'Unable to submit those securities. Verify and resubmit or cancel.'\n        );\n      }\n    }\n    setSubmitDisabled(false);\n  };\n\n  const getDueTimePlaceholder = () => {\n    let placeholder = 'Select';\n    if (dueTime === 'Max') {\n      placeholder = 'Max';\n    } else if (dueTime) {\n      placeholder = `${dueTime} min`;\n    }\n    return placeholder;\n  };\n\n  const addRows = (api: GridApi | null) => {\n    if (api) {\n      const RFQRequests: RFQRequest[] = [];\n      for (let i = rowCount; i < rowCount + 10; i++) {\n        RFQRequests.push({\n          id: i,\n          cusip: '',\n          description: null,\n          side: 'BWIC',\n          quantity: null,\n          productId: null,\n          settlement: addDays(new Date(), 2).toLocaleDateString(),\n        });\n      }\n      api.applyTransaction({ add: RFQRequests });\n      setRowCount(rowCount + 10);\n    }\n  };\n\n  return (\n    <SecondariesModal\n      id=\"rfq-submit-modal\"\n      title={'REQUEST FOR QUOTE'}\n      showModal={showModal}\n      handleOnClose={() => {\n        setShowModal(false);\n        setRFQCount(0);\n        setDueTime(null);\n        setModalErrorMessage(undefined);\n      }}\n      submitAction={{\n        text: `SUBMIT ${RFQCount > 0 ? `(${RFQCount})` : ''}`,\n        onClick: () => handleSubmit(),\n      }}\n      disableSubmit={!dueTime || RFQCount < 1 || submitDisabled}\n      errorMessage={modalErrorMessage}\n    >\n      <DropdownRow>\n        <DropdownButton\n          items={dueTimeOptions}\n          header={'Due Time'}\n          placeholder={getDueTimePlaceholder()}\n          variant={'tertiary'}\n        />\n      </DropdownRow>\n      <RFQGrid>\n        <AGGridTable\n          getRowNodeId={(data: RFQRequest) => data.id.toString()}\n          gridOptions={{\n            onGridReady: (e) => {\n              setGridApi(e.api);\n              addRows(e.api);\n            },\n            rowHeight: 32,\n            headerHeight: 48,\n            suppressHorizontalScroll: true,\n            columnDefs: RFQModalColumns,\n            getRowNodeId: (data) => data.id,\n            stopEditingWhenCellsLoseFocus: true,\n            rowClassRules: {\n              'grid-row-even': (e: RowClassParams) => e.rowIndex % 2 === 0,\n              'grid-row-odd': (e: RowClassParams) => e.rowIndex % 2 !== 0,\n            },\n          }}\n        />\n      </RFQGrid>\n      <BottomActionRow>\n        <AddRowButton variant=\"secondary\" onClick={() => addRows(gridApi)}>\n          <PlusIcon iconCode=\"plus\" />\n          Add 10 More Rows\n        </AddRowButton>\n      </BottomActionRow>\n      <Message\n        title={messageObject.title}\n        showMessage={messageObject.isMessageShowing}\n        setShowMessage={(showMessage: boolean) =>\n          dispatch(secondariesSlice.actions.setIsMessageShowing(showMessage))\n        }\n        messageType={messageObject.messageType}\n      />\n    </SecondariesModal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}