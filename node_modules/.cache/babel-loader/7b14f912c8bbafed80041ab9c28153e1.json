{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventDetail/EventDetail.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport React, { useEffect, useState } from 'react';\nimport { EventDataHeader } from './EventDataHeader';\nimport { selectUsername, useAppSelector, useGetEmailTemplateAndRecipientsUsingGetQuery } from '@luma-fe-workspace/redux';\nimport { EventContainer, EventContent, PreviewEmailContent, MoreInfoContent, EmailPills } from './EventDetail.style';\nimport { EventDetailAccordion } from './EventDetailAccordion';\nimport { ProductDetails } from './ProductDetails';\nimport { SelectValue } from './SelectValue';\nimport { EventEmail } from './EventEmail';\nimport { EventDataFooter } from './EventDataFooter';\nimport { Pill } from '../Pill';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let LevelSource;\n\n(function (LevelSource) {\n  LevelSource[\"CONFIRMED\"] = \"Confirmed\";\n  LevelSource[\"LUMA\"] = \"Luma\";\n  LevelSource[\"ISSUER\"] = \"Issuer\";\n})(LevelSource || (LevelSource = {}));\n\n/**\n * Base component to display all of the information associated with the event.\n * @param {boolean} isOpen - Determines if the EventDetails is currently open.\n * @param {EventProductData} productData - the product data\n * @returns {React.ReactNode} the EventDetail.\n. */\nexport const EventDetail = ({\n  isOpen,\n  productData,\n  closeDrawer: _closeDrawer = () => {\n    /* do nothing */\n  }\n}) => {\n  _s();\n\n  const userName = useAppSelector(selectUsername);\n  const [activeButton, setActiveButton] = useState('Preview Email');\n  const [emailRecipientsTo, setEmailRecipientsTo] = useState([]);\n  const [emailRecipientsCC, setEmailRecipientsCC] = useState([]);\n  const [emailRecipientsBCC, setEmailRecipientsBCC] = useState([]);\n  const [templateKey] = useState('singleEventNotification');\n  const [selectedValue, setSelectedValue] = useState({\n    type: LevelSource.CONFIRMED,\n    value: ''\n  });\n  const {\n    data: emailData\n  } = useGetEmailTemplateAndRecipientsUsingGetQuery({\n    templateKey: templateKey\n  });\n  useEffect(() => {\n    var _emailData$, _recipients$filter$ma, _recipients$filter$ma2, _recipients$filter$ma3;\n\n    const recipients = emailData == null ? void 0 : (_emailData$ = emailData[0]) == null ? void 0 : _emailData$.recipients;\n    setEmailRecipientsTo(((_recipients$filter$ma = recipients == null ? void 0 : recipients.filter(x => (x == null ? void 0 : x.email) !== undefined && x.recipientType === 'to').map(x => {\n      var _x$email;\n\n      return (_x$email = x == null ? void 0 : x.email) != null ? _x$email : '';\n    })) != null ? _recipients$filter$ma : []).concat([userName]));\n    setEmailRecipientsCC((_recipients$filter$ma2 = recipients == null ? void 0 : recipients.filter(x => (x == null ? void 0 : x.email) !== undefined && x.recipientType === 'cc').map(x => {\n      var _x$email2;\n\n      return (_x$email2 = x == null ? void 0 : x.email) != null ? _x$email2 : '';\n    })) != null ? _recipients$filter$ma2 : []);\n    setEmailRecipientsBCC((_recipients$filter$ma3 = recipients == null ? void 0 : recipients.filter(x => (x == null ? void 0 : x.email) !== undefined && x.recipientType === 'bcc').map(x => {\n      var _x$email3;\n\n      return (_x$email3 = x == null ? void 0 : x.email) != null ? _x$email3 : '';\n    })) != null ? _recipients$filter$ma3 : []);\n  }, [userName, emailData]);\n\n  if (productData && isOpen) {\n    var _emailData$at;\n\n    return /*#__PURE__*/_jsxDEV(EventContainer, {\n      children: [/*#__PURE__*/_jsxDEV(EventDataHeader, {\n        activeButton: activeButton,\n        setActiveButton: setActiveButton,\n        productDetailsData: productData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n        children: activeButton === 'Preview Email' ? /*#__PURE__*/_jsxDEV(PreviewEmailContent, {\n          children: [/*#__PURE__*/_jsxDEV(EventDetailAccordion, {\n            header: \"Recipients\",\n            children: /*#__PURE__*/_jsxDEV(EmailPills, {\n              children: [emailRecipientsTo.map(email => /*#__PURE__*/_jsxDEV(Pill, {\n                text: email\n              }, email, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this)), emailRecipientsCC.map(email => /*#__PURE__*/_jsxDEV(Pill, {\n                text: email\n              }, email, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this)), emailRecipientsBCC.map(email => /*#__PURE__*/_jsxDEV(Pill, {\n                text: email\n              }, email, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(EventDetailAccordion, {\n            header: \"Select Value*\",\n            status: productData.confirmationStatus,\n            children: /*#__PURE__*/_jsxDEV(SelectValue, {\n              selectedValue: selectedValue,\n              setSelectedValue: setSelectedValue,\n              productData: productData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(EventDetailAccordion, {\n            header: \"Email Preview\",\n            borderBottom: \"0\",\n            children: /*#__PURE__*/_jsxDEV(EventEmail, {\n              eventData: productData,\n              payout: selectedValue.value,\n              template: emailData == null ? void 0 : (_emailData$at = emailData.at(0)) == null ? void 0 : _emailData$at.template\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(MoreInfoContent, {\n          children: /*#__PURE__*/_jsxDEV(ProductDetails, {\n            id: productData.productIdentifier\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EventDataFooter, {\n        emailRecipientsTo: emailRecipientsTo,\n        emailRecipientsCC: emailRecipientsCC,\n        emailRecipientsBCC: emailRecipientsBCC,\n        eventData: productData,\n        payout: selectedValue.value,\n        closeDrawer: _closeDrawer,\n        templateKey: templateKey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(EventDetail, \"oEg54kf37m0uKdQSykXsrwhe76Y=\", false, function () {\n  return [useAppSelector, useGetEmailTemplateAndRecipientsUsingGetQuery];\n});\n\n_c = EventDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventDetail\");","map":{"version":3,"names":["React","useEffect","useState","EventDataHeader","selectUsername","useAppSelector","useGetEmailTemplateAndRecipientsUsingGetQuery","EventContainer","EventContent","PreviewEmailContent","MoreInfoContent","EmailPills","EventDetailAccordion","ProductDetails","SelectValue","EventEmail","EventDataFooter","Pill","LevelSource","EventDetail","isOpen","productData","closeDrawer","userName","activeButton","setActiveButton","emailRecipientsTo","setEmailRecipientsTo","emailRecipientsCC","setEmailRecipientsCC","emailRecipientsBCC","setEmailRecipientsBCC","templateKey","selectedValue","setSelectedValue","type","CONFIRMED","value","data","emailData","recipients","filter","x","email","undefined","recipientType","map","concat","confirmationStatus","at","template","productIdentifier"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventDetail/EventDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { EventDataHeader } from './EventDataHeader';\nimport {\n  EventProductData,\n  selectUsername,\n  useAppSelector,\n  useGetEmailTemplateAndRecipientsUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport {\n  EventContainer,\n  EventContent,\n  PreviewEmailContent,\n  MoreInfoContent,\n  EmailPills,\n} from './EventDetail.style';\nimport { EventDetailAccordion } from './EventDetailAccordion';\nimport { ProductDetails } from './ProductDetails';\nimport { SelectValue } from './SelectValue';\nimport { EventEmail } from './EventEmail';\nimport { EventDataFooter } from './EventDataFooter';\nimport { Pill } from '../Pill';\n\nexport interface EventDetailProps {\n  isOpen: boolean;\n  productData: EventProductData;\n  closeDrawer?: () => void;\n}\n\nexport enum LevelSource {\n  CONFIRMED = 'Confirmed',\n  LUMA = 'Luma',\n  ISSUER = 'Issuer',\n}\nexport interface SelectedValue {\n  type: LevelSource;\n  value: string;\n}\n\n/**\n * Base component to display all of the information associated with the event.\n * @param {boolean} isOpen - Determines if the EventDetails is currently open.\n * @param {EventProductData} productData - the product data\n * @returns {React.ReactNode} the EventDetail.\n. */\nexport const EventDetail: React.FC<EventDetailProps> = ({\n  isOpen,\n  productData,\n  closeDrawer = () => {\n    /* do nothing */\n  },\n}: EventDetailProps): React.ReactElement | null => {\n  const userName = useAppSelector(selectUsername);\n\n  const [activeButton, setActiveButton] = useState('Preview Email');\n  const [emailRecipientsTo, setEmailRecipientsTo] = useState<string[]>([]);\n  const [emailRecipientsCC, setEmailRecipientsCC] = useState<string[]>([]);\n  const [emailRecipientsBCC, setEmailRecipientsBCC] = useState<string[]>([]);\n  const [templateKey] = useState<string>('singleEventNotification');\n  const [selectedValue, setSelectedValue] = useState<SelectedValue>({\n    type: LevelSource.CONFIRMED,\n    value: '',\n  });\n\n  const { data: emailData } = useGetEmailTemplateAndRecipientsUsingGetQuery({\n    templateKey: templateKey,\n  });\n\n  useEffect(() => {\n    const recipients = emailData?.[0]?.recipients;\n\n    setEmailRecipientsTo(\n      (\n        recipients\n          ?.filter((x) => x?.email !== undefined && x.recipientType === 'to')\n          .map((x) => x?.email ?? '') ?? []\n      ).concat([userName])\n    );\n    setEmailRecipientsCC(\n      recipients\n        ?.filter((x) => x?.email !== undefined && x.recipientType === 'cc')\n        .map((x) => x?.email ?? '') ?? []\n    );\n    setEmailRecipientsBCC(\n      recipients\n        ?.filter((x) => x?.email !== undefined && x.recipientType === 'bcc')\n        .map((x) => x?.email ?? '') ?? []\n    );\n  }, [userName, emailData]);\n\n  if (productData && isOpen) {\n    return (\n      <EventContainer>\n        <EventDataHeader\n          activeButton={activeButton}\n          setActiveButton={setActiveButton}\n          productDetailsData={productData}\n        />\n        <EventContent>\n          {activeButton === 'Preview Email' ? (\n            <PreviewEmailContent>\n              <EventDetailAccordion header=\"Recipients\">\n                <EmailPills>\n                  {emailRecipientsTo.map((email) => (\n                    <Pill text={email} key={email} />\n                  ))}\n                  {emailRecipientsCC.map((email) => (\n                    <Pill text={email} key={email} />\n                  ))}\n                  {emailRecipientsBCC.map((email) => (\n                    <Pill text={email} key={email} />\n                  ))}\n                </EmailPills>\n              </EventDetailAccordion>\n              <EventDetailAccordion\n                header=\"Select Value*\"\n                status={productData.confirmationStatus}\n              >\n                <SelectValue\n                  selectedValue={selectedValue}\n                  setSelectedValue={setSelectedValue}\n                  productData={productData}\n                />\n              </EventDetailAccordion>\n              <EventDetailAccordion header=\"Email Preview\" borderBottom=\"0\">\n                <EventEmail\n                  eventData={productData}\n                  payout={selectedValue.value}\n                  template={emailData?.at(0)?.template}\n                />\n              </EventDetailAccordion>\n            </PreviewEmailContent>\n          ) : (\n            <MoreInfoContent>\n              <ProductDetails id={productData.productIdentifier} />\n            </MoreInfoContent>\n          )}\n        </EventContent>\n        <EventDataFooter\n          emailRecipientsTo={emailRecipientsTo}\n          emailRecipientsCC={emailRecipientsCC}\n          emailRecipientsBCC={emailRecipientsBCC}\n          eventData={productData}\n          payout={selectedValue.value}\n          closeDrawer={closeDrawer}\n          templateKey={templateKey}\n        />\n      </EventContainer>\n    );\n  } else {\n    return null;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}