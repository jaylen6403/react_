{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/creationhub/src/components/PricingForm/groups/ConfigurableFormGroups/formElements/number/NumberTextEntry.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { LumaTextEntry } from '@luma-fe-workspace/design-system';\nimport { useState, useEffect } from 'react';\nimport { createDataTestId } from '../FormField';\nimport { parseNumericValuetoGroupedString, parseStringToNumber, clearGroupedString, parseNumberStringToGroupedString, getNumericValue } from './NumberTextEntryUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function NumberTextEntry({\n  label,\n  isDisabled,\n  value,\n  onChange,\n  computationMode,\n  fieldProps,\n  paramName,\n  onValidation,\n  hasError\n}) {\n  _s();\n\n  const [fieldValue, setFieldValue] = useState(parseNumericValuetoGroupedString(value.value));\n  useEffect(() => {\n    parseNumericValuetoGroupedString(value.value);\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(LumaTextEntry, Object.assign({\n    label: label,\n    type: \"text\",\n    disabled: isDisabled,\n    readOnly: false,\n    value: fieldValue,\n    onChange: e => {\n      const numberValue = parseStringToNumber(e.target.value);\n\n      if (!Number.isNaN(numberValue)) {\n        const newNumberValue = clearGroupedString(e.target.value);\n        setFieldValue(parseNumberStringToGroupedString(newNumberValue));\n      }\n    },\n    onBlur: () => {\n      const stringValue = clearGroupedString(fieldValue);\n      const param = getNumericValue(stringValue, computationMode);\n      onChange(param);\n      onValidation(paramName, param);\n    },\n    error: hasError,\n    sizeVariant: \"large\",\n    \"data-testid\": createDataTestId('input', fieldProps.id)\n  }, fieldProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NumberTextEntry, \"asjAOWlJmNAVq29hmlB0H5gFgBs=\");\n\n_c = NumberTextEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberTextEntry\");","map":{"version":3,"names":["LumaTextEntry","useState","useEffect","createDataTestId","parseNumericValuetoGroupedString","parseStringToNumber","clearGroupedString","parseNumberStringToGroupedString","getNumericValue","NumberTextEntry","label","isDisabled","value","onChange","computationMode","fieldProps","paramName","onValidation","hasError","fieldValue","setFieldValue","e","numberValue","target","Number","isNaN","newNumberValue","stringValue","param","id"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/creationhub/src/components/PricingForm/groups/ConfigurableFormGroups/formElements/number/NumberTextEntry.tsx"],"sourcesContent":["import { LumaTextEntry } from '@luma-fe-workspace/design-system';\nimport {\n  ParamValue,\n  NumericValue,\n  ComputationMode,\n  ParamName,\n} from '@luma-fe-workspace/redux';\nimport { useState, useEffect } from 'react';\nimport { createDataTestId } from '../FormField';\nimport {\n  parseNumericValuetoGroupedString,\n  parseStringToNumber,\n  clearGroupedString,\n  parseNumberStringToGroupedString,\n  getNumericValue,\n} from './NumberTextEntryUtils';\n\ninterface NumberTextEntryProps {\n  value: NumericValue;\n  onChange: (newValue: ParamValue | undefined) => void;\n  onValidation: (\n    paramName: ParamName,\n    newValue: ParamValue | undefined\n  ) => void;\n  label?: string;\n  isDisabled: boolean;\n  computationMode: ComputationMode;\n  fieldProps: { id: string };\n  paramName: string;\n  hasError: boolean;\n}\n\nexport function NumberTextEntry({\n  label,\n  isDisabled,\n  value,\n  onChange,\n  computationMode,\n  fieldProps,\n  paramName,\n  onValidation,\n  hasError,\n}: NumberTextEntryProps) {\n  const [fieldValue, setFieldValue] = useState(\n    parseNumericValuetoGroupedString(value.value)\n  );\n  useEffect(() => {\n    parseNumericValuetoGroupedString(value.value);\n  }, [value]);\n\n  return (\n    <LumaTextEntry\n      label={label}\n      type=\"text\"\n      disabled={isDisabled}\n      readOnly={false}\n      value={fieldValue}\n      onChange={(e) => {\n        const numberValue = parseStringToNumber(e.target.value);\n        if (!Number.isNaN(numberValue)) {\n          const newNumberValue = clearGroupedString(e.target.value);\n          setFieldValue(parseNumberStringToGroupedString(newNumberValue));\n        }\n      }}\n      onBlur={() => {\n        const stringValue = clearGroupedString(fieldValue);\n        const param = getNumericValue(stringValue, computationMode);\n        onChange(param);\n        onValidation(paramName, param);\n      }}\n      error={hasError}\n      sizeVariant=\"large\"\n      data-testid={createDataTestId('input', fieldProps.id)}\n      {...fieldProps}\n    />\n  );\n}\n"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,kCAA9B;AAOA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SACEC,gCADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,gCAJF,EAKEC,eALF,QAMO,wBANP;;AAuBA,OAAO,SAASC,eAAT,CAAyB;EAC9BC,KAD8B;EAE9BC,UAF8B;EAG9BC,KAH8B;EAI9BC,QAJ8B;EAK9BC,eAL8B;EAM9BC,UAN8B;EAO9BC,SAP8B;EAQ9BC,YAR8B;EAS9BC;AAT8B,CAAzB,EAUkB;EAAA;;EACvB,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAC1CG,gCAAgC,CAACQ,KAAK,CAACA,KAAP,CADU,CAA5C;EAGAV,SAAS,CAAC,MAAM;IACdE,gCAAgC,CAACQ,KAAK,CAACA,KAAP,CAAhC;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAIA,oBACE,QAAC,aAAD;IACE,KAAK,EAAEF,KADT;IAEE,IAAI,EAAC,MAFP;IAGE,QAAQ,EAAEC,UAHZ;IAIE,QAAQ,EAAE,KAJZ;IAKE,KAAK,EAAEQ,UALT;IAME,QAAQ,EAAGE,CAAD,IAAO;MACf,MAAMC,WAAW,GAAGjB,mBAAmB,CAACgB,CAAC,CAACE,MAAF,CAASX,KAAV,CAAvC;;MACA,IAAI,CAACY,MAAM,CAACC,KAAP,CAAaH,WAAb,CAAL,EAAgC;QAC9B,MAAMI,cAAc,GAAGpB,kBAAkB,CAACe,CAAC,CAACE,MAAF,CAASX,KAAV,CAAzC;QACAQ,aAAa,CAACb,gCAAgC,CAACmB,cAAD,CAAjC,CAAb;MACD;IACF,CAZH;IAaE,MAAM,EAAE,MAAM;MACZ,MAAMC,WAAW,GAAGrB,kBAAkB,CAACa,UAAD,CAAtC;MACA,MAAMS,KAAK,GAAGpB,eAAe,CAACmB,WAAD,EAAcb,eAAd,CAA7B;MACAD,QAAQ,CAACe,KAAD,CAAR;MACAX,YAAY,CAACD,SAAD,EAAYY,KAAZ,CAAZ;IACD,CAlBH;IAmBE,KAAK,EAAEV,QAnBT;IAoBE,WAAW,EAAC,OApBd;IAqBE,eAAaf,gBAAgB,CAAC,OAAD,EAAUY,UAAU,CAACc,EAArB;EArB/B,GAsBMd,UAtBN;IAAA;IAAA;IAAA;EAAA,QADF;AA0BD;;GA5CeN,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}