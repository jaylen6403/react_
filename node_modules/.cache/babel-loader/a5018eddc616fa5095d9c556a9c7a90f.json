{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/CurrencyDropdown/CurrencyDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { CurrencyDropdownWrapper } from './CurrencyDropdown.styles';\nimport { LumaSingleDropDown } from '@luma-fe-workspace/design-system';\nimport { lifecycleSlice, useAppDispatch, useAppSelector, selectLifecycleEventDisplayCurrency } from '@luma-fe-workspace/redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCurrencySymbol = ISOCode => {\n  var _numberFormat$formatT, _numberFormat$formatT2;\n\n  const numberFormat = Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: ISOCode\n  });\n  const currencySymbol = (_numberFormat$formatT = numberFormat.formatToParts()) == null ? void 0 : (_numberFormat$formatT2 = _numberFormat$formatT.find(part => part.type === 'currency')) == null ? void 0 : _numberFormat$formatT2.value;\n  return currencySymbol;\n};\n\nconst getCurrencyDropdownItemLabel = ISOCode => {\n  const currencySymbol = getCurrencySymbol(ISOCode);\n  const dropdownItemLabel = // This check avoids cases like `CHF (CHF)`\n  currencySymbol !== ISOCode ? `${currencySymbol} (${ISOCode})` : `(${ISOCode})`;\n  return dropdownItemLabel;\n};\n\nexport const CurrencyDropdown = ({\n  currencyDropdownOptions\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const displayCurrency = useAppSelector(selectLifecycleEventDisplayCurrency);\n  const currencyDropdownItems = currencyDropdownOptions.map(ISOCode => {\n    return {\n      label: getCurrencyDropdownItemLabel(ISOCode),\n      value: ISOCode,\n      iconCode: displayCurrency === ISOCode ? 'check' : undefined\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(CurrencyDropdownWrapper, {\n    children: /*#__PURE__*/_jsxDEV(LumaSingleDropDown, {\n      id: 'currencyDropdown',\n      name: 'displayCurrency' // Required property\n      ,\n      items: currencyDropdownItems,\n      fullWidth: true,\n      readOnly: true,\n      defaultSelectedItem: {\n        label: getCurrencyDropdownItemLabel(displayCurrency),\n        value: displayCurrency,\n        iconCode: 'check'\n      },\n      placeholder: 'Display CCY:',\n      onChange: selectedItem => {\n        currencyDropdownItems.forEach(item => item.iconCode = undefined);\n\n        if (selectedItem) {\n          dispatch(lifecycleSlice.actions.setDisplayCurrency(selectedItem.value));\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyDropdown, \"zdxXut010VY7fGu0HQuXyr5GyVo=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n\n_c = CurrencyDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyDropdown\");","map":{"version":3,"names":["CurrencyDropdownWrapper","LumaSingleDropDown","lifecycleSlice","useAppDispatch","useAppSelector","selectLifecycleEventDisplayCurrency","getCurrencySymbol","ISOCode","numberFormat","Intl","NumberFormat","style","currency","currencySymbol","formatToParts","find","part","type","value","getCurrencyDropdownItemLabel","dropdownItemLabel","CurrencyDropdown","currencyDropdownOptions","dispatch","displayCurrency","currencyDropdownItems","map","label","iconCode","undefined","selectedItem","forEach","item","actions","setDisplayCurrency"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/CurrencyDropdown/CurrencyDropdown.tsx"],"sourcesContent":["import { DataItemProps } from '@luma-fe-workspace/design-system';\nimport { CurrencyDropdownWrapper } from './CurrencyDropdown.styles';\nimport { LumaSingleDropDown } from '@luma-fe-workspace/design-system';\nimport {\n  lifecycleSlice,\n  useAppDispatch,\n  useAppSelector,\n  selectLifecycleEventDisplayCurrency,\n} from '@luma-fe-workspace/redux';\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\n\ninterface CurrencyDropdownProps {\n  currencyDropdownOptions: string[];\n}\n\nconst getCurrencySymbol = (ISOCode: string) => {\n  const numberFormat = Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: ISOCode,\n  });\n  const currencySymbol = numberFormat\n    .formatToParts()\n    ?.find((part) => part.type === 'currency')?.value;\n  return currencySymbol;\n};\n\nconst getCurrencyDropdownItemLabel = (ISOCode: string) => {\n  const currencySymbol = getCurrencySymbol(ISOCode);\n  const dropdownItemLabel =\n    // This check avoids cases like `CHF (CHF)`\n    currencySymbol !== ISOCode\n      ? `${currencySymbol} (${ISOCode})`\n      : `(${ISOCode})`;\n  return dropdownItemLabel;\n};\n\nexport const CurrencyDropdown = ({\n  currencyDropdownOptions,\n}: CurrencyDropdownProps) => {\n  const dispatch = useAppDispatch();\n  const displayCurrency = useAppSelector(selectLifecycleEventDisplayCurrency);\n  const currencyDropdownItems = currencyDropdownOptions.map((ISOCode) => {\n    return {\n      label: getCurrencyDropdownItemLabel(ISOCode),\n      value: ISOCode,\n      iconCode: displayCurrency === ISOCode ? ('check' as IconName) : undefined,\n    };\n  });\n\n  return (\n    <CurrencyDropdownWrapper>\n      <LumaSingleDropDown\n        id={'currencyDropdown'}\n        name={'displayCurrency'} // Required property\n        items={currencyDropdownItems}\n        fullWidth={true}\n        readOnly={true}\n        defaultSelectedItem={{\n          label: getCurrencyDropdownItemLabel(displayCurrency),\n          value: displayCurrency,\n          iconCode: 'check',\n        }}\n        placeholder={'Display CCY:'}\n        onChange={(selectedItem: DataItemProps | null) => {\n          currencyDropdownItems.forEach(\n            (item: DataItemProps) => (item.iconCode = undefined)\n          );\n          if (selectedItem) {\n            dispatch(\n              lifecycleSlice.actions.setDisplayCurrency(\n                selectedItem.value as string\n              )\n            );\n          }\n        }}\n      />\n    </CurrencyDropdownWrapper>\n  );\n};\n"],"mappings":";;;AACA,SAASA,uBAAT,QAAwC,2BAAxC;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,mCAJF,QAKO,0BALP;;;AAYA,MAAMC,iBAAiB,GAAIC,OAAD,IAAqB;EAAA;;EAC7C,MAAMC,YAAY,GAAGC,IAAI,CAACC,YAAL,CAAkB,OAAlB,EAA2B;IAC9CC,KAAK,EAAE,UADuC;IAE9CC,QAAQ,EAAEL;EAFoC,CAA3B,CAArB;EAIA,MAAMM,cAAc,4BAAGL,YAAY,CAChCM,aADoB,EAAH,+CAAG,sBAEnBC,IAFmB,CAEbC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAc,UAFV,CAAH,qBAAG,uBAEuBC,KAF9C;EAGA,OAAOL,cAAP;AACD,CATD;;AAWA,MAAMM,4BAA4B,GAAIZ,OAAD,IAAqB;EACxD,MAAMM,cAAc,GAAGP,iBAAiB,CAACC,OAAD,CAAxC;EACA,MAAMa,iBAAiB,GACrB;EACAP,cAAc,KAAKN,OAAnB,GACK,GAAEM,cAAe,KAAIN,OAAQ,GADlC,GAEK,IAAGA,OAAQ,GAJlB;EAKA,OAAOa,iBAAP;AACD,CARD;;AAUA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;EAC/BC;AAD+B,CAAD,KAEH;EAAA;;EAC3B,MAAMC,QAAQ,GAAGpB,cAAc,EAA/B;EACA,MAAMqB,eAAe,GAAGpB,cAAc,CAACC,mCAAD,CAAtC;EACA,MAAMoB,qBAAqB,GAAGH,uBAAuB,CAACI,GAAxB,CAA6BnB,OAAD,IAAa;IACrE,OAAO;MACLoB,KAAK,EAAER,4BAA4B,CAACZ,OAAD,CAD9B;MAELW,KAAK,EAAEX,OAFF;MAGLqB,QAAQ,EAAEJ,eAAe,KAAKjB,OAApB,GAA+B,OAA/B,GAAsDsB;IAH3D,CAAP;EAKD,CAN6B,CAA9B;EAQA,oBACE,QAAC,uBAAD;IAAA,uBACE,QAAC,kBAAD;MACE,EAAE,EAAE,kBADN;MAEE,IAAI,EAAE,iBAFR,CAE2B;MAF3B;MAGE,KAAK,EAAEJ,qBAHT;MAIE,SAAS,EAAE,IAJb;MAKE,QAAQ,EAAE,IALZ;MAME,mBAAmB,EAAE;QACnBE,KAAK,EAAER,4BAA4B,CAACK,eAAD,CADhB;QAEnBN,KAAK,EAAEM,eAFY;QAGnBI,QAAQ,EAAE;MAHS,CANvB;MAWE,WAAW,EAAE,cAXf;MAYE,QAAQ,EAAGE,YAAD,IAAwC;QAChDL,qBAAqB,CAACM,OAAtB,CACGC,IAAD,IAA0BA,IAAI,CAACJ,QAAL,GAAgBC,SAD5C;;QAGA,IAAIC,YAAJ,EAAkB;UAChBP,QAAQ,CACNrB,cAAc,CAAC+B,OAAf,CAAuBC,kBAAvB,CACEJ,YAAY,CAACZ,KADf,CADM,CAAR;QAKD;MACF;IAvBH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CA1CM;;GAAMG,gB;UAGMlB,c,EACOC,c;;;KAJbiB,gB"},"metadata":{},"sourceType":"module"}