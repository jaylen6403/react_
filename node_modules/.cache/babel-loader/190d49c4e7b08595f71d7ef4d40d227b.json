{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaChip/LumaChip.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { useEffect, useState } from 'react';\nimport { RemoveIcon, Input, LabelPart, Unit, EntryPart, ErrorMessage, ChipContainer, Icon, Chip } from './LumaChip.styles';\nimport { LumaIcon } from '../LumaIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar StateEnum;\n\n(function (StateEnum) {\n  StateEnum[\"locked\"] = \"locked\";\n  StateEnum[\"removable\"] = \"removable\";\n})(StateEnum || (StateEnum = {}));\n\nexport const LumaChip = ({\n  children,\n  variant: _variant = 'primary',\n  state: _state = StateEnum.locked,\n  disabled: _disabled = false,\n  sizeVariant: _sizeVariant = 'regular',\n  entry: _entry = false,\n  iconCode,\n  onRemove,\n  onChange,\n  onBlur,\n  value,\n  unit: _unit = '%',\n  error: _error = {\n    hasError: false\n  },\n  entryMaxLength: _entryMaxLength = 3\n}) => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  useEffect(() => {\n    var _value$toString;\n\n    setInputValue((_value$toString = value == null ? void 0 : value.toString()) != null ? _value$toString : '');\n  }, [value]);\n\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    const inputPatternRegex = /^[0-9\\b]+$/;\n\n    if (inputValue === '' || inputPatternRegex.test(inputValue)) {\n      setInputValue(inputValue);\n\n      if (onChange) {\n        onChange(e);\n      }\n    }\n  };\n\n  const calculateInputWidth = inputValue => {\n    const inputLength = inputValue.length;\n    return `${inputLength !== 0 ? inputLength + 1 : 2}ch`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChipContainer, {\n    error: _error,\n    children: [/*#__PURE__*/_jsxDEV(Chip, {\n      sizeVariant: _sizeVariant,\n      children: [/*#__PURE__*/_jsxDEV(LabelPart, {\n        sizeVariant: _sizeVariant,\n        variant: _variant,\n        entry: _entry,\n        children: [_state === StateEnum.removable && /*#__PURE__*/_jsxDEV(RemoveIcon, {\n          onClick: onRemove,\n          \"data-testid\": \"chip-remove\",\n          children: /*#__PURE__*/_jsxDEV(LumaIcon, {\n            iconCode: \"times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), children, iconCode && /*#__PURE__*/_jsxDEV(Icon, {\n          children: /*#__PURE__*/_jsxDEV(LumaIcon, {\n            iconCode: iconCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), _entry && /*#__PURE__*/_jsxDEV(EntryPart, {\n        sizeVariant: _sizeVariant,\n        error: _error,\n        variant: _variant,\n        disabled: _disabled,\n        state: _state,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          maxLength: _entryMaxLength,\n          sizeVariant: _sizeVariant,\n          value: inputValue,\n          error: _error,\n          onChange: handleChange,\n          onBlur: onBlur,\n          style: {\n            width: calculateInputWidth(inputValue)\n          },\n          disabled: _disabled || _state === StateEnum.locked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Unit, {\n          sizeVariant: _sizeVariant,\n          children: inputValue.toString().length > 0 && _unit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), (_error == null ? void 0 : _error.hasError) && (_error == null ? void 0 : _error.errorMessage) && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: _error.errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LumaChip, \"g3WCsqcvSc9WB7w4du2ucRdqd7Y=\");\n\n_c = LumaChip;\n\nvar _c;\n\n$RefreshReg$(_c, \"LumaChip\");","map":{"version":3,"names":["useEffect","useState","RemoveIcon","Input","LabelPart","Unit","EntryPart","ErrorMessage","ChipContainer","Icon","Chip","LumaIcon","StateEnum","LumaChip","children","variant","state","locked","disabled","sizeVariant","entry","iconCode","onRemove","onChange","onBlur","value","unit","error","hasError","entryMaxLength","inputValue","setInputValue","toString","handleChange","e","target","inputPatternRegex","test","calculateInputWidth","inputLength","length","removable","width","errorMessage"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaChip/LumaChip.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  RemoveIcon,\n  Input,\n  LabelPart,\n  Unit,\n  EntryPart,\n  ErrorMessage,\n  ChipContainer,\n  Icon,\n  Chip,\n} from './LumaChip.styles';\nimport { IconCode, LumaIcon } from '../LumaIcon';\n\ntype ChipError = {\n  hasError: boolean;\n  position?: 'bottom' | 'side';\n  errorMessage?: string;\n};\n\nconst enum StateEnum {\n  locked = 'locked',\n  removable = 'removable',\n}\n\nexport interface ChipProps {\n  /**\n   * Children appearing on the left side of the chip.\n   */\n  children: React.ReactNode;\n  /**\n   * Style variant.\n   */\n  variant: 'primary' | 'secondary' | 'tertiary' | 'icon';\n  /**\n   * State of chip.\n   */\n  state: keyof typeof StateEnum;\n  /**\n   * Whether the value part is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Size of chip.\n   */\n  sizeVariant: 'regular' | 'small' | 'icon';\n  /**\n   * Whether the chip should have a value part\n   */\n  entry?: boolean;\n  /**\n   * Code of the icon to be displayed in the chip.\n   */\n  iconCode?: IconCode;\n  /**\n   * Defines action for delete\n   */\n  onRemove?: React.MouseEventHandler<HTMLDivElement>;\n  /**\n   * onChange action\n   */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * onBlur action\n   */\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  /**\n   * Sets a numeric value\n   */\n  value?: number;\n  /**\n   * Value units displayed\n   */\n  unit?: string;\n  /**\n   * Defines error\n   */\n  error?: ChipError;\n  /**\n   * Defines max length of input in entry part\n   */\n  entryMaxLength?: number;\n}\n\nexport const LumaChip = ({\n  children,\n  variant = 'primary',\n  state = StateEnum.locked,\n  disabled = false,\n  sizeVariant = 'regular',\n  entry = false,\n  iconCode,\n  onRemove,\n  onChange,\n  onBlur,\n  value,\n  unit = '%',\n  error = { hasError: false },\n  entryMaxLength = 3,\n}: ChipProps) => {\n  const [inputValue, setInputValue] = useState('');\n  useEffect(() => {\n    setInputValue(value?.toString() ?? '');\n  }, [value]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const inputPatternRegex = /^[0-9\\b]+$/;\n    if (inputValue === '' || inputPatternRegex.test(inputValue)) {\n      setInputValue(inputValue);\n      if (onChange) {\n        onChange(e);\n      }\n    }\n  };\n\n  const calculateInputWidth = (inputValue: string) => {\n    const inputLength = inputValue.length;\n    return `${inputLength !== 0 ? inputLength + 1 : 2}ch`;\n  };\n\n  return (\n    <ChipContainer error={error}>\n      <Chip sizeVariant={sizeVariant}>\n        <LabelPart sizeVariant={sizeVariant} variant={variant} entry={entry}>\n          {state === StateEnum.removable && (\n            <RemoveIcon onClick={onRemove} data-testid=\"chip-remove\">\n              <LumaIcon iconCode=\"times\" />\n            </RemoveIcon>\n          )}\n\n          {children}\n\n          {iconCode && (\n            <Icon>\n              <LumaIcon iconCode={iconCode} />\n            </Icon>\n          )}\n        </LabelPart>\n\n        {entry && (\n          <EntryPart\n            sizeVariant={sizeVariant}\n            error={error}\n            variant={variant}\n            disabled={disabled}\n            state={state}\n          >\n            <Input\n              type=\"text\"\n              maxLength={entryMaxLength}\n              sizeVariant={sizeVariant}\n              value={inputValue}\n              error={error}\n              onChange={handleChange}\n              onBlur={onBlur}\n              style={{\n                width: calculateInputWidth(inputValue),\n              }}\n              disabled={disabled || state === StateEnum.locked}\n            />\n            <Unit sizeVariant={sizeVariant}>\n              {inputValue.toString().length > 0 && unit}\n            </Unit>\n          </EntryPart>\n        )}\n      </Chip>\n      {error?.hasError && error?.errorMessage && (\n        <ErrorMessage>{error.errorMessage}</ErrorMessage>\n      )}\n    </ChipContainer>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}