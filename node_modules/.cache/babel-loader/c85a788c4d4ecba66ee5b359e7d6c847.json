{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"/Users/jchen/Documents/GitHub/luma-fe-workspace/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\";\nconst _excluded = [\"children\", \"variant\", \"disabled\", \"icon\", \"size\", \"dropdown\", \"onClick\", \"split\", \"disabledSplit\", \"type\", \"className\", \"fullWidth\", \"xmark\", \"splitDataTestId\"];\n\nvar _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaButton/LumaButton.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { useEffect, useState, forwardRef } from 'react';\nimport { Root, Button, Split, Xmark } from './LumaButton.styles';\nimport { LumaIcon } from '../LumaIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LumaButton = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s(function LumaButton(componentProps, forwardedRef) {\n  var _getDropdownPropsButt, _getDropdownPropsSpli;\n\n  _s();\n\n  const {\n    children,\n    variant = 'primary',\n    disabled = false,\n    icon,\n    size = 'medium',\n    dropdown = {\n      isDropdown: false,\n      isOpen: false,\n      getToggleButtonProps: function () {\n        throw new Error('Function not implemented.');\n      }\n    },\n    onClick,\n    split = false,\n    disabledSplit = false,\n    type = 'button',\n    className,\n    fullWidth = false,\n    xmark,\n    splitDataTestId = 'button-luma_split'\n  } = componentProps,\n        rest = _objectWithoutPropertiesLoose(componentProps, _excluded);\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  useEffect(() => {\n    setDropdownOpen(dropdown.isOpen);\n  }, [dropdown.isOpen]);\n\n  const getDropdownPropsButtonIfNeeded = () => {\n    if (!split && dropdown.isDropdown) {\n      return dropdown.getToggleButtonProps();\n    }\n\n    return null;\n  };\n\n  const getDropdownPropsSplitIfNeeded = () => {\n    if (split) {\n      return dropdown.getToggleButtonProps();\n    }\n\n    return null;\n  };\n\n  const dropdownPropsButton = (_getDropdownPropsButt = getDropdownPropsButtonIfNeeded()) != null ? _getDropdownPropsButt : {};\n  const dropdownPropsSplit = (_getDropdownPropsSpli = getDropdownPropsSplitIfNeeded()) != null ? _getDropdownPropsSpli : {};\n  return /*#__PURE__*/_jsxDEV(Root, {\n    fullWidth: fullWidth,\n    size: size,\n    dropdown: dropdown,\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(Button, Object.assign({\n      icon: icon,\n      onClick: onClick,\n      variant: variant,\n      size: size,\n      split: split,\n      ref: forwardedRef\n    }, dropdownPropsButton, {\n      type: type,\n      disabled: disabled,\n      fullWidth: fullWidth\n    }, rest, {\n      xmark: xmark,\n      children: [icon == null ? void 0 : icon.iconComponent, children, dropdown.isDropdown && /*#__PURE__*/_jsxDEV(LumaIcon, {\n        iconCode: dropdownOpen ? 'angle-up' : 'angle-down'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), xmark && /*#__PURE__*/_jsxDEV(Xmark, {\n        children: /*#__PURE__*/_jsxDEV(LumaIcon, {\n          iconCode: \"xmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), split && /*#__PURE__*/_jsxDEV(Split, Object.assign({\n      variant: variant,\n      disabled: disabledSplit\n    }, dropdownPropsSplit, {\n      \"data-testid\": splitDataTestId,\n      children: /*#__PURE__*/_jsxDEV(LumaIcon, {\n        iconCode: dropdownOpen ? 'angle-up' : 'angle-down'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 7\n  }, this);\n}, \"htwsPlR08nVbejouNDN7rkObmHY=\")), \"htwsPlR08nVbejouNDN7rkObmHY=\");\n_c2 = LumaButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LumaButton$forwardRef\");\n$RefreshReg$(_c2, \"LumaButton\");","map":{"version":3,"names":["useEffect","useState","forwardRef","Root","Button","Split","Xmark","LumaIcon","LumaButton","componentProps","forwardedRef","children","variant","disabled","icon","size","dropdown","isDropdown","isOpen","getToggleButtonProps","Error","onClick","split","disabledSplit","type","className","fullWidth","xmark","splitDataTestId","rest","dropdownOpen","setDropdownOpen","getDropdownPropsButtonIfNeeded","getDropdownPropsSplitIfNeeded","dropdownPropsButton","dropdownPropsSplit","iconComponent"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components-Luma/components/LumaButton/LumaButton.tsx"],"sourcesContent":["import {\n  useEffect,\n  useState,\n  forwardRef,\n  ReactElement,\n  MouseEventHandler,\n  Ref,\n  ButtonHTMLAttributes,\n  ReactNode,\n} from 'react';\nimport { Root, Button, Split, Xmark } from './LumaButton.styles';\nimport { LumaIcon } from '../LumaIcon';\n\nexport interface LumaButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /**\n   * Content rendered within the button.\n   */\n  children?: ReactNode;\n  /**\n   * Disable the button.\n   */\n  disabled?: boolean;\n  /**\n   * Style variant.\n   */\n  variant:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'tertiary_positive'\n    | 'tertiary_negative'\n    | 'toggle_active'\n    | 'toggle_inactive'\n    | 'tabs_active'\n    | 'tabs_inactive'\n    | 'document_error'\n    | 'remove';\n  /**\n   * Button size.\n   */\n  size:\n    | 'large'\n    | 'medium'\n    | 'small'\n    | 'x_small'\n    | 'icon_only'\n    | 'toggle_xx_small'\n    | 'toggle_small'\n    | 'toggle_medium'\n    | 'tab'\n    | 'document_upload'\n    | 'document_upload_remove';\n\n  /**\n   * Specifies if this is a dropdown button\n   */\n  dropdown?: {\n    isDropdown: boolean;\n    isOpen: boolean;\n    getToggleButtonProps: () => void;\n  };\n  /**\n   * Code of the icon to be displayed in the button.\n   */\n  icon?: {\n    iconComponent: ReactElement<typeof LumaIcon>;\n    isOnRight?: boolean;\n  };\n  /**\n   * Specifies onClick action.\n   */\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  /**\n   * Specifies if this is the split button.\n   */\n  split?: boolean;\n  /**\n   * Disable only the split part\n   */\n  disabledSplit?: boolean;\n  /**\n   * Specifies role of a button.\n   */\n  type?: 'button' | 'submit' | 'reset';\n  /**\n   * Specifies if button width is set to 100%.\n   */\n  fullWidth?: boolean;\n  /* Specifies if this is the x mark.\n   */\n  xmark?: boolean;\n  /**\n   * Specifies data test id for split part of the button\n   */\n  splitDataTestId?: string;\n}\n\nexport const LumaButton = forwardRef<HTMLButtonElement, LumaButtonProps>(\n  function LumaButton(\n    componentProps: LumaButtonProps,\n    forwardedRef: Ref<HTMLButtonElement>\n  ) {\n    const {\n      children,\n      variant = 'primary',\n      disabled = false,\n      icon,\n      size = 'medium',\n      dropdown = {\n        isDropdown: false,\n        isOpen: false,\n        getToggleButtonProps: function (): void {\n          throw new Error('Function not implemented.');\n        },\n      },\n      onClick,\n      split = false,\n      disabledSplit = false,\n      type = 'button',\n      className,\n      fullWidth = false,\n      xmark,\n      splitDataTestId = 'button-luma_split',\n      ...rest\n    }: LumaButtonProps = componentProps;\n\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    useEffect(() => {\n      setDropdownOpen(dropdown.isOpen);\n    }, [dropdown.isOpen]);\n\n    const getDropdownPropsButtonIfNeeded = () => {\n      if (!split && dropdown.isDropdown) {\n        return dropdown.getToggleButtonProps();\n      }\n      return null;\n    };\n\n    const getDropdownPropsSplitIfNeeded = () => {\n      if (split) {\n        return dropdown.getToggleButtonProps();\n      }\n      return null;\n    };\n    const dropdownPropsButton = getDropdownPropsButtonIfNeeded() ?? {};\n    const dropdownPropsSplit = getDropdownPropsSplitIfNeeded() ?? {};\n    return (\n      <Root\n        fullWidth={fullWidth}\n        size={size}\n        dropdown={dropdown}\n        className={className}\n      >\n        <Button\n          icon={icon}\n          onClick={onClick}\n          variant={variant}\n          size={size}\n          split={split}\n          ref={forwardedRef}\n          {...dropdownPropsButton}\n          type={type}\n          disabled={disabled}\n          fullWidth={fullWidth}\n          {...rest}\n          xmark={xmark}\n        >\n          {icon?.iconComponent}\n          {children}\n          {dropdown.isDropdown && (\n            <LumaIcon iconCode={dropdownOpen ? 'angle-up' : 'angle-down'} />\n          )}\n          {xmark && (\n            <Xmark>\n              <LumaIcon iconCode=\"xmark\" />\n            </Xmark>\n          )}\n        </Button>\n\n        {split && (\n          <Split\n            variant={variant}\n            disabled={disabledSplit}\n            {...dropdownPropsSplit}\n            data-testid={splitDataTestId}\n          >\n            <LumaIcon iconCode={dropdownOpen ? 'angle-up' : 'angle-down'} />\n          </Split>\n        )}\n      </Root>\n    );\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}