{"ast":null,"code":"import { PricingState } from '@luma-fe-workspace/redux';\nexport let PricingFormVariants;\n\n(function (PricingFormVariants) {\n  PricingFormVariants[\"NEW_PRICING\"] = \"NEW_PRICING\";\n  PricingFormVariants[\"PRICING\"] = \"PRICING\";\n  PricingFormVariants[\"RFQ\"] = \"RFQ\";\n})(PricingFormVariants || (PricingFormVariants = {}));\n\nexport let PricingModes;\n\n(function (PricingModes) {\n  PricingModes[\"Pricing\"] = \"PRICING\";\n  PricingModes[\"Quoting\"] = \"QUOTING\";\n})(PricingModes || (PricingModes = {}));\n\nexport const Pending = 'Pending';\nexport const initialPricing = {\n  constraints: {},\n  issuers: {},\n  product: {\n    params: {}\n  },\n  productLayout: {\n    sections: []\n  },\n  productValidationErrors: {},\n  state: PricingState.InCreation\n};\nexport const SectionIcons = {\n  coupon: 'file-invoice-dollar',\n  distributiondetails: 'layer-group',\n  earlyredemption: 'calendar',\n  payoffatmaturity: 'money-check-edit-alt',\n  productselections: 'balance-scale',\n  schedule: 'calendar-alt'\n};\nexport function isPricingEmpty(pricing) {\n  return !Object.keys(pricing.product.params).length;\n}\nexport function getFormValidationBody(values, modifiedParams) {\n  return {\n    pricingRequest: {\n      product: {\n        params: values,\n        modifiedParams\n      }\n    }\n  };\n}\nexport function getFormSubmissionBody(values, issuers, rfqType) {\n  return {\n    pricingRequest: {\n      product: {\n        params: values\n      },\n      issuers,\n      rfqType\n    }\n  };\n}\nexport function getDisplayedFormVariant({\n  formVariant,\n  displayedPricing\n}) {\n  if (formVariant === PricingFormVariants.RFQ) {\n    return formVariant;\n  }\n\n  if ('state' in displayedPricing && displayedPricing.state !== PricingState.InCreation) {\n    return PricingFormVariants.PRICING;\n  }\n\n  return PricingFormVariants.NEW_PRICING;\n}\nexport const CloneLabel = 'Clone';","map":{"version":3,"names":["PricingState","PricingFormVariants","PricingModes","Pending","initialPricing","constraints","issuers","product","params","productLayout","sections","productValidationErrors","state","InCreation","SectionIcons","coupon","distributiondetails","earlyredemption","payoffatmaturity","productselections","schedule","isPricingEmpty","pricing","Object","keys","length","getFormValidationBody","values","modifiedParams","pricingRequest","getFormSubmissionBody","rfqType","getDisplayedFormVariant","formVariant","displayedPricing","RFQ","PRICING","NEW_PRICING","CloneLabel"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/creationhub/src/components/PricingForm/PricingFormUtils.ts"],"sourcesContent":["import {\n  IssuerId,\n  ParamName,\n  ParamValue,\n  Pricing,\n  PricingState,\n  Rfq,\n  RfqTypeEnum,\n} from '@luma-fe-workspace/redux';\n\nexport enum PricingFormVariants {\n  NEW_PRICING = 'NEW_PRICING',\n  PRICING = 'PRICING',\n  RFQ = 'RFQ',\n}\n\nexport enum PricingModes {\n  Pricing = 'PRICING',\n  Quoting = 'QUOTING',\n}\n\nexport const Pending = 'Pending';\nexport const initialPricing: Pricing = {\n  constraints: {},\n  issuers: {},\n  product: { params: {} },\n  productLayout: { sections: [] },\n  productValidationErrors: {},\n  state: PricingState.InCreation,\n};\n\nexport type RequestFormValuesType = Record<ParamName, ParamValue>;\n\nexport const SectionIcons: Record<string, string> = {\n  coupon: 'file-invoice-dollar',\n  distributiondetails: 'layer-group',\n  earlyredemption: 'calendar',\n  payoffatmaturity: 'money-check-edit-alt',\n  productselections: 'balance-scale',\n  schedule: 'calendar-alt',\n};\n\nexport function isPricingEmpty(pricing: Pricing | Rfq) {\n  return !Object.keys(pricing.product.params).length;\n}\n\nexport function getFormValidationBody(\n  values: RequestFormValuesType,\n  modifiedParams: ParamName[]\n) {\n  return {\n    pricingRequest: {\n      product: { params: values, modifiedParams },\n    },\n  };\n}\n\nexport function getFormSubmissionBody(\n  values: RequestFormValuesType,\n  issuers: IssuerId[],\n  rfqType: RfqTypeEnum\n) {\n  return { pricingRequest: { product: { params: values }, issuers, rfqType } };\n}\n\nexport function getDisplayedFormVariant({\n  formVariant,\n  displayedPricing,\n}: {\n  formVariant: PricingFormVariants;\n  displayedPricing: Pricing | Rfq;\n}) {\n  if (formVariant === PricingFormVariants.RFQ) {\n    return formVariant;\n  }\n  if (\n    'state' in displayedPricing &&\n    displayedPricing.state !== PricingState.InCreation\n  ) {\n    return PricingFormVariants.PRICING;\n  }\n  return PricingFormVariants.NEW_PRICING;\n}\n\nexport const CloneLabel = 'Clone';\n"],"mappings":"AAAA,SAKEA,YALF,QAQO,0BARP;AAUA,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAMZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAKZ,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,cAAuB,GAAG;EACrCC,WAAW,EAAE,EADwB;EAErCC,OAAO,EAAE,EAF4B;EAGrCC,OAAO,EAAE;IAAEC,MAAM,EAAE;EAAV,CAH4B;EAIrCC,aAAa,EAAE;IAAEC,QAAQ,EAAE;EAAZ,CAJsB;EAKrCC,uBAAuB,EAAE,EALY;EAMrCC,KAAK,EAAEZ,YAAY,CAACa;AANiB,CAAhC;AAWP,OAAO,MAAMC,YAAoC,GAAG;EAClDC,MAAM,EAAE,qBAD0C;EAElDC,mBAAmB,EAAE,aAF6B;EAGlDC,eAAe,EAAE,UAHiC;EAIlDC,gBAAgB,EAAE,sBAJgC;EAKlDC,iBAAiB,EAAE,eAL+B;EAMlDC,QAAQ,EAAE;AANwC,CAA7C;AASP,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAgD;EACrD,OAAO,CAACC,MAAM,CAACC,IAAP,CAAYF,OAAO,CAACf,OAAR,CAAgBC,MAA5B,EAAoCiB,MAA5C;AACD;AAED,OAAO,SAASC,qBAAT,CACLC,MADK,EAELC,cAFK,EAGL;EACA,OAAO;IACLC,cAAc,EAAE;MACdtB,OAAO,EAAE;QAAEC,MAAM,EAAEmB,MAAV;QAAkBC;MAAlB;IADK;EADX,CAAP;AAKD;AAED,OAAO,SAASE,qBAAT,CACLH,MADK,EAELrB,OAFK,EAGLyB,OAHK,EAIL;EACA,OAAO;IAAEF,cAAc,EAAE;MAAEtB,OAAO,EAAE;QAAEC,MAAM,EAAEmB;MAAV,CAAX;MAA+BrB,OAA/B;MAAwCyB;IAAxC;EAAlB,CAAP;AACD;AAED,OAAO,SAASC,uBAAT,CAAiC;EACtCC,WADsC;EAEtCC;AAFsC,CAAjC,EAMJ;EACD,IAAID,WAAW,KAAKhC,mBAAmB,CAACkC,GAAxC,EAA6C;IAC3C,OAAOF,WAAP;EACD;;EACD,IACE,WAAWC,gBAAX,IACAA,gBAAgB,CAACtB,KAAjB,KAA2BZ,YAAY,CAACa,UAF1C,EAGE;IACA,OAAOZ,mBAAmB,CAACmC,OAA3B;EACD;;EACD,OAAOnC,mBAAmB,CAACoC,WAA3B;AACD;AAED,OAAO,MAAMC,UAAU,GAAG,OAAnB"},"metadata":{},"sourceType":"module"}