{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQBlotter/RFQBlotter.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport { useEffect, useState } from 'react';\nimport { ResultsText, RFQActionBar, RFQActionBarSection } from '../RFQSearch/RFQSearch.styles';\nimport { QuotesWrapper } from './RFQBlotter.styles';\nimport { useAppSelector, selectSecondaries, useCancelRequestForQuoteByRequestIdUsingPostMutation, secondariesSlice, useAppDispatch, selectJwt } from '@luma-fe-workspace/redux';\nimport { AGGridTable, exportCSV, exportExcel } from '../AGGridTable/AGGridTable';\nimport { CancelRequestDialog } from '../Dialog/CancelRequestDialog/CancelRequestDialog';\nimport { RFQBlotterColumnDefs } from './columnHelpers';\nimport { refreshGridRowsOnMinute } from '../../utils/refreshGridRowsOnMinute';\nimport { FilterBar, FilterClearButton, FilterInput } from '../AGGridTable/ExternalFilter/ExternalFilter.styles';\nimport { FilterCheckBox } from '../FilterCheckbox/FilterCheckbox';\nimport { useGetProductDocumentUsingGetQuery } from '../../utils/pdfHooks';\nimport { RFQFilters } from './RFQFilters';\nimport { useFilter } from '../AGGridTable/hooks/useFilter';\nimport { SecondariesExportDropdown } from '../SecondariesExportDropdown/SecondariesExportDropdown';\nimport debounce from 'lodash.debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RFQBlotter = ({\n  liveRFQData,\n  newCreatedRFQs,\n  setLiveRFQData,\n  setNewCreatedRFQs\n}) => {\n  _s();\n\n  var _useAppSelector, _filterValues$status, _filterValues$side;\n\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const RFQs = secondariesStore.myRFQs;\n  const [gridApi, setGridApi] = useState();\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n  const [RFQToCancel, setRFQToCancel] = useState();\n  const [cancelRFQ] = useCancelRequestForQuoteByRequestIdUsingPostMutation();\n  const dispatch = useAppDispatch();\n  const {\n    setProductDocumentObject\n  } = useGetProductDocumentUsingGetQuery();\n  const RFQ_BLOTTER_NAME = 'Quotes';\n  const firstName = (_useAppSelector = useAppSelector(selectJwt)) == null ? void 0 : _useAppSelector.firstName;\n  const statusCheckboxOptions = ['Open', 'Pending', 'Filled', 'Canceled', 'Expired'];\n  const sideCheckboxOptions = ['Bid Wanted', 'Offer Wanted'];\n  const [displayedRowCount, setDisplayedRowCount] = useState(gridApi == null ? void 0 : gridApi.getDisplayedRowCount());\n\n  const getRFQBlotterContextMenuItems = params => {\n    var _params$node, _rowData$productIdent;\n\n    const rowData = (_params$node = params.node) == null ? void 0 : _params$node.data;\n    const nonCancelableStatuses = ['FILLED', 'CANCELED', 'EXPIRED', undefined];\n\n    if (!rowData) {\n      return [];\n    }\n\n    const productCusipIsin = (_rowData$productIdent = rowData.productIdentifier) == null ? void 0 : _rowData$productIdent.securityIdentifierValue;\n    const contextMenuItems = [{\n      name: 'Term Sheet',\n      action: () => {\n        if (productCusipIsin) {\n          setProductDocumentObject({\n            cusip: productCusipIsin,\n            documentType: 'TERM_SHEET'\n          });\n        }\n      }\n    }, {\n      name: 'Performance Report',\n      action: () => {\n        if (productCusipIsin) {\n          setProductDocumentObject({\n            cusip: productCusipIsin,\n            documentType: 'PERFORMANCE_REPORT'\n          });\n        }\n      }\n    }, {\n      name: 'Security Details',\n      action: () => {\n        dispatch(secondariesSlice.actions.setSecurityDetailsCusip(productCusipIsin));\n      }\n    }, {\n      name: 'Export',\n      subMenu: [{\n        name: 'CSV Export',\n        action: () => {\n          exportCSV(params.api, RFQ_BLOTTER_NAME);\n        }\n      }, {\n        name: 'Excel Export',\n        action: () => {\n          exportExcel(params.api, RFQ_BLOTTER_NAME);\n        }\n      }]\n    }]; //If the RFQ is in 'CANCELED', 'FILLED', or 'EXPIRED' status, or is undefined (to catch non-status edge case), then 'Cancel Request' option will not show\n\n    if (!nonCancelableStatuses.includes(rowData.status)) {\n      contextMenuItems.push('separator');\n      contextMenuItems.push({\n        name: 'Cancel Request',\n        action: () => {\n          setShowCancelDialog(true);\n          setRFQToCancel(rowData);\n        }\n      });\n    }\n\n    return contextMenuItems;\n  };\n\n  const onDataRendered = gridReadyEvent => {\n    gridReadyEvent.columnApi.autoSizeAllColumns();\n    setDisplayedRowCount(gridReadyEvent.api.getDisplayedRowCount());\n  };\n\n  const {\n    filterValues,\n    handleInputFilter,\n    handleCheckboxFilter,\n    handleClearFilters,\n    isExternalFilterPresent,\n    doesExternalFilterPass\n  } = useFilter(RFQFilters);\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.onFilterChanged();\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n    }\n  }, [filterValues, gridApi]);\n  useEffect(() => {\n    if (gridApi && RFQs) {\n      const gridRowCount = gridApi.getDisplayedRowCount(); // We are checking gridRowCount because we only want to set all the rows on mount\n\n      if (gridRowCount === 0) {\n        gridApi.setRowData(RFQs);\n      }\n    }\n  }, [gridApi, RFQs]);\n  useEffect(() => {\n    if (gridApi && liveRFQData[0]) {\n      gridApi.applyTransaction({\n        update: liveRFQData\n      });\n      const rowNodes = [];\n      liveRFQData.forEach(RFQ => {\n        if (RFQ.requestId) {\n          const rowNode = gridApi.getRowNode(RFQ.requestId.toString());\n          rowNode && rowNodes.push(rowNode);\n        }\n      });\n      gridApi.refreshCells({\n        rowNodes,\n        force: true\n      });\n      setLiveRFQData([]);\n    }\n  }, [liveRFQData, gridApi, setLiveRFQData]);\n  useEffect(() => {\n    var _newCreatedRFQs$;\n\n    if (gridApi && (_newCreatedRFQs$ = newCreatedRFQs[0]) != null && _newCreatedRFQs$.requestId) {\n      const firstRFQ = gridApi.getRowNode(newCreatedRFQs[0].requestId.toString());\n\n      if (firstRFQ) {\n        return;\n      }\n\n      gridApi.applyTransaction({\n        add: newCreatedRFQs,\n        addIndex: 0\n      });\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n      setNewCreatedRFQs([]);\n    }\n  }, [gridApi, newCreatedRFQs, setNewCreatedRFQs]);\n  useEffect(() => {\n    if (gridApi) {\n      refreshGridRowsOnMinute(gridApi, ['price', 'quoteDeadline']);\n      return () => {\n        gridApi.destroy();\n      };\n    }\n\n    return;\n  }, [gridApi]);\n\n  const handleCancelRFQ = async () => {\n    if (RFQToCancel != null && RFQToCancel.requestId) {\n      try {\n        const response = await cancelRFQ({\n          requestId: RFQToCancel.requestId\n        }).unwrap();\n\n        if (response) {\n          var _RFQToCancel$productI;\n\n          dispatch(secondariesSlice.actions.setMessageObject({\n            title: `${firstName ? firstName + 'has' : 'You have'} successfully canceled ${RFQToCancel.requestId} (${RFQToCancel.requestType} ${RFQToCancel.quantity.toLocaleString()}M ${(_RFQToCancel$productI = RFQToCancel.productIdentifier) == null ? void 0 : _RFQToCancel$productI.securityIdentifierValue}).`,\n            messageType: 'success',\n            isMessageShowing: true\n          }));\n        }\n      } catch (error) {\n        var _RFQToCancel$productI2;\n\n        dispatch(secondariesSlice.actions.setMessageObject({\n          title: `${firstName ? firstName + \"'s\" : 'Your'} request to cancel ${RFQToCancel.requestId} has failed (${RFQToCancel.requestType} ${RFQToCancel.quantity.toLocaleString()}M ${(_RFQToCancel$productI2 = RFQToCancel.productIdentifier) == null ? void 0 : _RFQToCancel$productI2.securityIdentifierValue}).`,\n          messageType: 'error',\n          isMessageShowing: true\n        }));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(QuotesWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CancelRequestDialog, {\n      onDelete: () => handleCancelRFQ(),\n      deleteText: 'CANCEL',\n      title: 'CANCEL REQUEST',\n      description: RFQToCancel != null && RFQToCancel.quotes ? `Are you sure you want to cancel the request? You received ${RFQToCancel.quotes.length} bids` : 'Error',\n      setShowDialog: function (showDialog) {\n        setShowCancelDialog(showDialog);\n      },\n      id: '',\n      handleOnClose: function () {\n        setShowCancelDialog(!showCancelDialog);\n      },\n      showDialog: showCancelDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RFQActionBar, {\n      children: [/*#__PURE__*/_jsxDEV(FilterBar, {\n        children: [/*#__PURE__*/_jsxDEV(ResultsText, {\n          children: [displayedRowCount, \" Result\", displayedRowCount !== 1 && 's']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterInput, {\n          disabled: false,\n          hasError: false,\n          placeholder: \"Filter by CUSIP/ISIN\",\n          onChange: debounce(event => handleInputFilter('cusipOrIsin', event.target.value), 400)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterCheckBox, {\n          fieldText: \"Status\",\n          defaultOption: \"All\",\n          options: statusCheckboxOptions,\n          checkedOptions: (_filterValues$status = filterValues['status']) != null ? _filterValues$status : [],\n          setCheckedOptions: checked => handleCheckboxFilter('status', checked),\n          multi: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterCheckBox, {\n          fieldText: \"Side\",\n          defaultOption: \"All\",\n          options: sideCheckboxOptions,\n          checkedOptions: (_filterValues$side = filterValues['side']) != null ? _filterValues$side : [],\n          setCheckedOptions: checked => handleCheckboxFilter('side', checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterClearButton, {\n          variant: \"secondary\",\n          onClick: handleClearFilters,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RFQActionBarSection, {\n        children: /*#__PURE__*/_jsxDEV(SecondariesExportDropdown, {\n          gridApi: gridApi,\n          tableName: RFQ_BLOTTER_NAME\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AGGridTable, {\n      getRowNodeId: data => data.requestId ? data.requestId.toString() : '',\n      gridOptions: {\n        onGridReady: event => setGridApi(event.api),\n        onFirstDataRendered: onDataRendered,\n        columnDefs: RFQBlotterColumnDefs,\n        rowHeight: 32,\n        headerHeight: 48,\n        suppressLoadingOverlay: true,\n        defaultColDef: {\n          resizable: true\n        },\n        getContextMenuItems: getRFQBlotterContextMenuItems,\n        rowClassRules: {\n          'order-success': e => {\n            const status = e.api.getValue('status', e.node);\n            return status !== 'CANCELED' || status !== 'REJECTED';\n          },\n          'order-fail': e => {\n            const status = e.api.getValue('status', e.node);\n            return status === 'CANCELED' || status === 'REJECTED';\n          }\n        }\n      },\n      isExternalFilterPresent: isExternalFilterPresent,\n      doesExternalFilterPass: doesExternalFilterPass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RFQBlotter, \"ncwwzzih+2JKDxefFvyfwdfPscw=\", false, function () {\n  return [useAppSelector, useCancelRequestForQuoteByRequestIdUsingPostMutation, useAppDispatch, useGetProductDocumentUsingGetQuery, useAppSelector, useFilter];\n});\n\n_c = RFQBlotter;\n\nvar _c;\n\n$RefreshReg$(_c, \"RFQBlotter\");","map":{"version":3,"names":["useEffect","useState","ResultsText","RFQActionBar","RFQActionBarSection","QuotesWrapper","useAppSelector","selectSecondaries","useCancelRequestForQuoteByRequestIdUsingPostMutation","secondariesSlice","useAppDispatch","selectJwt","AGGridTable","exportCSV","exportExcel","CancelRequestDialog","RFQBlotterColumnDefs","refreshGridRowsOnMinute","FilterBar","FilterClearButton","FilterInput","FilterCheckBox","useGetProductDocumentUsingGetQuery","RFQFilters","useFilter","SecondariesExportDropdown","debounce","RFQBlotter","liveRFQData","newCreatedRFQs","setLiveRFQData","setNewCreatedRFQs","secondariesStore","RFQs","myRFQs","gridApi","setGridApi","showCancelDialog","setShowCancelDialog","RFQToCancel","setRFQToCancel","cancelRFQ","dispatch","setProductDocumentObject","RFQ_BLOTTER_NAME","firstName","statusCheckboxOptions","sideCheckboxOptions","displayedRowCount","setDisplayedRowCount","getDisplayedRowCount","getRFQBlotterContextMenuItems","params","rowData","node","data","nonCancelableStatuses","undefined","productCusipIsin","productIdentifier","securityIdentifierValue","contextMenuItems","name","action","cusip","documentType","actions","setSecurityDetailsCusip","subMenu","api","includes","status","push","onDataRendered","gridReadyEvent","columnApi","autoSizeAllColumns","filterValues","handleInputFilter","handleCheckboxFilter","handleClearFilters","isExternalFilterPresent","doesExternalFilterPass","onFilterChanged","gridRowCount","setRowData","applyTransaction","update","rowNodes","forEach","RFQ","requestId","rowNode","getRowNode","toString","refreshCells","force","firstRFQ","add","addIndex","destroy","handleCancelRFQ","response","unwrap","setMessageObject","title","requestType","quantity","toLocaleString","messageType","isMessageShowing","error","quotes","length","showDialog","event","target","value","checked","onGridReady","onFirstDataRendered","columnDefs","rowHeight","headerHeight","suppressLoadingOverlay","defaultColDef","resizable","getContextMenuItems","rowClassRules","e","getValue"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQBlotter/RFQBlotter.tsx"],"sourcesContent":["import {\n  GetContextMenuItemsParams,\n  GridApi,\n  GridReadyEvent,\n  MenuItemDef,\n  RowClassParams,\n  RowNode,\n} from 'ag-grid-community';\nimport { useEffect, useState } from 'react';\nimport {\n  ResultsText,\n  RFQActionBar,\n  RFQActionBarSection,\n} from '../RFQSearch/RFQSearch.styles';\nimport { QuotesWrapper } from './RFQBlotter.styles';\nimport {\n  useAppSelector,\n  selectSecondaries,\n  useCancelRequestForQuoteByRequestIdUsingPostMutation,\n  SecondaryRequestForQuote,\n  secondariesSlice,\n  useAppDispatch,\n  selectJwt,\n} from '@luma-fe-workspace/redux';\nimport {\n  AGGridTable,\n  exportCSV,\n  exportExcel,\n} from '../AGGridTable/AGGridTable';\nimport { CancelRequestDialog } from '../Dialog/CancelRequestDialog/CancelRequestDialog';\nimport { RFQBlotterColumnDefs } from './columnHelpers';\nimport { refreshGridRowsOnMinute } from '../../utils/refreshGridRowsOnMinute';\nimport {\n  FilterBar,\n  FilterClearButton,\n  FilterInput,\n} from '../AGGridTable/ExternalFilter/ExternalFilter.styles';\nimport { FilterCheckBox } from '../FilterCheckbox/FilterCheckbox';\nimport { useGetProductDocumentUsingGetQuery } from '../../utils/pdfHooks';\nimport { RFQFilters } from './RFQFilters';\nimport { useFilter } from '../AGGridTable/hooks/useFilter';\nimport { SecondariesExportDropdown } from '../SecondariesExportDropdown/SecondariesExportDropdown';\nimport debounce from 'lodash.debounce';\n\ninterface RFQBlotterProps {\n  liveRFQData: SecondaryRequestForQuote[];\n  newCreatedRFQs: SecondaryRequestForQuote[];\n  setLiveRFQData: (data: SecondaryRequestForQuote[]) => void;\n  setNewCreatedRFQs: (data: SecondaryRequestForQuote[]) => void;\n}\n\nexport const RFQBlotter = ({\n  liveRFQData,\n  newCreatedRFQs,\n  setLiveRFQData,\n  setNewCreatedRFQs,\n}: RFQBlotterProps) => {\n  const secondariesStore = useAppSelector(selectSecondaries);\n  const RFQs = secondariesStore.myRFQs;\n  const [gridApi, setGridApi] = useState<GridApi>();\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n  const [RFQToCancel, setRFQToCancel] = useState<SecondaryRequestForQuote>();\n  const [cancelRFQ] = useCancelRequestForQuoteByRequestIdUsingPostMutation();\n  const dispatch = useAppDispatch();\n  const { setProductDocumentObject } = useGetProductDocumentUsingGetQuery();\n  const RFQ_BLOTTER_NAME = 'Quotes';\n  const firstName = useAppSelector(selectJwt)?.firstName;\n\n  const statusCheckboxOptions = [\n    'Open',\n    'Pending',\n    'Filled',\n    'Canceled',\n    'Expired',\n  ];\n  const sideCheckboxOptions = ['Bid Wanted', 'Offer Wanted'];\n\n  const [displayedRowCount, setDisplayedRowCount] = useState(\n    gridApi?.getDisplayedRowCount()\n  );\n\n  const getRFQBlotterContextMenuItems = (\n    params: GetContextMenuItemsParams\n  ): (string | MenuItemDef)[] => {\n    const rowData: SecondaryRequestForQuote = params.node?.data;\n    const nonCancelableStatuses = ['FILLED', 'CANCELED', 'EXPIRED', undefined];\n    if (!rowData) {\n      return [];\n    }\n\n    const productCusipIsin = rowData.productIdentifier?.securityIdentifierValue;\n    const contextMenuItems: (string | MenuItemDef)[] = [\n      {\n        name: 'Term Sheet',\n        action: () => {\n          if (productCusipIsin) {\n            setProductDocumentObject({\n              cusip: productCusipIsin,\n              documentType: 'TERM_SHEET',\n            });\n          }\n        },\n      },\n      {\n        name: 'Performance Report',\n        action: () => {\n          if (productCusipIsin) {\n            setProductDocumentObject({\n              cusip: productCusipIsin,\n              documentType: 'PERFORMANCE_REPORT',\n            });\n          }\n        },\n      },\n      {\n        name: 'Security Details',\n        action: () => {\n          dispatch(\n            secondariesSlice.actions.setSecurityDetailsCusip(productCusipIsin)\n          );\n        },\n      },\n      {\n        name: 'Export',\n        subMenu: [\n          {\n            name: 'CSV Export',\n            action: () => {\n              exportCSV(params.api, RFQ_BLOTTER_NAME);\n            },\n          },\n          {\n            name: 'Excel Export',\n            action: () => {\n              exportExcel(params.api, RFQ_BLOTTER_NAME);\n            },\n          },\n        ],\n      },\n    ];\n    //If the RFQ is in 'CANCELED', 'FILLED', or 'EXPIRED' status, or is undefined (to catch non-status edge case), then 'Cancel Request' option will not show\n    if (!nonCancelableStatuses.includes(rowData.status)) {\n      contextMenuItems.push('separator');\n      contextMenuItems.push({\n        name: 'Cancel Request',\n        action: () => {\n          setShowCancelDialog(true);\n          setRFQToCancel(rowData);\n        },\n      });\n    }\n    return contextMenuItems;\n  };\n\n  const onDataRendered = (gridReadyEvent: GridReadyEvent) => {\n    gridReadyEvent.columnApi.autoSizeAllColumns();\n    setDisplayedRowCount(gridReadyEvent.api.getDisplayedRowCount());\n  };\n\n  const {\n    filterValues,\n    handleInputFilter,\n    handleCheckboxFilter,\n    handleClearFilters,\n    isExternalFilterPresent,\n    doesExternalFilterPass,\n  } = useFilter(RFQFilters);\n\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.onFilterChanged();\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n    }\n  }, [filterValues, gridApi]);\n\n  useEffect(() => {\n    if (gridApi && RFQs) {\n      const gridRowCount = gridApi.getDisplayedRowCount();\n      // We are checking gridRowCount because we only want to set all the rows on mount\n      if (gridRowCount === 0) {\n        gridApi.setRowData(RFQs);\n      }\n    }\n  }, [gridApi, RFQs]);\n\n  useEffect(() => {\n    if (gridApi && liveRFQData[0]) {\n      gridApi.applyTransaction({ update: liveRFQData });\n      const rowNodes: RowNode[] = [];\n      liveRFQData.forEach((RFQ) => {\n        if (RFQ.requestId) {\n          const rowNode = gridApi.getRowNode(RFQ.requestId.toString());\n          rowNode && rowNodes.push(rowNode);\n        }\n      });\n      gridApi.refreshCells({ rowNodes, force: true });\n      setLiveRFQData([]);\n    }\n  }, [liveRFQData, gridApi, setLiveRFQData]);\n\n  useEffect(() => {\n    if (gridApi && newCreatedRFQs[0]?.requestId) {\n      const firstRFQ = gridApi.getRowNode(\n        newCreatedRFQs[0].requestId.toString()\n      );\n      if (firstRFQ) {\n        return;\n      }\n      gridApi.applyTransaction({ add: newCreatedRFQs, addIndex: 0 });\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n      setNewCreatedRFQs([]);\n    }\n  }, [gridApi, newCreatedRFQs, setNewCreatedRFQs]);\n\n  useEffect(() => {\n    if (gridApi) {\n      refreshGridRowsOnMinute(gridApi, ['price', 'quoteDeadline']);\n      return () => {\n        gridApi.destroy();\n      };\n    }\n    return;\n  }, [gridApi]);\n\n  const handleCancelRFQ = async () => {\n    if (RFQToCancel?.requestId) {\n      try {\n        const response = await cancelRFQ({\n          requestId: RFQToCancel.requestId,\n        }).unwrap();\n        if (response) {\n          dispatch(\n            secondariesSlice.actions.setMessageObject({\n              title: `${\n                firstName ? firstName + 'has' : 'You have'\n              } successfully canceled ${RFQToCancel.requestId} (${\n                RFQToCancel.requestType\n              } ${RFQToCancel.quantity.toLocaleString()}M ${\n                RFQToCancel.productIdentifier?.securityIdentifierValue\n              }).`,\n              messageType: 'success',\n              isMessageShowing: true,\n            })\n          );\n        }\n      } catch (error) {\n        dispatch(\n          secondariesSlice.actions.setMessageObject({\n            title: `${\n              firstName ? firstName + \"'s\" : 'Your'\n            } request to cancel ${RFQToCancel.requestId} has failed (${\n              RFQToCancel.requestType\n            } ${RFQToCancel.quantity.toLocaleString()}M ${\n              RFQToCancel.productIdentifier?.securityIdentifierValue\n            }).`,\n            messageType: 'error',\n            isMessageShowing: true,\n          })\n        );\n      }\n    }\n  };\n\n  return (\n    <QuotesWrapper>\n      <CancelRequestDialog\n        onDelete={() => handleCancelRFQ()}\n        deleteText={'CANCEL'}\n        title={'CANCEL REQUEST'}\n        description={\n          RFQToCancel?.quotes\n            ? `Are you sure you want to cancel the request? You received ${RFQToCancel.quotes.length} bids`\n            : 'Error'\n        }\n        setShowDialog={function (showDialog: boolean): void {\n          setShowCancelDialog(showDialog);\n        }}\n        id={''}\n        handleOnClose={function (): void {\n          setShowCancelDialog(!showCancelDialog);\n        }}\n        showDialog={showCancelDialog}\n      />\n      <RFQActionBar>\n        <FilterBar>\n          <ResultsText>\n            {displayedRowCount} Result\n            {displayedRowCount !== 1 && 's'}\n          </ResultsText>\n          <FilterInput\n            disabled={false}\n            hasError={false}\n            placeholder=\"Filter by CUSIP/ISIN\"\n            onChange={debounce(\n              (event) => handleInputFilter('cusipOrIsin', event.target.value),\n              400\n            )}\n          />\n          <FilterCheckBox\n            fieldText=\"Status\"\n            defaultOption=\"All\"\n            options={statusCheckboxOptions}\n            checkedOptions={filterValues['status'] ?? []}\n            setCheckedOptions={(checked) =>\n              handleCheckboxFilter('status', checked)\n            }\n            multi\n          />\n          <FilterCheckBox\n            fieldText=\"Side\"\n            defaultOption=\"All\"\n            options={sideCheckboxOptions}\n            checkedOptions={filterValues['side'] ?? []}\n            setCheckedOptions={(checked) =>\n              handleCheckboxFilter('side', checked)\n            }\n          />\n          <FilterClearButton variant=\"secondary\" onClick={handleClearFilters}>\n            Clear\n          </FilterClearButton>\n        </FilterBar>\n        <RFQActionBarSection>\n          <SecondariesExportDropdown\n            gridApi={gridApi}\n            tableName={RFQ_BLOTTER_NAME}\n          />\n        </RFQActionBarSection>\n      </RFQActionBar>\n      <AGGridTable\n        getRowNodeId={(data: SecondaryRequestForQuote) =>\n          data.requestId ? data.requestId.toString() : ''\n        }\n        gridOptions={{\n          onGridReady: (event) => setGridApi(event.api),\n          onFirstDataRendered: onDataRendered,\n          columnDefs: RFQBlotterColumnDefs,\n          rowHeight: 32,\n          headerHeight: 48,\n          suppressLoadingOverlay: true,\n          defaultColDef: { resizable: true },\n          getContextMenuItems: getRFQBlotterContextMenuItems,\n          rowClassRules: {\n            'order-success': (e: RowClassParams) => {\n              const status = e.api.getValue('status', e.node);\n              return status !== 'CANCELED' || status !== 'REJECTED';\n            },\n            'order-fail': (e: RowClassParams) => {\n              const status = e.api.getValue('status', e.node);\n              return status === 'CANCELED' || status === 'REJECTED';\n            },\n          },\n        }}\n        isExternalFilterPresent={isExternalFilterPresent}\n        doesExternalFilterPass={doesExternalFilterPass}\n      />\n    </QuotesWrapper>\n  );\n};\n"],"mappings":";;;;;;;;AAQA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,mBAHF,QAIO,+BAJP;AAKA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SACEC,cADF,EAEEC,iBAFF,EAGEC,oDAHF,EAKEC,gBALF,EAMEC,cANF,EAOEC,SAPF,QAQO,0BARP;AASA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,4BAJP;AAKA,SAASC,mBAAT,QAAoC,mDAApC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SACEC,SADF,EAEEC,iBAFF,EAGEC,WAHF,QAIO,qDAJP;AAKA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,kCAAT,QAAmD,sBAAnD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,yBAAT,QAA0C,wDAA1C;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AASA,OAAO,MAAMC,UAAU,GAAG,CAAC;EACzBC,WADyB;EAEzBC,cAFyB;EAGzBC,cAHyB;EAIzBC;AAJyB,CAAD,KAKH;EAAA;;EAAA;;EACrB,MAAMC,gBAAgB,GAAG1B,cAAc,CAACC,iBAAD,CAAvC;EACA,MAAM0B,IAAI,GAAGD,gBAAgB,CAACE,MAA9B;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,EAAtC;EACA,MAAM,CAACoC,gBAAD,EAAmBC,mBAAnB,IAA0CrC,QAAQ,CAAC,KAAD,CAAxD;EACA,MAAM,CAACsC,WAAD,EAAcC,cAAd,IAAgCvC,QAAQ,EAA9C;EACA,MAAM,CAACwC,SAAD,IAAcjC,oDAAoD,EAAxE;EACA,MAAMkC,QAAQ,GAAGhC,cAAc,EAA/B;EACA,MAAM;IAAEiC;EAAF,IAA+BrB,kCAAkC,EAAvE;EACA,MAAMsB,gBAAgB,GAAG,QAAzB;EACA,MAAMC,SAAS,sBAAGvC,cAAc,CAACK,SAAD,CAAjB,qBAAG,gBAA2BkC,SAA7C;EAEA,MAAMC,qBAAqB,GAAG,CAC5B,MAD4B,EAE5B,SAF4B,EAG5B,QAH4B,EAI5B,UAJ4B,EAK5B,SAL4B,CAA9B;EAOA,MAAMC,mBAAmB,GAAG,CAAC,YAAD,EAAe,cAAf,CAA5B;EAEA,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4ChD,QAAQ,CACxDkC,OADwD,oBACxDA,OAAO,CAAEe,oBAAT,EADwD,CAA1D;;EAIA,MAAMC,6BAA6B,GACjCC,MADoC,IAEP;IAAA;;IAC7B,MAAMC,OAAiC,mBAAGD,MAAM,CAACE,IAAV,qBAAG,aAAaC,IAAvD;IACA,MAAMC,qBAAqB,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,EAAkCC,SAAlC,CAA9B;;IACA,IAAI,CAACJ,OAAL,EAAc;MACZ,OAAO,EAAP;IACD;;IAED,MAAMK,gBAAgB,4BAAGL,OAAO,CAACM,iBAAX,qBAAG,sBAA2BC,uBAApD;IACA,MAAMC,gBAA0C,GAAG,CACjD;MACEC,IAAI,EAAE,YADR;MAEEC,MAAM,EAAE,MAAM;QACZ,IAAIL,gBAAJ,EAAsB;UACpBf,wBAAwB,CAAC;YACvBqB,KAAK,EAAEN,gBADgB;YAEvBO,YAAY,EAAE;UAFS,CAAD,CAAxB;QAID;MACF;IATH,CADiD,EAYjD;MACEH,IAAI,EAAE,oBADR;MAEEC,MAAM,EAAE,MAAM;QACZ,IAAIL,gBAAJ,EAAsB;UACpBf,wBAAwB,CAAC;YACvBqB,KAAK,EAAEN,gBADgB;YAEvBO,YAAY,EAAE;UAFS,CAAD,CAAxB;QAID;MACF;IATH,CAZiD,EAuBjD;MACEH,IAAI,EAAE,kBADR;MAEEC,MAAM,EAAE,MAAM;QACZrB,QAAQ,CACNjC,gBAAgB,CAACyD,OAAjB,CAAyBC,uBAAzB,CAAiDT,gBAAjD,CADM,CAAR;MAGD;IANH,CAvBiD,EA+BjD;MACEI,IAAI,EAAE,QADR;MAEEM,OAAO,EAAE,CACP;QACEN,IAAI,EAAE,YADR;QAEEC,MAAM,EAAE,MAAM;UACZlD,SAAS,CAACuC,MAAM,CAACiB,GAAR,EAAazB,gBAAb,CAAT;QACD;MAJH,CADO,EAOP;QACEkB,IAAI,EAAE,cADR;QAEEC,MAAM,EAAE,MAAM;UACZjD,WAAW,CAACsC,MAAM,CAACiB,GAAR,EAAazB,gBAAb,CAAX;QACD;MAJH,CAPO;IAFX,CA/BiD,CAAnD,CAR6B,CAyD7B;;IACA,IAAI,CAACY,qBAAqB,CAACc,QAAtB,CAA+BjB,OAAO,CAACkB,MAAvC,CAAL,EAAqD;MACnDV,gBAAgB,CAACW,IAAjB,CAAsB,WAAtB;MACAX,gBAAgB,CAACW,IAAjB,CAAsB;QACpBV,IAAI,EAAE,gBADc;QAEpBC,MAAM,EAAE,MAAM;UACZzB,mBAAmB,CAAC,IAAD,CAAnB;UACAE,cAAc,CAACa,OAAD,CAAd;QACD;MALmB,CAAtB;IAOD;;IACD,OAAOQ,gBAAP;EACD,CAvED;;EAyEA,MAAMY,cAAc,GAAIC,cAAD,IAAoC;IACzDA,cAAc,CAACC,SAAf,CAAyBC,kBAAzB;IACA3B,oBAAoB,CAACyB,cAAc,CAACL,GAAf,CAAmBnB,oBAAnB,EAAD,CAApB;EACD,CAHD;;EAKA,MAAM;IACJ2B,YADI;IAEJC,iBAFI;IAGJC,oBAHI;IAIJC,kBAJI;IAKJC,uBALI;IAMJC;EANI,IAOF1D,SAAS,CAACD,UAAD,CAPb;EASAvB,SAAS,CAAC,MAAM;IACd,IAAImC,OAAJ,EAAa;MACXA,OAAO,CAACgD,eAAR;MACAlC,oBAAoB,CAACd,OAAO,CAACe,oBAAR,EAAD,CAApB;IACD;EACF,CALQ,EAKN,CAAC2B,YAAD,EAAe1C,OAAf,CALM,CAAT;EAOAnC,SAAS,CAAC,MAAM;IACd,IAAImC,OAAO,IAAIF,IAAf,EAAqB;MACnB,MAAMmD,YAAY,GAAGjD,OAAO,CAACe,oBAAR,EAArB,CADmB,CAEnB;;MACA,IAAIkC,YAAY,KAAK,CAArB,EAAwB;QACtBjD,OAAO,CAACkD,UAAR,CAAmBpD,IAAnB;MACD;IACF;EACF,CARQ,EAQN,CAACE,OAAD,EAAUF,IAAV,CARM,CAAT;EAUAjC,SAAS,CAAC,MAAM;IACd,IAAImC,OAAO,IAAIP,WAAW,CAAC,CAAD,CAA1B,EAA+B;MAC7BO,OAAO,CAACmD,gBAAR,CAAyB;QAAEC,MAAM,EAAE3D;MAAV,CAAzB;MACA,MAAM4D,QAAmB,GAAG,EAA5B;MACA5D,WAAW,CAAC6D,OAAZ,CAAqBC,GAAD,IAAS;QAC3B,IAAIA,GAAG,CAACC,SAAR,EAAmB;UACjB,MAAMC,OAAO,GAAGzD,OAAO,CAAC0D,UAAR,CAAmBH,GAAG,CAACC,SAAJ,CAAcG,QAAd,EAAnB,CAAhB;UACAF,OAAO,IAAIJ,QAAQ,CAAChB,IAAT,CAAcoB,OAAd,CAAX;QACD;MACF,CALD;MAMAzD,OAAO,CAAC4D,YAAR,CAAqB;QAAEP,QAAF;QAAYQ,KAAK,EAAE;MAAnB,CAArB;MACAlE,cAAc,CAAC,EAAD,CAAd;IACD;EACF,CAbQ,EAaN,CAACF,WAAD,EAAcO,OAAd,EAAuBL,cAAvB,CAbM,CAAT;EAeA9B,SAAS,CAAC,MAAM;IAAA;;IACd,IAAImC,OAAO,wBAAIN,cAAc,CAAC,CAAD,CAAlB,aAAI,iBAAmB8D,SAAlC,EAA6C;MAC3C,MAAMM,QAAQ,GAAG9D,OAAO,CAAC0D,UAAR,CACfhE,cAAc,CAAC,CAAD,CAAd,CAAkB8D,SAAlB,CAA4BG,QAA5B,EADe,CAAjB;;MAGA,IAAIG,QAAJ,EAAc;QACZ;MACD;;MACD9D,OAAO,CAACmD,gBAAR,CAAyB;QAAEY,GAAG,EAAErE,cAAP;QAAuBsE,QAAQ,EAAE;MAAjC,CAAzB;MACAlD,oBAAoB,CAACd,OAAO,CAACe,oBAAR,EAAD,CAApB;MACAnB,iBAAiB,CAAC,EAAD,CAAjB;IACD;EACF,CAZQ,EAYN,CAACI,OAAD,EAAUN,cAAV,EAA0BE,iBAA1B,CAZM,CAAT;EAcA/B,SAAS,CAAC,MAAM;IACd,IAAImC,OAAJ,EAAa;MACXlB,uBAAuB,CAACkB,OAAD,EAAU,CAAC,OAAD,EAAU,eAAV,CAAV,CAAvB;MACA,OAAO,MAAM;QACXA,OAAO,CAACiE,OAAR;MACD,CAFD;IAGD;;IACD;EACD,CARQ,EAQN,CAACjE,OAAD,CARM,CAAT;;EAUA,MAAMkE,eAAe,GAAG,YAAY;IAClC,IAAI9D,WAAJ,YAAIA,WAAW,CAAEoD,SAAjB,EAA4B;MAC1B,IAAI;QACF,MAAMW,QAAQ,GAAG,MAAM7D,SAAS,CAAC;UAC/BkD,SAAS,EAAEpD,WAAW,CAACoD;QADQ,CAAD,CAAT,CAEpBY,MAFoB,EAAvB;;QAGA,IAAID,QAAJ,EAAc;UAAA;;UACZ5D,QAAQ,CACNjC,gBAAgB,CAACyD,OAAjB,CAAyBsC,gBAAzB,CAA0C;YACxCC,KAAK,EAAG,GACN5D,SAAS,GAAGA,SAAS,GAAG,KAAf,GAAuB,UACjC,0BAAyBN,WAAW,CAACoD,SAAU,KAC9CpD,WAAW,CAACmE,WACb,IAAGnE,WAAW,CAACoE,QAAZ,CAAqBC,cAArB,EAAsC,KAJnC,yBAKLrE,WAAW,CAACoB,iBALP,qBAKL,sBAA+BC,uBAChC,IAPuC;YAQxCiD,WAAW,EAAE,SAR2B;YASxCC,gBAAgB,EAAE;UATsB,CAA1C,CADM,CAAR;QAaD;MACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;QAAA;;QACdrE,QAAQ,CACNjC,gBAAgB,CAACyD,OAAjB,CAAyBsC,gBAAzB,CAA0C;UACxCC,KAAK,EAAG,GACN5D,SAAS,GAAGA,SAAS,GAAG,IAAf,GAAsB,MAChC,sBAAqBN,WAAW,CAACoD,SAAU,gBAC1CpD,WAAW,CAACmE,WACb,IAAGnE,WAAW,CAACoE,QAAZ,CAAqBC,cAArB,EAAsC,KAJnC,0BAKLrE,WAAW,CAACoB,iBALP,qBAKL,uBAA+BC,uBAChC,IAPuC;UAQxCiD,WAAW,EAAE,OAR2B;UASxCC,gBAAgB,EAAE;QATsB,CAA1C,CADM,CAAR;MAaD;IACF;EACF,CArCD;;EAuCA,oBACE,QAAC,aAAD;IAAA,wBACE,QAAC,mBAAD;MACE,QAAQ,EAAE,MAAMT,eAAe,EADjC;MAEE,UAAU,EAAE,QAFd;MAGE,KAAK,EAAE,gBAHT;MAIE,WAAW,EACT9D,WAAW,QAAX,IAAAA,WAAW,CAAEyE,MAAb,GACK,6DAA4DzE,WAAW,CAACyE,MAAZ,CAAmBC,MAAO,OAD3F,GAEI,OAPR;MASE,aAAa,EAAE,UAAUC,UAAV,EAAqC;QAClD5E,mBAAmB,CAAC4E,UAAD,CAAnB;MACD,CAXH;MAYE,EAAE,EAAE,EAZN;MAaE,aAAa,EAAE,YAAkB;QAC/B5E,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;MACD,CAfH;MAgBE,UAAU,EAAEA;IAhBd;MAAA;MAAA;MAAA;IAAA,QADF,eAmBE,QAAC,YAAD;MAAA,wBACE,QAAC,SAAD;QAAA,wBACE,QAAC,WAAD;UAAA,WACGW,iBADH,aAEGA,iBAAiB,KAAK,CAAtB,IAA2B,GAF9B;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAKE,QAAC,WAAD;UACE,QAAQ,EAAE,KADZ;UAEE,QAAQ,EAAE,KAFZ;UAGE,WAAW,EAAC,sBAHd;UAIE,QAAQ,EAAEtB,QAAQ,CACfyF,KAAD,IAAWrC,iBAAiB,CAAC,aAAD,EAAgBqC,KAAK,CAACC,MAAN,CAAaC,KAA7B,CADZ,EAEhB,GAFgB;QAJpB;UAAA;UAAA;UAAA;QAAA,QALF,eAcE,QAAC,cAAD;UACE,SAAS,EAAC,QADZ;UAEE,aAAa,EAAC,KAFhB;UAGE,OAAO,EAAEvE,qBAHX;UAIE,cAAc,0BAAE+B,YAAY,CAAC,QAAD,CAAd,mCAA4B,EAJ5C;UAKE,iBAAiB,EAAGyC,OAAD,IACjBvC,oBAAoB,CAAC,QAAD,EAAWuC,OAAX,CANxB;UAQE,KAAK;QARP;UAAA;UAAA;UAAA;QAAA,QAdF,eAwBE,QAAC,cAAD;UACE,SAAS,EAAC,MADZ;UAEE,aAAa,EAAC,KAFhB;UAGE,OAAO,EAAEvE,mBAHX;UAIE,cAAc,wBAAE8B,YAAY,CAAC,MAAD,CAAd,iCAA0B,EAJ1C;UAKE,iBAAiB,EAAGyC,OAAD,IACjBvC,oBAAoB,CAAC,MAAD,EAASuC,OAAT;QANxB;UAAA;UAAA;UAAA;QAAA,QAxBF,eAiCE,QAAC,iBAAD;UAAmB,OAAO,EAAC,WAA3B;UAAuC,OAAO,EAAEtC,kBAAhD;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAjCF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAsCE,QAAC,mBAAD;QAAA,uBACE,QAAC,yBAAD;UACE,OAAO,EAAE7C,OADX;UAEE,SAAS,EAAES;QAFb;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAtCF;IAAA;MAAA;MAAA;MAAA;IAAA,QAnBF,eAgEE,QAAC,WAAD;MACE,YAAY,EAAGW,IAAD,IACZA,IAAI,CAACoC,SAAL,GAAiBpC,IAAI,CAACoC,SAAL,CAAeG,QAAf,EAAjB,GAA6C,EAFjD;MAIE,WAAW,EAAE;QACXyB,WAAW,EAAGJ,KAAD,IAAW/E,UAAU,CAAC+E,KAAK,CAAC9C,GAAP,CADvB;QAEXmD,mBAAmB,EAAE/C,cAFV;QAGXgD,UAAU,EAAEzG,oBAHD;QAIX0G,SAAS,EAAE,EAJA;QAKXC,YAAY,EAAE,EALH;QAMXC,sBAAsB,EAAE,IANb;QAOXC,aAAa,EAAE;UAAEC,SAAS,EAAE;QAAb,CAPJ;QAQXC,mBAAmB,EAAE5E,6BARV;QASX6E,aAAa,EAAE;UACb,iBAAkBC,CAAD,IAAuB;YACtC,MAAM1D,MAAM,GAAG0D,CAAC,CAAC5D,GAAF,CAAM6D,QAAN,CAAe,QAAf,EAAyBD,CAAC,CAAC3E,IAA3B,CAAf;YACA,OAAOiB,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,UAA3C;UACD,CAJY;UAKb,cAAe0D,CAAD,IAAuB;YACnC,MAAM1D,MAAM,GAAG0D,CAAC,CAAC5D,GAAF,CAAM6D,QAAN,CAAe,QAAf,EAAyBD,CAAC,CAAC3E,IAA3B,CAAf;YACA,OAAOiB,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,UAA3C;UACD;QARY;MATJ,CAJf;MAwBE,uBAAuB,EAAEU,uBAxB3B;MAyBE,sBAAsB,EAAEC;IAzB1B;MAAA;MAAA;MAAA;IAAA,QAhEF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8FD,CAlTM;;GAAMvD,U;UAMcrB,c,EAKLE,oD,EACHE,c,EACoBY,kC,EAEnBhB,c,EAoGdkB,S;;;KAnHOG,U"},"metadata":{},"sourceType":"module"}