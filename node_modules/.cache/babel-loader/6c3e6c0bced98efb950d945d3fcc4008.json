{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { formatEventType, ISODateToFormat } from './gridUtils';\n\nconst description = ({\n  eventData\n}) => {\n  var _eventData$tenorFinal, _eventData$underlierL;\n\n  const months = ((_eventData$tenorFinal = eventData.tenorFinal) != null ? _eventData$tenorFinal : 0) * 12;\n  const internalName = eventData.structureNameInternal;\n  const underliers = (_eventData$underlierL = eventData.underlierList) == null ? void 0 : _eventData$underlierL.map(u => {\n    return ' ' + u.ticker;\n  });\n  return months + 'M ' + internalName + ' linked to ' + underliers;\n};\n\nconst dateTitle = ({\n  eventData\n}) => {\n  if (eventData.confirmationType !== null) {\n    var _eventData$confirmati;\n\n    return (_eventData$confirmati = eventData.confirmationType) != null && _eventData$confirmati.includes('Maturity') ? 'Final Valuation Date' : 'Observation Date';\n  }\n\n  return;\n};\n\nconst paymentDateTitle = ({\n  eventData\n}) => {\n  if (eventData.confirmationType !== null) {\n    var _eventData$eventType;\n\n    return (_eventData$eventType = eventData.eventType) != null && _eventData$eventType.includes('Maturity') ? 'Maturity Date' : 'Payment Date';\n  }\n\n  return;\n};\n\nconst formatEmailPayout = (eventData, payout) => {\n  return eventData.activeUnderlier ? eventData.activeUnderlier + ': ' + payout : payout;\n};\n\nexport const getTemplateValues = (eventData, payout) => {\n  var _eventData$underlierL2;\n\n  const templateValues = {\n    eventType: formatEventType(eventData.confirmationType),\n    structureNameInternal: eventData.structureNameInternal,\n    productSymbol: eventData.productSymbol,\n    isin: eventData.productIdentifier,\n    description: description({\n      eventData\n    }),\n    issuer: eventData.issuer,\n    underlierList: (_eventData$underlierL2 = eventData.underlierList) == null ? void 0 : _eventData$underlierL2.map(u => u.ticker).join(', '),\n    tradeDate: ISODateToFormat(eventData.tradeDate),\n    event: formatEventType(eventData.confirmationType),\n    payout: formatEmailPayout(eventData, payout),\n    dateTitle: dateTitle({\n      eventData\n    }),\n    dateValue: ISODateToFormat(eventData.observationDate),\n    paymentDateTitle: paymentDateTitle({\n      eventData\n    }),\n    paymentDateValue: ISODateToFormat(eventData.settlementDate)\n  };\n  Object.keys(templateValues).forEach(key => {\n    if (!templateValues[key]) templateValues[key] = '';\n  });\n  return templateValues;\n};","map":{"version":3,"names":["formatEventType","ISODateToFormat","description","eventData","months","tenorFinal","internalName","structureNameInternal","underliers","underlierList","map","u","ticker","dateTitle","confirmationType","includes","paymentDateTitle","eventType","formatEmailPayout","payout","activeUnderlier","getTemplateValues","templateValues","productSymbol","isin","productIdentifier","issuer","join","tradeDate","event","dateValue","observationDate","paymentDateValue","settlementDate","Object","keys","forEach","key"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/utils/emailUtils.ts"],"sourcesContent":["import { EventProductData } from '@luma-fe-workspace/redux';\nimport { formatEventType, ISODateToFormat } from './gridUtils';\n\ninterface Props {\n  eventData: EventProductData;\n}\n\nconst description = ({ eventData }: Props) => {\n  const months = (eventData.tenorFinal ?? 0) * 12;\n  const internalName = eventData.structureNameInternal;\n  const underliers = eventData.underlierList?.map((u) => {\n    return ' ' + u.ticker;\n  });\n  return months + 'M ' + internalName + ' linked to ' + underliers;\n};\n\nconst dateTitle = ({ eventData }: Props) => {\n  if (eventData.confirmationType !== null) {\n    return eventData.confirmationType?.includes('Maturity')\n      ? 'Final Valuation Date'\n      : 'Observation Date';\n  }\n  return;\n};\n\nconst paymentDateTitle = ({ eventData }: Props) => {\n  if (eventData.confirmationType !== null) {\n    return eventData.eventType?.includes('Maturity')\n      ? 'Maturity Date'\n      : 'Payment Date';\n  }\n  return;\n};\n\nconst formatEmailPayout = (\n  eventData: EventProductData,\n  payout: string\n): string => {\n  return eventData.activeUnderlier\n    ? eventData.activeUnderlier + ': ' + payout\n    : payout;\n};\n\nexport const getTemplateValues = (\n  eventData: EventProductData,\n  payout: string\n): { [key: string]: string | undefined } => {\n  const templateValues: { [key: string]: string | undefined } = {\n    eventType: formatEventType(eventData.confirmationType),\n    structureNameInternal: eventData.structureNameInternal,\n    productSymbol: eventData.productSymbol,\n    isin: eventData.productIdentifier,\n    description: description({ eventData }),\n    issuer: eventData.issuer,\n    underlierList: eventData.underlierList?.map((u) => u.ticker).join(', '),\n    tradeDate: ISODateToFormat(eventData.tradeDate),\n    event: formatEventType(eventData.confirmationType),\n    payout: formatEmailPayout(eventData, payout),\n    dateTitle: dateTitle({ eventData }),\n    dateValue: ISODateToFormat(eventData.observationDate),\n    paymentDateTitle: paymentDateTitle({ eventData }),\n    paymentDateValue: ISODateToFormat(eventData.settlementDate),\n  };\n\n  Object.keys(templateValues).forEach((key) => {\n    if (!templateValues[key]) templateValues[key] = '';\n  });\n  return templateValues;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}