{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport { EventCalculationStatuses } from '../components/AGGridTable/AGGridTable';\nimport { DateFormatter, DateHelper } from '@luma-fe-workspace/utility';\n\nconst addSettlementRates = (event, status) => Object.assign({\n  status\n}, event.cashSettlementRates && {\n  cashSettlementRates: event.cashSettlementRates\n}, event.physicalSettlements && {\n  physicalSettlementRates: event.physicalSettlements\n});\n\nexport const formatEventStatus = event => {\n  var _event$observationDat;\n\n  const finalDate = (_event$observationDat = event.observationDate) != null ? _event$observationDat : event.eventDate;\n  if (!finalDate) return undefined;\n  const now = new Date();\n  now.setUTCHours(0, 0, 0, 0); //Go one second into the past for simple comparisons of dates, as they're always midnight\n\n  now.setSeconds(now.getSeconds() - 1);\n  const date = new Date(finalDate); // if the event occurs today, or in the future\n\n  if (date >= now) {\n    return addSettlementRates(event, EventCalculationStatuses.UPCOMING);\n  } // if the event is in the past\n\n\n  if (date < now) {\n    if (!event.eventStatus) return addSettlementRates(event, EventCalculationStatuses.PENDING);\n    if (event.eventStatus === 'CONFIRMED') return addSettlementRates(event, EventCalculationStatuses.CONFIRMED);\n  }\n\n  if (event.eventStatus === 'PENDING') return addSettlementRates(event, EventCalculationStatuses.PENDING);\n\n  if (event.eventStatus === 'NOT_CONFIRMED') {\n    if (event.eventType === 'MATURITY') return addSettlementRates(event, EventCalculationStatuses.NOT_MATURED);\n    if (event.eventType === 'ISSUER_CALL' || event.eventType === 'AUTO_CALL') return addSettlementRates(event, EventCalculationStatuses.NOT_CALLED);\n    if (event.eventType === 'COUPON_PAYMENT') return addSettlementRates(event, EventCalculationStatuses.MISSED);\n  }\n\n  if (event.eventStatus === 'REQUIRES_RESOLUTION') return addSettlementRates(event, EventCalculationStatuses.REVIEW);\n  return {\n    status: EventCalculationStatuses.UNKNOWN\n  };\n};\nexport let EventTypesDisplay;\n\n(function (EventTypesDisplay) {\n  EventTypesDisplay[\"AUTO_CALL\"] = \"Auto Call\";\n  EventTypesDisplay[\"ISSUER_CALL\"] = \"Issuer Call\";\n  EventTypesDisplay[\"MATURITY\"] = \"Maturity\";\n  EventTypesDisplay[\"COUPON\"] = \"Coupon Payment\";\n})(EventTypesDisplay || (EventTypesDisplay = {}));\n\nexport const formatEventType = eventType => {\n  if (eventType) {\n    switch (eventType) {\n      case 'COUPON_PAYMENT':\n        return EventTypesDisplay.COUPON;\n\n      case 'MATURITY':\n        return EventTypesDisplay.MATURITY;\n\n      case 'AUTO_CALL':\n        return EventTypesDisplay.AUTO_CALL;\n\n      case 'ISSUER_CALL':\n        return EventTypesDisplay.ISSUER_CALL;\n\n      case 'PDW_COUPON_DATE':\n        return EventTypesDisplay.COUPON;\n\n      case 'PDW_FINAL_VALUATION_DATE':\n        return EventTypesDisplay.MATURITY;\n\n      case 'Auto Call':\n        return EventTypesDisplay.AUTO_CALL;\n\n      case 'Issuer Call':\n        return EventTypesDisplay.ISSUER_CALL;\n\n      default:\n        return undefined;\n    }\n  } else {\n    return undefined;\n  }\n};\nexport let RegTypesDisplay;\n\n(function (RegTypesDisplay) {\n  RegTypesDisplay[\"REG_S\"] = \"Reg S\";\n  RegTypesDisplay[\"REGISTERED_NOTE\"] = \"Registered\";\n  RegTypesDisplay[\"_3A2\"] = \"3a2\";\n  RegTypesDisplay[\"UNKNOWN\"] = \"Unknown\";\n})(RegTypesDisplay || (RegTypesDisplay = {}));\n\nexport const formatRegType = regType => {\n  if (regType) {\n    switch (regType) {\n      case 'REG_S':\n        return RegTypesDisplay.REG_S;\n\n      case 'REGISTERED_NOTE':\n        return RegTypesDisplay.REGISTERED_NOTE;\n\n      case '_3A2':\n        return RegTypesDisplay._3A2;\n\n      default:\n        return RegTypesDisplay.UNKNOWN;\n    }\n  } else {\n    return RegTypesDisplay.UNKNOWN;\n  }\n};\nexport const ISODateToFormat = (date, dateFormat = 'MM/dd/yyyy') => {\n  if (!date) return undefined;\n  return DateFormatter.formatLocalDate(new Date(new Date(date).toLocaleString('en-US', {\n    timeZone: 'UTC'\n  })), dateFormat);\n};\n_c = ISODateToFormat;\nexport const observationDateFilterComparator = (dateA, dateB) => {\n  if (dateA === dateB) return 0;\n  return DateHelper.isDateBefore(new Date(dateA), new Date(dateB)) ? -1 : 1;\n};\nexport const getPhysicalSettlementData = physicalSettlements => {\n  if (!physicalSettlements) return {\n    cash: undefined,\n    shares: undefined\n  };\n  return {\n    shares: physicalSettlements.find(settlement => settlement.physicalSettlementType === 'Shares' && (settlement.issuerValue || settlement.lumaValue || settlement.value)),\n    cash: physicalSettlements.find(settlement => settlement.physicalSettlementType === 'Cash in Lieu')\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ISODateToFormat\");","map":{"version":3,"names":["EventCalculationStatuses","DateFormatter","DateHelper","addSettlementRates","event","status","cashSettlementRates","physicalSettlements","physicalSettlementRates","formatEventStatus","finalDate","observationDate","eventDate","undefined","now","Date","setUTCHours","setSeconds","getSeconds","date","UPCOMING","eventStatus","PENDING","CONFIRMED","eventType","NOT_MATURED","NOT_CALLED","MISSED","REVIEW","UNKNOWN","EventTypesDisplay","formatEventType","COUPON","MATURITY","AUTO_CALL","ISSUER_CALL","RegTypesDisplay","formatRegType","regType","REG_S","REGISTERED_NOTE","_3A2","ISODateToFormat","dateFormat","formatLocalDate","toLocaleString","timeZone","observationDateFilterComparator","dateA","dateB","isDateBefore","getPhysicalSettlementData","cash","shares","find","settlement","physicalSettlementType","issuerValue","lumaValue","value"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/utils/gridUtils.ts"],"sourcesContent":["import { EventProductData, PhysicalSettlement } from '@luma-fe-workspace/redux';\nimport {\n  EventStatus,\n  EventCalculationStatuses,\n} from '../components/AGGridTable/AGGridTable';\nimport { DateFormatter, DateHelper } from '@luma-fe-workspace/utility';\n\nconst addSettlementRates = (\n  event: EventProductData,\n  status: EventCalculationStatuses\n): EventStatus => ({\n  status,\n  ...(event.cashSettlementRates && {\n    cashSettlementRates: event.cashSettlementRates,\n  }),\n  ...(event.physicalSettlements && {\n    physicalSettlementRates: event.physicalSettlements,\n  }),\n});\n\nexport const formatEventStatus = (\n  event: EventProductData\n): EventStatus | undefined => {\n  const finalDate = event.observationDate ?? event.eventDate;\n\n  if (!finalDate) return undefined;\n\n  const now = new Date();\n  now.setUTCHours(0, 0, 0, 0);\n  //Go one second into the past for simple comparisons of dates, as they're always midnight\n  now.setSeconds(now.getSeconds() - 1);\n  const date = new Date(finalDate);\n  // if the event occurs today, or in the future\n  if (date >= now) {\n    return addSettlementRates(event, EventCalculationStatuses.UPCOMING);\n  }\n  // if the event is in the past\n  if (date < now) {\n    if (!event.eventStatus)\n      return addSettlementRates(event, EventCalculationStatuses.PENDING);\n    if (event.eventStatus === 'CONFIRMED')\n      return addSettlementRates(event, EventCalculationStatuses.CONFIRMED);\n  }\n\n  if (event.eventStatus === 'PENDING')\n    return addSettlementRates(event, EventCalculationStatuses.PENDING);\n  if (event.eventStatus === 'NOT_CONFIRMED') {\n    if (event.eventType === 'MATURITY')\n      return addSettlementRates(event, EventCalculationStatuses.NOT_MATURED);\n    if (event.eventType === 'ISSUER_CALL' || event.eventType === 'AUTO_CALL')\n      return addSettlementRates(event, EventCalculationStatuses.NOT_CALLED);\n    if (event.eventType === 'COUPON_PAYMENT')\n      return addSettlementRates(event, EventCalculationStatuses.MISSED);\n  }\n\n  if (event.eventStatus === 'REQUIRES_RESOLUTION')\n    return addSettlementRates(event, EventCalculationStatuses.REVIEW);\n  return { status: EventCalculationStatuses.UNKNOWN };\n};\n\nexport enum EventTypesDisplay {\n  AUTO_CALL = 'Auto Call',\n  ISSUER_CALL = 'Issuer Call',\n  MATURITY = 'Maturity',\n  COUPON = 'Coupon Payment',\n}\nexport const formatEventType = (\n  eventType: string | undefined\n): EventTypesDisplay | undefined => {\n  if (eventType) {\n    switch (eventType) {\n      case 'COUPON_PAYMENT':\n        return EventTypesDisplay.COUPON;\n      case 'MATURITY':\n        return EventTypesDisplay.MATURITY;\n      case 'AUTO_CALL':\n        return EventTypesDisplay.AUTO_CALL;\n      case 'ISSUER_CALL':\n        return EventTypesDisplay.ISSUER_CALL;\n      case 'PDW_COUPON_DATE':\n        return EventTypesDisplay.COUPON;\n      case 'PDW_FINAL_VALUATION_DATE':\n        return EventTypesDisplay.MATURITY;\n      case 'Auto Call':\n        return EventTypesDisplay.AUTO_CALL;\n      case 'Issuer Call':\n        return EventTypesDisplay.ISSUER_CALL;\n      default:\n        return undefined;\n    }\n  } else {\n    return undefined;\n  }\n};\n\nexport enum RegTypesDisplay {\n  REG_S = 'Reg S',\n  REGISTERED_NOTE = 'Registered',\n  _3A2 = '3a2',\n  UNKNOWN = 'Unknown',\n}\n\nexport const formatRegType = (\n  regType: string | undefined\n): RegTypesDisplay | undefined => {\n  if (regType) {\n    switch (regType) {\n      case 'REG_S':\n        return RegTypesDisplay.REG_S;\n      case 'REGISTERED_NOTE':\n        return RegTypesDisplay.REGISTERED_NOTE;\n      case '_3A2':\n        return RegTypesDisplay._3A2;\n      default:\n        return RegTypesDisplay.UNKNOWN;\n    }\n  } else {\n    return RegTypesDisplay.UNKNOWN;\n  }\n};\n\ntype DateFormats =\n  | 'yyyy-MM-dd'\n  | 'dd-MM-yyyy'\n  | 'MMM dd, yyyy'\n  | 'MM/dd/yyyy'\n  | 'MM-dd-yyyy';\nexport const ISODateToFormat = (\n  date: string | undefined,\n  dateFormat: DateFormats = 'MM/dd/yyyy'\n): undefined | string => {\n  if (!date) return undefined;\n  return DateFormatter.formatLocalDate(\n    new Date(new Date(date).toLocaleString('en-US', { timeZone: 'UTC' })),\n    dateFormat\n  );\n};\n\nexport const observationDateFilterComparator = (\n  dateA: string,\n  dateB: string\n) => {\n  if (dateA === dateB) return 0;\n  return DateHelper.isDateBefore(new Date(dateA), new Date(dateB)) ? -1 : 1;\n};\n\nexport const getPhysicalSettlementData = (\n  physicalSettlements: PhysicalSettlement[] | undefined\n): {\n  cash?: PhysicalSettlement | undefined;\n  shares: PhysicalSettlement | undefined;\n} => {\n  if (!physicalSettlements) return { cash: undefined, shares: undefined };\n  return {\n    shares: physicalSettlements.find(\n      (settlement: PhysicalSettlement) =>\n        settlement.physicalSettlementType === 'Shares' &&\n        (settlement.issuerValue || settlement.lumaValue || settlement.value)\n    ),\n    cash: physicalSettlements.find(\n      (settlement: PhysicalSettlement) =>\n        settlement.physicalSettlementType === 'Cash in Lieu'\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}