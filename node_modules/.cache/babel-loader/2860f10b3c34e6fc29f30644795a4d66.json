{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/ColumnChart/ColumnChartCard.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { DISPLAY_EVENT_TYPE, selectLifecycleEventRequestObject, useAppSelector, useGetPayoutHorizonUsingGetQuery } from '@luma-fe-workspace/redux';\nimport { addMonths, endOfMonth } from 'date-fns';\nimport { InfoWidget } from '../InfoWidget/InfoWidget';\nimport { ColumnChart } from './ColumnChart';\nimport { Spinner } from '@luma-fe-workspace/design-system';\nimport { CustomLumaStatus } from '../CustomLumaStatus/CustomLumaStatus.styles';\nimport { ColumnChartWrapper } from './ColumnChartCard.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ColumnChartCard = ({\n  title,\n  styles,\n  highchartOptions\n}) => {\n  _s();\n\n  const mockedConvertedData = {\n    Maturing: [],\n    'Call Opportunity': [],\n    'Coupon Opportunity': []\n  };\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const cutoffDateNum = Date.parse(eventRequestObject.dateRange.endDate);\n  const cutoffDate = isNaN(cutoffDateNum) ? new Date(endOfMonth(addMonths(new Date(), 18)).setHours(23, 59, 0, 0)) // Default to 18 months from today\n  : new Date(cutoffDateNum);\n  const response = useGetPayoutHorizonUsingGetQuery(eventRequestObject);\n  const {\n    data: payoutHorizonDetails = []\n  } = response;\n  payoutHorizonDetails.forEach(day => {\n    const dayAsDate = new Date(day.date);\n    if (dayAsDate > cutoffDate) return;\n    day.events.forEach(event => {\n      var _mockedConvertedData$;\n\n      const displayEventType = DISPLAY_EVENT_TYPE[event.eventType];\n      (_mockedConvertedData$ = mockedConvertedData[displayEventType]) == null ? void 0 : _mockedConvertedData$.push([dayAsDate.getTime(), event.value]);\n    });\n  });\n  const columnChartData = [...Object.keys(mockedConvertedData).map(eventType => {\n    return {\n      name: eventType,\n      data: mockedConvertedData[eventType]\n    };\n  })];\n\n  const columnChart = /*#__PURE__*/_jsxDEV(ColumnChart, {\n    data: columnChartData,\n    highchartOptions: highchartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n\n  const widgetView = response.isFetching ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this) : response.isError ? /*#__PURE__*/_jsxDEV(CustomLumaStatus, {\n    variant: 'failed',\n    ariaLabel: 'Failed Message',\n    titleMessage: 'Request Failed',\n    helperMessage: 'Something went wrong!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(ColumnChartWrapper, {\n    children: columnChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(InfoWidget, {\n    title: title,\n    content: widgetView,\n    styles: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ColumnChartCard, \"CJjv5WKSZ5iG8fsE9I29wXkYQaQ=\", false, function () {\n  return [useAppSelector, useGetPayoutHorizonUsingGetQuery];\n});\n\n_c = ColumnChartCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColumnChartCard\");","map":{"version":3,"names":["DISPLAY_EVENT_TYPE","selectLifecycleEventRequestObject","useAppSelector","useGetPayoutHorizonUsingGetQuery","addMonths","endOfMonth","InfoWidget","ColumnChart","Spinner","CustomLumaStatus","ColumnChartWrapper","ColumnChartCard","title","styles","highchartOptions","mockedConvertedData","Maturing","eventRequestObject","cutoffDateNum","Date","parse","dateRange","endDate","cutoffDate","isNaN","setHours","response","data","payoutHorizonDetails","forEach","day","dayAsDate","date","events","event","displayEventType","eventType","push","getTime","value","columnChartData","Object","keys","map","name","columnChart","widgetView","isFetching","isError"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/lifecyclemanager/src/components/ColumnChart/ColumnChartCard.tsx"],"sourcesContent":["import {\n  DISPLAY_EVENT_TYPE,\n  selectLifecycleEventRequestObject,\n  useAppSelector,\n  useGetPayoutHorizonUsingGetQuery,\n} from '@luma-fe-workspace/redux';\nimport { addMonths, endOfMonth } from 'date-fns';\nimport { SeriesColumnOptions } from 'highcharts';\nimport { InfoWidget } from '../InfoWidget/InfoWidget';\nimport { ColumnChart } from './ColumnChart';\nimport { Spinner } from '@luma-fe-workspace/design-system';\nimport { CustomLumaStatus } from '../CustomLumaStatus/CustomLumaStatus.styles';\nimport { ColumnChartWrapper } from './ColumnChartCard.styles';\nexport interface ColumnChartCardProps {\n  title: string;\n  styles?: string;\n  highchartOptions?: Highcharts.Options;\n}\n\nexport const ColumnChartCard = ({\n  title,\n  styles,\n  highchartOptions,\n}: ColumnChartCardProps) => {\n  const mockedConvertedData: {\n    /**\n     * Each of these is effectively a `[number, number][]` where the first value is\n     * the offset from the first value and the second is the value. For datetimes,\n     * Highcharts prefers milliseconds. See the related property `relativeXValue`\n     */\n    [key in DISPLAY_EVENT_TYPE]: SeriesColumnOptions['data'][];\n  } = {\n    Maturing: [],\n    'Call Opportunity': [],\n    'Coupon Opportunity': [],\n  };\n  const eventRequestObject = useAppSelector(selectLifecycleEventRequestObject);\n  const cutoffDateNum: number = Date.parse(\n    eventRequestObject.dateRange.endDate\n  );\n  const cutoffDate: Date = isNaN(cutoffDateNum)\n    ? new Date(endOfMonth(addMonths(new Date(), 18)).setHours(23, 59, 0, 0)) // Default to 18 months from today\n    : new Date(cutoffDateNum);\n\n  const response = useGetPayoutHorizonUsingGetQuery(eventRequestObject);\n  const { data: payoutHorizonDetails = [] } = response;\n\n  payoutHorizonDetails.forEach((day) => {\n    const dayAsDate = new Date(day.date);\n    if (dayAsDate > cutoffDate) return;\n    day.events.forEach((event) => {\n      const displayEventType = DISPLAY_EVENT_TYPE[event.eventType];\n      mockedConvertedData[displayEventType]?.push([\n        dayAsDate.getTime(),\n        event.value,\n      ]);\n    });\n  });\n  const columnChartData = [\n    ...Object.keys(mockedConvertedData).map((eventType) => {\n      return {\n        name: eventType,\n        data: mockedConvertedData[eventType as DISPLAY_EVENT_TYPE],\n      };\n    }),\n  ];\n\n  const columnChart = (\n    <ColumnChart data={columnChartData} highchartOptions={highchartOptions} />\n  );\n\n  const widgetView = response.isFetching ? (\n    <Spinner />\n  ) : response.isError ? (\n    <CustomLumaStatus\n      variant={'failed'}\n      ariaLabel={'Failed Message'}\n      titleMessage={'Request Failed'}\n      helperMessage={'Something went wrong!'}\n    />\n  ) : (\n    <ColumnChartWrapper>{columnChart}</ColumnChartWrapper>\n  );\n\n  return <InfoWidget title={title} content={widgetView} styles={styles} />;\n};\n"],"mappings":";;;;;AAAA,SACEA,kBADF,EAEEC,iCAFF,EAGEC,cAHF,EAIEC,gCAJF,QAKO,0BALP;AAMA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,UAAtC;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,gBAAT,QAAiC,6CAAjC;AACA,SAASC,kBAAT,QAAmC,0BAAnC;;AAOA,OAAO,MAAMC,eAAe,GAAG,CAAC;EAC9BC,KAD8B;EAE9BC,MAF8B;EAG9BC;AAH8B,CAAD,KAIH;EAAA;;EAC1B,MAAMC,mBAOL,GAAG;IACFC,QAAQ,EAAE,EADR;IAEF,oBAAoB,EAFlB;IAGF,sBAAsB;EAHpB,CAPJ;EAYA,MAAMC,kBAAkB,GAAGf,cAAc,CAACD,iCAAD,CAAzC;EACA,MAAMiB,aAAqB,GAAGC,IAAI,CAACC,KAAL,CAC5BH,kBAAkB,CAACI,SAAnB,CAA6BC,OADD,CAA9B;EAGA,MAAMC,UAAgB,GAAGC,KAAK,CAACN,aAAD,CAAL,GACrB,IAAIC,IAAJ,CAASd,UAAU,CAACD,SAAS,CAAC,IAAIe,IAAJ,EAAD,EAAa,EAAb,CAAV,CAAV,CAAsCM,QAAtC,CAA+C,EAA/C,EAAmD,EAAnD,EAAuD,CAAvD,EAA0D,CAA1D,CAAT,CADqB,CACkD;EADlD,EAErB,IAAIN,IAAJ,CAASD,aAAT,CAFJ;EAIA,MAAMQ,QAAQ,GAAGvB,gCAAgC,CAACc,kBAAD,CAAjD;EACA,MAAM;IAAEU,IAAI,EAAEC,oBAAoB,GAAG;EAA/B,IAAsCF,QAA5C;EAEAE,oBAAoB,CAACC,OAArB,CAA8BC,GAAD,IAAS;IACpC,MAAMC,SAAS,GAAG,IAAIZ,IAAJ,CAASW,GAAG,CAACE,IAAb,CAAlB;IACA,IAAID,SAAS,GAAGR,UAAhB,EAA4B;IAC5BO,GAAG,CAACG,MAAJ,CAAWJ,OAAX,CAAoBK,KAAD,IAAW;MAAA;;MAC5B,MAAMC,gBAAgB,GAAGnC,kBAAkB,CAACkC,KAAK,CAACE,SAAP,CAA3C;MACA,yBAAArB,mBAAmB,CAACoB,gBAAD,CAAnB,2CAAuCE,IAAvC,CAA4C,CAC1CN,SAAS,CAACO,OAAV,EAD0C,EAE1CJ,KAAK,CAACK,KAFoC,CAA5C;IAID,CAND;EAOD,CAVD;EAWA,MAAMC,eAAe,GAAG,CACtB,GAAGC,MAAM,CAACC,IAAP,CAAY3B,mBAAZ,EAAiC4B,GAAjC,CAAsCP,SAAD,IAAe;IACrD,OAAO;MACLQ,IAAI,EAAER,SADD;MAELT,IAAI,EAAEZ,mBAAmB,CAACqB,SAAD;IAFpB,CAAP;EAID,CALE,CADmB,CAAxB;;EASA,MAAMS,WAAW,gBACf,QAAC,WAAD;IAAa,IAAI,EAAEL,eAAnB;IAAoC,gBAAgB,EAAE1B;EAAtD;IAAA;IAAA;IAAA;EAAA,QADF;;EAIA,MAAMgC,UAAU,GAAGpB,QAAQ,CAACqB,UAAT,gBACjB,QAAC,OAAD;IAAA;IAAA;IAAA;EAAA,QADiB,GAEfrB,QAAQ,CAACsB,OAAT,gBACF,QAAC,gBAAD;IACE,OAAO,EAAE,QADX;IAEE,SAAS,EAAE,gBAFb;IAGE,YAAY,EAAE,gBAHhB;IAIE,aAAa,EAAE;EAJjB;IAAA;IAAA;IAAA;EAAA,QADE,gBAQF,QAAC,kBAAD;IAAA,UAAqBH;EAArB;IAAA;IAAA;IAAA;EAAA,QAVF;EAaA,oBAAO,QAAC,UAAD;IAAY,KAAK,EAAEjC,KAAnB;IAA0B,OAAO,EAAEkC,UAAnC;IAA+C,MAAM,EAAEjC;EAAvD;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAlEM;;GAAMF,e;UAiBgBT,c,EAQVC,gC;;;KAzBNQ,e"},"metadata":{},"sourceType":"module"}