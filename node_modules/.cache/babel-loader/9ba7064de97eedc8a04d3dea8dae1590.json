{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQSearch/RFQSearch.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { useEffect, useState } from 'react';\nimport { useAppSelector, selectSecondariesQuotedAvailableRFQs, secondariesSlice, useAppDispatch, selectMyRespondedRFQs, selectJwt } from '@luma-fe-workspace/redux';\nimport { defaultQuoteDeadlineOffsetMs } from '../TableCellTimeOffset/TableCellTimeOffset';\nimport { ResultsText, RFQActionBar, RFQActionBarSection, RFQSearchWrapper } from './RFQSearch.styles';\nimport { AGGridTable, exportCSV, exportExcel } from '../AGGridTable/AGGridTable';\nimport { RFQSearchColumns } from './columnHelpers';\nimport { refreshGridRowsOnMinute } from '../../utils/refreshGridRowsOnMinute';\nimport { useGetProductDocumentUsingGetQuery } from '../../utils/pdfHooks';\nimport { SecondariesExportDropdown } from '../SecondariesExportDropdown/SecondariesExportDropdown';\nimport { FilterBar, FilterClearButton, FilterInput } from '../AGGridTable/ExternalFilter/ExternalFilter.styles';\nimport { FilterCheckBox } from '../FilterCheckbox/FilterCheckbox';\nimport { useFilter } from '../AGGridTable/hooks/useFilter';\nimport { RFQSearchFilters } from './RFQSearchFilters';\nimport debounce from 'lodash.debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//IMPORTANT\n//Please note that RFQ Search serves as a blotter for both the RFQ Search and LP Blotter tables.\n//This decision was made due to the heavy similarity between the two blotters, with only the filtering and selector\n//being different. We use the same slice, but the LP Blotter selector filters down the data more so that it only shows\n//RFQs that the user has interacted with\nexport const RFQSearch = ({\n  liveRFQData,\n  setLiveRFQData,\n  blotterType\n}) => {\n  _s();\n\n  var _filterValues$status, _filterValues$side;\n\n  const [gridApi, setGridApi] = useState();\n  const JWT = useAppSelector(selectJwt);\n  const dispatch = useAppDispatch();\n  const {\n    setProductDocumentObject\n  } = useGetProductDocumentUsingGetQuery();\n  const availableRFQs = useAppSelector(blotterType === 'RFQ Search' ? selectSecondariesQuotedAvailableRFQs : selectMyRespondedRFQs);\n  const statusCheckboxOptions = ['Open', 'Pending', 'Filled', 'Canceled', 'Expired'];\n  const sideCheckboxOptions = ['Bid Wanted', 'Offer Wanted'];\n  const [displayedRowCount, setDisplayedRowCount] = useState(gridApi == null ? void 0 : gridApi.getDisplayedRowCount());\n\n  const getRFQSearchContextMenuItems = params => {\n    var _params$node, _rowData$productIdent;\n\n    const rowData = (_params$node = params.node) == null ? void 0 : _params$node.data;\n\n    if (!rowData) {\n      return [];\n    }\n\n    const productCusipIsin = (_rowData$productIdent = rowData.productIdentifier) == null ? void 0 : _rowData$productIdent.securityIdentifierValue;\n    const contextMenuItems = [{\n      name: 'Term Sheet',\n      action: () => {\n        if (productCusipIsin) {\n          setProductDocumentObject({\n            cusip: productCusipIsin,\n            documentType: 'TERM_SHEET'\n          });\n        }\n      }\n    }, {\n      name: 'Performance Report',\n      action: () => {\n        if (productCusipIsin) {\n          setProductDocumentObject({\n            cusip: productCusipIsin,\n            documentType: 'PERFORMANCE_REPORT'\n          });\n        }\n      }\n    }, {\n      name: 'Security Details',\n      action: () => {\n        dispatch(secondariesSlice.actions.setSecurityDetailsCusip(productCusipIsin));\n      }\n    }, {\n      name: 'Export',\n      subMenu: [{\n        name: 'CSV Export',\n        action: () => {\n          exportCSV(params.api, blotterType);\n        }\n      }, {\n        name: 'Excel Export',\n        action: () => {\n          exportExcel(params.api, blotterType);\n        }\n      }]\n    }];\n    return contextMenuItems;\n  };\n\n  const onDataRendered = gridReadyEvent => {\n    gridReadyEvent.columnApi.autoSizeAllColumns();\n    setDisplayedRowCount(gridReadyEvent.api.getDisplayedRowCount());\n  };\n\n  const {\n    filterValues,\n    handleInputFilter,\n    handleCheckboxFilter,\n    handleClearFilters,\n    isExternalFilterPresent,\n    doesExternalFilterPass\n  } = useFilter(RFQSearchFilters);\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.onFilterChanged();\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n    }\n  }, [filterValues, gridApi]);\n  useEffect(() => {\n    if (gridApi) {\n      const gridRowCount = gridApi.getDisplayedRowCount(); // We are checking gridRowCount because we only want to set all the rows on mount\n\n      if (gridRowCount === 0) {\n        gridApi.setRowData(availableRFQs);\n      }\n    }\n  }, [gridApi, availableRFQs]);\n  useEffect(() => {\n    var _newAvailableRFQs$;\n\n    let newAvailableRFQs;\n    const userName = JWT == null ? void 0 : JWT.user_name;\n\n    if (blotterType === 'RFQ Search') {\n      newAvailableRFQs = liveRFQData.filter(RFQ => RFQ.createdByUserId !== userName);\n    } else {\n      newAvailableRFQs = liveRFQData.filter(RFQ => {\n        var _RFQ$quotes;\n\n        return (_RFQ$quotes = RFQ.quotes) == null ? void 0 : _RFQ$quotes.find(quote => quote.createdByUserId && quote.createdByUserId === userName);\n      });\n    }\n\n    if (gridApi && (_newAvailableRFQs$ = newAvailableRFQs[0]) != null && _newAvailableRFQs$.requestId) {\n      const existingRowNode = gridApi.getRowNode(newAvailableRFQs[0].requestId.toString());\n      const quotedRFQs = newAvailableRFQs.map(RFQ => {\n        return Object.assign({}, RFQ, {\n          // Default offset for quote response in minutes\n          quoteDeadline: defaultQuoteDeadlineOffsetMs\n        });\n      });\n\n      if (existingRowNode) {\n        gridApi.applyTransaction({\n          update: quotedRFQs\n        });\n        gridApi.refreshCells({\n          rowNodes: [existingRowNode],\n          force: true\n        });\n      } else {\n        gridApi.applyTransaction({\n          add: quotedRFQs,\n          addIndex: 0\n        });\n      }\n\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n      setLiveRFQData([]);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [liveRFQData, blotterType]);\n  useEffect(() => {\n    if (gridApi) {\n      refreshGridRowsOnMinute(gridApi, ['quoteDeadline', 'account']);\n      return () => {\n        gridApi.destroy();\n      };\n    }\n\n    return;\n  }, [gridApi]);\n  return /*#__PURE__*/_jsxDEV(RFQSearchWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(RFQActionBar, {\n      children: [/*#__PURE__*/_jsxDEV(FilterBar, {\n        children: [/*#__PURE__*/_jsxDEV(ResultsText, {\n          children: [displayedRowCount, \" Result\", displayedRowCount !== 1 && 's']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterInput, {\n          disabled: false,\n          hasError: false,\n          placeholder: \"Filter by CUSIP/ISIN\",\n          onChange: debounce(event => handleInputFilter('cusipOrIsin', event.target.value), 400)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterCheckBox, {\n          fieldText: \"Status\",\n          defaultOption: \"All\",\n          options: statusCheckboxOptions,\n          checkedOptions: (_filterValues$status = filterValues['status']) != null ? _filterValues$status : [],\n          setCheckedOptions: checked => handleCheckboxFilter('status', checked),\n          multi: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterCheckBox, {\n          fieldText: \"Side\",\n          defaultOption: \"All\",\n          options: sideCheckboxOptions,\n          checkedOptions: (_filterValues$side = filterValues['side']) != null ? _filterValues$side : [],\n          setCheckedOptions: checked => handleCheckboxFilter('side', checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterClearButton, {\n          variant: \"secondary\",\n          onClick: handleClearFilters,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RFQActionBarSection, {\n        children: /*#__PURE__*/_jsxDEV(SecondariesExportDropdown, {\n          gridApi: gridApi,\n          tableName: blotterType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AGGridTable, {\n      \"aria-label\": blotterType,\n      getRowNodeId: data => data.requestId ? data.requestId.toString() : '',\n      gridOptions: {\n        onGridReady: event => setGridApi(event.api),\n        onFirstDataRendered: onDataRendered,\n        columnDefs: RFQSearchColumns,\n        rowHeight: 32,\n        headerHeight: 48,\n        suppressLoadingOverlay: true,\n        defaultColDef: {\n          resizable: true\n        },\n        getContextMenuItems: getRFQSearchContextMenuItems,\n        rowClassRules: {\n          'grid-row-even': e => e.rowIndex % 2 === 0,\n          'grid-row-odd': e => e.rowIndex % 2 !== 0,\n          'grid-row-expired': e => e.data.status !== 'OPEN'\n        }\n      },\n      isExternalFilterPresent: isExternalFilterPresent,\n      doesExternalFilterPass: doesExternalFilterPass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RFQSearch, \"paOgea7eFL80VcNtxvMc3NW1mVc=\", false, function () {\n  return [useAppSelector, useAppDispatch, useGetProductDocumentUsingGetQuery, useAppSelector, useFilter];\n});\n\n_c = RFQSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"RFQSearch\");","map":{"version":3,"names":["useEffect","useState","useAppSelector","selectSecondariesQuotedAvailableRFQs","secondariesSlice","useAppDispatch","selectMyRespondedRFQs","selectJwt","defaultQuoteDeadlineOffsetMs","ResultsText","RFQActionBar","RFQActionBarSection","RFQSearchWrapper","AGGridTable","exportCSV","exportExcel","RFQSearchColumns","refreshGridRowsOnMinute","useGetProductDocumentUsingGetQuery","SecondariesExportDropdown","FilterBar","FilterClearButton","FilterInput","FilterCheckBox","useFilter","RFQSearchFilters","debounce","RFQSearch","liveRFQData","setLiveRFQData","blotterType","gridApi","setGridApi","JWT","dispatch","setProductDocumentObject","availableRFQs","statusCheckboxOptions","sideCheckboxOptions","displayedRowCount","setDisplayedRowCount","getDisplayedRowCount","getRFQSearchContextMenuItems","params","rowData","node","data","productCusipIsin","productIdentifier","securityIdentifierValue","contextMenuItems","name","action","cusip","documentType","actions","setSecurityDetailsCusip","subMenu","api","onDataRendered","gridReadyEvent","columnApi","autoSizeAllColumns","filterValues","handleInputFilter","handleCheckboxFilter","handleClearFilters","isExternalFilterPresent","doesExternalFilterPass","onFilterChanged","gridRowCount","setRowData","newAvailableRFQs","userName","user_name","filter","RFQ","createdByUserId","quotes","find","quote","requestId","existingRowNode","getRowNode","toString","quotedRFQs","map","quoteDeadline","applyTransaction","update","refreshCells","rowNodes","force","add","addIndex","destroy","event","target","value","checked","onGridReady","onFirstDataRendered","columnDefs","rowHeight","headerHeight","suppressLoadingOverlay","defaultColDef","resizable","getContextMenuItems","rowClassRules","e","rowIndex","status"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/components/RFQSearch/RFQSearch.tsx"],"sourcesContent":["import {\n  GetContextMenuItemsParams,\n  GridApi,\n  GridReadyEvent,\n  MenuItemDef,\n  RowClassParams,\n} from 'ag-grid-community';\nimport { useEffect, useState } from 'react';\nimport {\n  useAppSelector,\n  RFQSearchQuoted,\n  selectSecondariesQuotedAvailableRFQs,\n  SecondaryRequestForQuote,\n  secondariesSlice,\n  useAppDispatch,\n  selectMyRespondedRFQs,\n  SecondaryQuote,\n  selectJwt,\n} from '@luma-fe-workspace/redux';\n\nimport { defaultQuoteDeadlineOffsetMs } from '../TableCellTimeOffset/TableCellTimeOffset';\nimport {\n  ResultsText,\n  RFQActionBar,\n  RFQActionBarSection,\n  RFQSearchWrapper,\n} from './RFQSearch.styles';\nimport {\n  AGGridTable,\n  exportCSV,\n  exportExcel,\n} from '../AGGridTable/AGGridTable';\nimport { RFQSearchColumns } from './columnHelpers';\nimport { refreshGridRowsOnMinute } from '../../utils/refreshGridRowsOnMinute';\nimport { useGetProductDocumentUsingGetQuery } from '../../utils/pdfHooks';\nimport { SecondariesExportDropdown } from '../SecondariesExportDropdown/SecondariesExportDropdown';\nimport {\n  FilterBar,\n  FilterClearButton,\n  FilterInput,\n} from '../AGGridTable/ExternalFilter/ExternalFilter.styles';\nimport { FilterCheckBox } from '../FilterCheckbox/FilterCheckbox';\nimport { useFilter } from '../AGGridTable/hooks/useFilter';\nimport { RFQSearchFilters } from './RFQSearchFilters';\nimport debounce from 'lodash.debounce';\n\ninterface RFQSearchProps {\n  liveRFQData: SecondaryRequestForQuote[];\n  setLiveRFQData: (data: SecondaryRequestForQuote[]) => void;\n  blotterType: 'RFQ Search' | 'LP Blotter';\n}\n\n//IMPORTANT\n//Please note that RFQ Search serves as a blotter for both the RFQ Search and LP Blotter tables.\n//This decision was made due to the heavy similarity between the two blotters, with only the filtering and selector\n//being different. We use the same slice, but the LP Blotter selector filters down the data more so that it only shows\n//RFQs that the user has interacted with\nexport const RFQSearch = ({\n  liveRFQData,\n  setLiveRFQData,\n  blotterType,\n}: RFQSearchProps) => {\n  const [gridApi, setGridApi] = useState<GridApi>();\n  const JWT = useAppSelector(selectJwt);\n  const dispatch = useAppDispatch();\n  const { setProductDocumentObject } = useGetProductDocumentUsingGetQuery();\n  const availableRFQs = useAppSelector(\n    blotterType === 'RFQ Search'\n      ? selectSecondariesQuotedAvailableRFQs\n      : selectMyRespondedRFQs\n  );\n\n  const statusCheckboxOptions = [\n    'Open',\n    'Pending',\n    'Filled',\n    'Canceled',\n    'Expired',\n  ];\n  const sideCheckboxOptions = ['Bid Wanted', 'Offer Wanted'];\n\n  const [displayedRowCount, setDisplayedRowCount] = useState(\n    gridApi?.getDisplayedRowCount()\n  );\n\n  const getRFQSearchContextMenuItems = (\n    params: GetContextMenuItemsParams\n  ): (string | MenuItemDef)[] => {\n    const rowData: SecondaryRequestForQuote = params.node?.data;\n    if (!rowData) {\n      return [];\n    }\n    const productCusipIsin = rowData.productIdentifier?.securityIdentifierValue;\n    const contextMenuItems: (string | MenuItemDef)[] = [\n      {\n        name: 'Term Sheet',\n        action: () => {\n          if (productCusipIsin) {\n            setProductDocumentObject({\n              cusip: productCusipIsin,\n              documentType: 'TERM_SHEET',\n            });\n          }\n        },\n      },\n      {\n        name: 'Performance Report',\n        action: () => {\n          if (productCusipIsin) {\n            setProductDocumentObject({\n              cusip: productCusipIsin,\n              documentType: 'PERFORMANCE_REPORT',\n            });\n          }\n        },\n      },\n      {\n        name: 'Security Details',\n        action: () => {\n          dispatch(\n            secondariesSlice.actions.setSecurityDetailsCusip(productCusipIsin)\n          );\n        },\n      },\n      {\n        name: 'Export',\n        subMenu: [\n          {\n            name: 'CSV Export',\n            action: () => {\n              exportCSV(params.api, blotterType);\n            },\n          },\n          {\n            name: 'Excel Export',\n            action: () => {\n              exportExcel(params.api, blotterType);\n            },\n          },\n        ],\n      },\n    ];\n    return contextMenuItems;\n  };\n\n  const onDataRendered = (gridReadyEvent: GridReadyEvent) => {\n    gridReadyEvent.columnApi.autoSizeAllColumns();\n    setDisplayedRowCount(gridReadyEvent.api.getDisplayedRowCount());\n  };\n\n  const {\n    filterValues,\n    handleInputFilter,\n    handleCheckboxFilter,\n    handleClearFilters,\n    isExternalFilterPresent,\n    doesExternalFilterPass,\n  } = useFilter(RFQSearchFilters);\n\n  useEffect(() => {\n    if (gridApi) {\n      gridApi.onFilterChanged();\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n    }\n  }, [filterValues, gridApi]);\n\n  useEffect(() => {\n    if (gridApi) {\n      const gridRowCount = gridApi.getDisplayedRowCount();\n      // We are checking gridRowCount because we only want to set all the rows on mount\n      if (gridRowCount === 0) {\n        gridApi.setRowData(availableRFQs);\n      }\n    }\n  }, [gridApi, availableRFQs]);\n\n  useEffect(() => {\n    let newAvailableRFQs: SecondaryRequestForQuote[];\n    const userName = JWT?.user_name;\n    if (blotterType === 'RFQ Search') {\n      newAvailableRFQs = liveRFQData.filter(\n        (RFQ: SecondaryRequestForQuote) => RFQ.createdByUserId !== userName\n      );\n    } else {\n      newAvailableRFQs = liveRFQData.filter((RFQ: SecondaryRequestForQuote) =>\n        RFQ.quotes?.find(\n          (quote: SecondaryQuote) =>\n            quote.createdByUserId && quote.createdByUserId === userName\n        )\n      );\n    }\n\n    if (gridApi && newAvailableRFQs[0]?.requestId) {\n      const existingRowNode = gridApi.getRowNode(\n        newAvailableRFQs[0].requestId.toString()\n      );\n      const quotedRFQs: RFQSearchQuoted[] = newAvailableRFQs.map(\n        (RFQ: SecondaryRequestForQuote) => {\n          return {\n            ...RFQ,\n            // Default offset for quote response in minutes\n            quoteDeadline: defaultQuoteDeadlineOffsetMs,\n          };\n        }\n      );\n      if (existingRowNode) {\n        gridApi.applyTransaction({ update: quotedRFQs });\n        gridApi.refreshCells({ rowNodes: [existingRowNode], force: true });\n      } else {\n        gridApi.applyTransaction({ add: quotedRFQs, addIndex: 0 });\n      }\n      setDisplayedRowCount(gridApi.getDisplayedRowCount());\n      setLiveRFQData([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [liveRFQData, blotterType]);\n\n  useEffect(() => {\n    if (gridApi) {\n      refreshGridRowsOnMinute(gridApi, ['quoteDeadline', 'account']);\n      return () => {\n        gridApi.destroy();\n      };\n    }\n    return;\n  }, [gridApi]);\n\n  return (\n    <RFQSearchWrapper>\n      <RFQActionBar>\n        <FilterBar>\n          <ResultsText>\n            {displayedRowCount} Result\n            {displayedRowCount !== 1 && 's'}\n          </ResultsText>\n          <FilterInput\n            disabled={false}\n            hasError={false}\n            placeholder=\"Filter by CUSIP/ISIN\"\n            onChange={debounce(\n              (event) => handleInputFilter('cusipOrIsin', event.target.value),\n              400\n            )}\n          />\n          <FilterCheckBox\n            fieldText=\"Status\"\n            defaultOption=\"All\"\n            options={statusCheckboxOptions}\n            checkedOptions={filterValues['status'] ?? []}\n            setCheckedOptions={(checked) =>\n              handleCheckboxFilter('status', checked)\n            }\n            multi\n          />\n          <FilterCheckBox\n            fieldText=\"Side\"\n            defaultOption=\"All\"\n            options={sideCheckboxOptions}\n            checkedOptions={filterValues['side'] ?? []}\n            setCheckedOptions={(checked) =>\n              handleCheckboxFilter('side', checked)\n            }\n          />\n          <FilterClearButton variant=\"secondary\" onClick={handleClearFilters}>\n            Clear\n          </FilterClearButton>\n        </FilterBar>\n        <RFQActionBarSection>\n          <SecondariesExportDropdown\n            gridApi={gridApi}\n            tableName={blotterType}\n          />\n        </RFQActionBarSection>\n      </RFQActionBar>\n      <AGGridTable\n        aria-label={blotterType}\n        getRowNodeId={(data: RFQSearchQuoted) =>\n          data.requestId ? data.requestId.toString() : ''\n        }\n        gridOptions={{\n          onGridReady: (event) => setGridApi(event.api),\n          onFirstDataRendered: onDataRendered,\n          columnDefs: RFQSearchColumns,\n          rowHeight: 32,\n          headerHeight: 48,\n          suppressLoadingOverlay: true,\n          defaultColDef: { resizable: true },\n          getContextMenuItems: getRFQSearchContextMenuItems,\n          rowClassRules: {\n            'grid-row-even': (e: RowClassParams) => e.rowIndex % 2 === 0,\n            'grid-row-odd': (e: RowClassParams) => e.rowIndex % 2 !== 0,\n            'grid-row-expired': (e: RowClassParams) => e.data.status !== 'OPEN',\n          },\n        }}\n        isExternalFilterPresent={isExternalFilterPresent}\n        doesExternalFilterPass={doesExternalFilterPass}\n      />\n    </RFQSearchWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}