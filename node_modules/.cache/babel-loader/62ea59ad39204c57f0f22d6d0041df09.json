{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/ConfirmationStatusFilterDropdown/ConfirmationStatusFilterDropdown.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport { FilterDropdown } from '../FilterDropdown';\nimport { formatConfirmationStatus } from '../../../../../utils/gridUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConfirmationStatusFilterDropdown = () => {\n  _s();\n\n  const {\n    events,\n    confirmationStatusFilter\n  } = useEventConfirmationOptions();\n  const confirmationStatuses = useMemo(() => [...new Set(events.data.flatMap(event => {\n    var _formatConfirmationSt;\n\n    return ((_formatConfirmationSt = formatConfirmationStatus(event)) == null ? void 0 : _formatConfirmationSt.status) || [];\n  }))], [events.data]);\n  const options = useMemo(() => confirmationStatuses.map(confirmationStatus => ({\n    label: confirmationStatus,\n    value: confirmationStatus\n  })), [confirmationStatuses]);\n  return /*#__PURE__*/_jsxDEV(FilterDropdown, {\n    options: options,\n    label: \"Event Status\",\n    selected: confirmationStatusFilter.value,\n    onChange: typeValue => //Sadly this must be any for the time being as the correct MenuItem is not export from the design-system\n    confirmationStatusFilter.setFilter( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeValue.map(typeOption => typeOption.value) || [])\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfirmationStatusFilterDropdown, \"XtIfRitAW1CoyPpn9M+5tIJW64o=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = ConfirmationStatusFilterDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmationStatusFilterDropdown\");","map":{"version":3,"names":["useMemo","useEventConfirmationOptions","FilterDropdown","formatConfirmationStatus","ConfirmationStatusFilterDropdown","events","confirmationStatusFilter","confirmationStatuses","Set","data","flatMap","event","status","options","map","confirmationStatus","label","value","typeValue","setFilter","typeOption"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmations/EventConfirmationOptions/Filters/ConfirmationStatusFilterDropdown/ConfirmationStatusFilterDropdown.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useEventConfirmationOptions } from '../../../../../utils/hooks/useEventConfirmationOptions';\nimport { FilterDropdown, FilterDropdownOptions } from '../FilterDropdown';\nimport { formatConfirmationStatus } from '../../../../../utils/gridUtils';\n\nexport const ConfirmationStatusFilterDropdown = () => {\n  const { events, confirmationStatusFilter } = useEventConfirmationOptions();\n\n  const confirmationStatuses = useMemo(\n    () => [\n      ...new Set(\n        events.data.flatMap(\n          (event) => formatConfirmationStatus(event)?.status || []\n        )\n      ),\n    ],\n    [events.data]\n  );\n\n  const options: FilterDropdownOptions<string>[] = useMemo(\n    () =>\n      confirmationStatuses.map((confirmationStatus) => ({\n        label: confirmationStatus,\n        value: confirmationStatus,\n      })),\n    [confirmationStatuses]\n  );\n\n  return (\n    <FilterDropdown<string>\n      options={options}\n      label=\"Event Status\"\n      selected={confirmationStatusFilter.value}\n      onChange={(typeValue) =>\n        //Sadly this must be any for the time being as the correct MenuItem is not export from the design-system\n        confirmationStatusFilter.setFilter(\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          typeValue.map((typeOption: any) => typeOption.value) || []\n        )\n      }\n    />\n  );\n};\n"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,2BAAT,QAA4C,wDAA5C;AACA,SAASC,cAAT,QAAsD,mBAAtD;AACA,SAASC,wBAAT,QAAyC,gCAAzC;;AAEA,OAAO,MAAMC,gCAAgC,GAAG,MAAM;EAAA;;EACpD,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAuCL,2BAA2B,EAAxE;EAEA,MAAMM,oBAAoB,GAAGP,OAAO,CAClC,MAAM,CACJ,GAAG,IAAIQ,GAAJ,CACDH,MAAM,CAACI,IAAP,CAAYC,OAAZ,CACGC,KAAD;IAAA;;IAAA,OAAW,0BAAAR,wBAAwB,CAACQ,KAAD,CAAxB,2CAAiCC,MAAjC,KAA2C,EAAtD;EAAA,CADF,CADC,CADC,CAD4B,EAQlC,CAACP,MAAM,CAACI,IAAR,CARkC,CAApC;EAWA,MAAMI,OAAwC,GAAGb,OAAO,CACtD,MACEO,oBAAoB,CAACO,GAArB,CAA0BC,kBAAD,KAAyB;IAChDC,KAAK,EAAED,kBADyC;IAEhDE,KAAK,EAAEF;EAFyC,CAAzB,CAAzB,CAFoD,EAMtD,CAACR,oBAAD,CANsD,CAAxD;EASA,oBACE,QAAC,cAAD;IACE,OAAO,EAAEM,OADX;IAEE,KAAK,EAAC,cAFR;IAGE,QAAQ,EAAEP,wBAAwB,CAACW,KAHrC;IAIE,QAAQ,EAAGC,SAAD,IACR;IACAZ,wBAAwB,CAACa,SAAzB,EACE;IACAD,SAAS,CAACJ,GAAV,CAAeM,UAAD,IAAqBA,UAAU,CAACH,KAA9C,KAAwD,EAF1D;EANJ;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CArCM;;GAAMb,gC;UACkCH,2B;;;KADlCG,gC"},"metadata":{},"sourceType":"module"}