{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/EventConfirmationModal.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { Modal } from '@luma-fe-workspace/design-system';\nimport { CashForm } from './CashForm';\nimport { PhysicalForm } from './PhysicalForm';\nimport { IssuerLogo } from '../AGGridTable/AGGridTableComponents.style';\nimport { bofaLogo } from '../../utils/constants';\nimport { ModalContainer, ModalSubTitle, CloseButton, CloseIcon, TopElementsWrapper, ToggleButtons, ToggleWrapper } from './EventConfirmationModal.styles';\nimport { useEventConfirmationOptions } from '../../utils/hooks/useEventConfirmationOptions';\nimport { EventTypesDisplay, formatEventType } from '../../utils/gridUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// using an enum instead of boolean incase there are more later\nvar SettlementTypes;\n\n(function (SettlementTypes) {\n  SettlementTypes[SettlementTypes[\"CASH\"] = 0] = \"CASH\";\n  SettlementTypes[SettlementTypes[\"PHYSICAL\"] = 1] = \"PHYSICAL\";\n})(SettlementTypes || (SettlementTypes = {}));\n\nexport let Statuses;\n\n(function (Statuses) {\n  Statuses[\"CONFIRMED\"] = \"CONFIRMED\";\n  Statuses[\"REQUIRES_RESOLUTION\"] = \"REQUIRES_RESOLUTION\";\n  Statuses[\"NOT_CONFIRMED\"] = \"NOT_CONFIRMED\";\n  Statuses[\"NOT_SET\"] = \"\";\n})(Statuses || (Statuses = {}));\n\nexport const EventConfirmationModal = ({\n  modalOpen,\n  setModalOpen\n}) => {\n  _s();\n\n  var _opsModal$data5, _opsModal$data6;\n\n  const {\n    opsModal\n  } = useEventConfirmationOptions();\n  const [modalToggle, setModalToggle] = useState(SettlementTypes.CASH);\n  const eventType = useMemo(() => {\n    var _opsModal$data;\n\n    return formatEventType((_opsModal$data = opsModal.data) == null ? void 0 : _opsModal$data.eventType) || '';\n  }, [opsModal.data]);\n  const cashOnly = useMemo(() => {\n    var _opsModal$data2, _opsModal$data3;\n\n    return ((_opsModal$data2 = opsModal.data) == null ? void 0 : _opsModal$data2.settlementType) === 'CASH' || ((_opsModal$data3 = opsModal.data) == null ? void 0 : _opsModal$data3.settlementType) === 'PHYSICAL' && eventType !== EventTypesDisplay.MATURITY;\n  }, [opsModal.data, eventType]);\n  useEffect(() => {\n    var _opsModal$data4;\n\n    if (opsModal.data && ((_opsModal$data4 = opsModal.data) == null ? void 0 : _opsModal$data4.settlementType) === 'PHYSICAL' && eventType === EventTypesDisplay.MATURITY) {\n      setModalToggle(SettlementTypes.PHYSICAL);\n    } else {\n      setModalToggle(SettlementTypes.CASH);\n    }\n  }, [opsModal.data, eventType]);\n  return opsModal.data ? /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: modalOpen,\n    background: 'transparent',\n    position: 'absolute',\n    top: '0%',\n    children: /*#__PURE__*/_jsxDEV(ModalContainer, {\n      cashOnly: cashOnly,\n      children: [/*#__PURE__*/_jsxDEV(TopElementsWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(IssuerLogo, {\n          src: bofaLogo,\n          alt: (_opsModal$data5 = opsModal.data) == null ? void 0 : _opsModal$data5.issuer,\n          height: '2rem'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => {\n            setModalOpen(false);\n            opsModal.setData(undefined);\n          },\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            iconCode: \"xmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalSubTitle, {\n        children: (_opsModal$data6 = opsModal.data) == null ? void 0 : _opsModal$data6.structureNameInternal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), cashOnly ? null : /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtons, {\n          isSelected: modalToggle === SettlementTypes.CASH,\n          onClick: () => setModalToggle(SettlementTypes.CASH),\n          children: \"Cash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButtons, {\n          isSelected: modalToggle === SettlementTypes.PHYSICAL,\n          onClick: () => setModalToggle(SettlementTypes.PHYSICAL),\n          children: \"Physical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), modalToggle === SettlementTypes.CASH ? /*#__PURE__*/_jsxDEV(CashForm, {\n        cashOnly: cashOnly,\n        eventType: eventType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PhysicalForm, {\n        eventType: eventType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this) : null;\n};\n\n_s(EventConfirmationModal, \"RSKbK+DXY/orT9ay4yjVaIZIQfw=\", false, function () {\n  return [useEventConfirmationOptions];\n});\n\n_c = EventConfirmationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventConfirmationModal\");","map":{"version":3,"names":["useEffect","useMemo","useState","Modal","CashForm","PhysicalForm","IssuerLogo","bofaLogo","ModalContainer","ModalSubTitle","CloseButton","CloseIcon","TopElementsWrapper","ToggleButtons","ToggleWrapper","useEventConfirmationOptions","EventTypesDisplay","formatEventType","SettlementTypes","Statuses","EventConfirmationModal","modalOpen","setModalOpen","opsModal","modalToggle","setModalToggle","CASH","eventType","data","cashOnly","settlementType","MATURITY","PHYSICAL","issuer","setData","undefined","structureNameInternal"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/confirmation/src/components/EventConfirmationModal/EventConfirmationModal.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\n\nimport { Modal } from '@luma-fe-workspace/design-system';\nimport { CashForm } from './CashForm';\nimport { PhysicalForm } from './PhysicalForm';\nimport { IssuerLogo } from '../AGGridTable/AGGridTableComponents.style';\nimport { bofaLogo } from '../../utils/constants';\nimport {\n  ModalContainer,\n  ModalSubTitle,\n  CloseButton,\n  CloseIcon,\n  TopElementsWrapper,\n  ToggleButtons,\n  ToggleWrapper,\n} from './EventConfirmationModal.styles';\nimport { useEventConfirmationOptions } from '../../utils/hooks/useEventConfirmationOptions';\nimport { EventTypesDisplay, formatEventType } from '../../utils/gridUtils';\n\ninterface Props {\n  modalOpen: boolean;\n  setModalOpen: Dispatch<SetStateAction<boolean>>;\n}\n\n// using an enum instead of boolean incase there are more later\nenum SettlementTypes {\n  CASH = 0,\n  PHYSICAL = 1,\n}\n\nexport enum Statuses {\n  CONFIRMED = 'CONFIRMED',\n  REQUIRES_RESOLUTION = 'REQUIRES_RESOLUTION',\n  NOT_CONFIRMED = 'NOT_CONFIRMED',\n  NOT_SET = '',\n}\n\nexport const EventConfirmationModal = ({ modalOpen, setModalOpen }: Props) => {\n  const { opsModal } = useEventConfirmationOptions();\n  const [modalToggle, setModalToggle] = useState<SettlementTypes>(\n    SettlementTypes.CASH\n  );\n\n  const eventType = useMemo(\n    () => formatEventType(opsModal.data?.eventType) || '',\n    [opsModal.data]\n  );\n\n  const cashOnly = useMemo(\n    () =>\n      opsModal.data?.settlementType === 'CASH' ||\n      (opsModal.data?.settlementType === 'PHYSICAL' &&\n        eventType !== EventTypesDisplay.MATURITY),\n    [opsModal.data, eventType]\n  );\n\n  useEffect(() => {\n    if (\n      opsModal.data &&\n      opsModal.data?.settlementType === 'PHYSICAL' &&\n      eventType === EventTypesDisplay.MATURITY\n    ) {\n      setModalToggle(SettlementTypes.PHYSICAL);\n    } else {\n      setModalToggle(SettlementTypes.CASH);\n    }\n  }, [opsModal.data, eventType]);\n\n  return opsModal.data ? (\n    <Modal\n      isOpen={modalOpen}\n      background={'transparent'}\n      position={'absolute'}\n      top={'0%'}\n    >\n      <ModalContainer cashOnly={cashOnly}>\n        <TopElementsWrapper>\n          <IssuerLogo\n            src={bofaLogo}\n            alt={opsModal.data?.issuer}\n            height={'2rem'}\n          />\n          <CloseButton\n            onClick={() => {\n              setModalOpen(false);\n              opsModal.setData(undefined);\n            }}\n          >\n            <CloseIcon iconCode=\"xmark\" />\n          </CloseButton>\n        </TopElementsWrapper>\n        <ModalSubTitle>{opsModal.data?.structureNameInternal}</ModalSubTitle>\n        {cashOnly ? null : (\n          <ToggleWrapper>\n            <ToggleButtons\n              isSelected={modalToggle === SettlementTypes.CASH}\n              onClick={() => setModalToggle(SettlementTypes.CASH)}\n            >\n              Cash\n            </ToggleButtons>\n            <ToggleButtons\n              isSelected={modalToggle === SettlementTypes.PHYSICAL}\n              onClick={() => setModalToggle(SettlementTypes.PHYSICAL)}\n            >\n              Physical\n            </ToggleButtons>\n          </ToggleWrapper>\n        )}\n\n        {modalToggle === SettlementTypes.CASH ? (\n          <CashForm cashOnly={cashOnly} eventType={eventType} />\n        ) : (\n          <PhysicalForm eventType={eventType} />\n        )}\n      </ModalContainer>\n    </Modal>\n  ) : null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}