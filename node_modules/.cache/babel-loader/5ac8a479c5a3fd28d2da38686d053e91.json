{"ast":null,"code":"import { selectAccessToken } from '../redux/auth/selector';\nexport const prepareHeadersWithAuth = (restricted = []) => (headers, api) => {\n  if (restricted.some(restrictedEndpoint => restrictedEndpoint === api.endpoint)) {\n    return headers;\n  }\n\n  const token = selectAccessToken(api.getState());\n\n  if (token) {\n    headers.set('Authorization', `Bearer ${token}`);\n  }\n\n  return headers;\n};","map":{"version":3,"names":["selectAccessToken","prepareHeadersWithAuth","restricted","headers","api","some","restrictedEndpoint","endpoint","token","getState","set"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/utils/prepareHeadersWithAuth.ts"],"sourcesContent":["import type { FetchBaseQueryArgs } from '@reduxjs/toolkit/dist/query/fetchBaseQuery';\nimport type { RootState } from '../redux/configureStore';\nimport { selectAccessToken } from '../redux/auth/selector';\n\nexport const prepareHeadersWithAuth =\n  (restricted: string[] = []): Required<FetchBaseQueryArgs>['prepareHeaders'] =>\n  (headers, api) => {\n    if (\n      restricted.some(\n        (restrictedEndpoint) => restrictedEndpoint === api.endpoint\n      )\n    ) {\n      return headers;\n    }\n    const token = selectAccessToken(api.getState() as RootState);\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n    return headers;\n  };\n"],"mappings":"AAEA,SAASA,iBAAT,QAAkC,wBAAlC;AAEA,OAAO,MAAMC,sBAAsB,GACjC,CAACC,UAAoB,GAAG,EAAxB,KACA,CAACC,OAAD,EAAUC,GAAV,KAAkB;EAChB,IACEF,UAAU,CAACG,IAAX,CACGC,kBAAD,IAAwBA,kBAAkB,KAAKF,GAAG,CAACG,QADrD,CADF,EAIE;IACA,OAAOJ,OAAP;EACD;;EACD,MAAMK,KAAK,GAAGR,iBAAiB,CAACI,GAAG,CAACK,QAAJ,EAAD,CAA/B;;EACA,IAAID,KAAJ,EAAW;IACTL,OAAO,CAACO,GAAR,CAAY,eAAZ,EAA8B,UAASF,KAAM,EAA7C;EACD;;EACD,OAAOL,OAAP;AACD,CAfI"},"metadata":{},"sourceType":"module"}