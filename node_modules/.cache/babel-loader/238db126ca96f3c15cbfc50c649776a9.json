{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { apiUrl, URL_PATHS } from '@luma-fe-workspace/utility';\nimport { Stomp } from '@stomp/stompjs';\nconst baseWebsocketURL = apiUrl == null ? void 0 : apiUrl.split('https://')[1];\nconst WEBSOCKET_HELPERS = {\n  SECONDARIES_URL: `wss://${baseWebsocketURL}/secondary-market-service/stream/websocket`,\n  RFQS: 'rfqs',\n  ORDERS: 'orders'\n};\nexport const getWebsocketData = (props, setWebsocketData) => {\n  if (props.token) {\n    const client = Stomp.client(WEBSOCKET_HELPERS.SECONDARIES_URL);\n    let connected = false; //setting up header for authentication\n\n    const header = {\n      Authorization: `Bearer ${props.token}`\n    };\n    client.connect(header, data => {\n      //subscription to a channel that is session based\n      const sessionId = data.headers['user-name'];\n      const destinationRFQs = `/user/${sessionId}/stream/${WEBSOCKET_HELPERS.RFQS}`;\n      const destinationOrders = `/user/${sessionId}/stream/${WEBSOCKET_HELPERS.ORDERS}`;\n      const headers = {\n        sessionId\n      };\n\n      if (sessionId) {\n        connected = true;\n      }\n\n      client.subscribe(destinationRFQs, message => {\n        if (message.body) {\n          setWebsocketData[0](JSON.parse(message.body));\n        }\n      }, headers);\n      client.subscribe(destinationOrders, message => {\n        if (message.body) {\n          setWebsocketData[1](JSON.parse(message.body));\n        }\n      }, headers);\n    }, cb => {\n      connected = cb.target.readyState === 3 ? false : true;\n    }); // autoreconnect once detected connection drop\n\n    client.reconnectDelay = 3000; //reconnect every 5000ms\n    //setTimeout is use to turn off auto reconnection if issue persist 11 seconds after - 11000ms is chosen to at least have autoreconnect to try 3 times\n\n    setTimeout(() => {\n      //by this time if connected is still false then auto reconnect did not work\n      if (!connected) {\n        client.deactivate();\n        client.forceDisconnect();\n      }\n    }, 11000); //disconnect - if you are not on any secondaries path\n\n    !props.currentPath.includes(URL_PATHS.SECONDARIES) && client.disconnect();\n  } else {\n    //if you were connected already and you signout - you need to disconnect\n    Stomp.client(WEBSOCKET_HELPERS.SECONDARIES_URL).disconnect();\n  }\n};","map":{"version":3,"names":["apiUrl","URL_PATHS","Stomp","baseWebsocketURL","split","WEBSOCKET_HELPERS","SECONDARIES_URL","RFQS","ORDERS","getWebsocketData","props","setWebsocketData","token","client","connected","header","Authorization","connect","data","sessionId","headers","destinationRFQs","destinationOrders","subscribe","message","body","JSON","parse","cb","target","readyState","reconnectDelay","setTimeout","deactivate","forceDisconnect","currentPath","includes","SECONDARIES","disconnect"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/secondaries/src/utils/websocketUtil.ts"],"sourcesContent":["import { apiUrl, URL_PATHS } from '@luma-fe-workspace/utility';\nimport { Stomp } from '@stomp/stompjs';\nimport {\n  SecondaryRequestForQuote,\n  SecondaryOrder,\n} from '@luma-fe-workspace/redux';\n\nexport interface SecondaryWebsocketProps {\n  token: string;\n  currentPath: string;\n}\n\nconst baseWebsocketURL = apiUrl?.split('https://')[1];\n\nconst WEBSOCKET_HELPERS = {\n  SECONDARIES_URL: `wss://${baseWebsocketURL}/secondary-market-service/stream/websocket`,\n  RFQS: 'rfqs',\n  ORDERS: 'orders',\n};\n\nexport const getWebsocketData = (\n  props: SecondaryWebsocketProps,\n  setWebsocketData: [\n    (data: SecondaryRequestForQuote[]) => void,\n    (data: SecondaryOrder) => void\n  ]\n) => {\n  if (props.token) {\n    const client = Stomp.client(WEBSOCKET_HELPERS.SECONDARIES_URL);\n    let connected = false;\n    //setting up header for authentication\n    const header = {\n      Authorization: `Bearer ${props.token}`,\n    };\n    client.connect(\n      header,\n      (data: any) => {\n        //subscription to a channel that is session based\n        const sessionId = data.headers['user-name'];\n        const destinationRFQs = `/user/${sessionId}/stream/${WEBSOCKET_HELPERS.RFQS}`;\n        const destinationOrders = `/user/${sessionId}/stream/${WEBSOCKET_HELPERS.ORDERS}`;\n\n        const headers = { sessionId };\n        if (sessionId) {\n          connected = true;\n        }\n\n        client.subscribe(\n          destinationRFQs,\n          (message) => {\n            if (message.body) {\n              setWebsocketData[0](JSON.parse(message.body));\n            }\n          },\n          headers\n        );\n\n        client.subscribe(\n          destinationOrders,\n          (message) => {\n            if (message.body) {\n              setWebsocketData[1](JSON.parse(message.body));\n            }\n          },\n          headers\n        );\n      },\n      (cb: { target: { readyState: number } }) => {\n        connected = cb.target.readyState === 3 ? false : true;\n      }\n    );\n    // autoreconnect once detected connection drop\n    client.reconnectDelay = 3000; //reconnect every 5000ms\n\n    //setTimeout is use to turn off auto reconnection if issue persist 11 seconds after - 11000ms is chosen to at least have autoreconnect to try 3 times\n    setTimeout(() => {\n      //by this time if connected is still false then auto reconnect did not work\n      if (!connected) {\n        client.deactivate();\n        client.forceDisconnect();\n      }\n    }, 11000);\n\n    //disconnect - if you are not on any secondaries path\n    !props.currentPath.includes(URL_PATHS.SECONDARIES) && client.disconnect();\n  } else {\n    //if you were connected already and you signout - you need to disconnect\n    Stomp.client(WEBSOCKET_HELPERS.SECONDARIES_URL).disconnect();\n  }\n};\n"],"mappings":";;;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,4BAAlC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAWA,MAAMC,gBAAgB,GAAGH,MAAH,oBAAGA,MAAM,CAAEI,KAAR,CAAc,UAAd,EAA0B,CAA1B,CAAzB;AAEA,MAAMC,iBAAiB,GAAG;EACxBC,eAAe,EAAG,SAAQH,gBAAiB,4CADnB;EAExBI,IAAI,EAAE,MAFkB;EAGxBC,MAAM,EAAE;AAHgB,CAA1B;AAMA,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,KAD8B,EAE9BC,gBAF8B,KAM3B;EACH,IAAID,KAAK,CAACE,KAAV,EAAiB;IACf,MAAMC,MAAM,GAAGX,KAAK,CAACW,MAAN,CAAaR,iBAAiB,CAACC,eAA/B,CAAf;IACA,IAAIQ,SAAS,GAAG,KAAhB,CAFe,CAGf;;IACA,MAAMC,MAAM,GAAG;MACbC,aAAa,EAAG,UAASN,KAAK,CAACE,KAAM;IADxB,CAAf;IAGAC,MAAM,CAACI,OAAP,CACEF,MADF,EAEGG,IAAD,IAAe;MACb;MACA,MAAMC,SAAS,GAAGD,IAAI,CAACE,OAAL,CAAa,WAAb,CAAlB;MACA,MAAMC,eAAe,GAAI,SAAQF,SAAU,WAAUd,iBAAiB,CAACE,IAAK,EAA5E;MACA,MAAMe,iBAAiB,GAAI,SAAQH,SAAU,WAAUd,iBAAiB,CAACG,MAAO,EAAhF;MAEA,MAAMY,OAAO,GAAG;QAAED;MAAF,CAAhB;;MACA,IAAIA,SAAJ,EAAe;QACbL,SAAS,GAAG,IAAZ;MACD;;MAEDD,MAAM,CAACU,SAAP,CACEF,eADF,EAEGG,OAAD,IAAa;QACX,IAAIA,OAAO,CAACC,IAAZ,EAAkB;UAChBd,gBAAgB,CAAC,CAAD,CAAhB,CAAoBe,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAApB;QACD;MACF,CANH,EAOEL,OAPF;MAUAP,MAAM,CAACU,SAAP,CACED,iBADF,EAEGE,OAAD,IAAa;QACX,IAAIA,OAAO,CAACC,IAAZ,EAAkB;UAChBd,gBAAgB,CAAC,CAAD,CAAhB,CAAoBe,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAApB;QACD;MACF,CANH,EAOEL,OAPF;IASD,CAhCH,EAiCGQ,EAAD,IAA4C;MAC1Cd,SAAS,GAAGc,EAAE,CAACC,MAAH,CAAUC,UAAV,KAAyB,CAAzB,GAA6B,KAA7B,GAAqC,IAAjD;IACD,CAnCH,EAPe,CA4Cf;;IACAjB,MAAM,CAACkB,cAAP,GAAwB,IAAxB,CA7Ce,CA6Ce;IAE9B;;IACAC,UAAU,CAAC,MAAM;MACf;MACA,IAAI,CAAClB,SAAL,EAAgB;QACdD,MAAM,CAACoB,UAAP;QACApB,MAAM,CAACqB,eAAP;MACD;IACF,CANS,EAMP,KANO,CAAV,CAhDe,CAwDf;;IACA,CAACxB,KAAK,CAACyB,WAAN,CAAkBC,QAAlB,CAA2BnC,SAAS,CAACoC,WAArC,CAAD,IAAsDxB,MAAM,CAACyB,UAAP,EAAtD;EACD,CA1DD,MA0DO;IACL;IACApC,KAAK,CAACW,MAAN,CAAaR,iBAAiB,CAACC,eAA/B,EAAgDgC,UAAhD;EACD;AACF,CArEM"},"metadata":{},"sourceType":"module"}