{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { addDays, format, isBefore } from 'date-fns';\nimport { toDate } from 'date-fns-tz';\n/**\n * Returns the date in YYYY-MM-DD(2022-01-01) format.\n *\n * @param {Date}  date - the Date object you want formatted\n * @returns {string} a string of the formatted date object\n *\n */\n\nexport const formatLocalDate = date => format(date, 'yyyy-MM-dd');\n/**\n * Returns the date 7 days in the future.\n *\n * @param {Date} date - the Date object you want to edit\n * @returns {Date} a Date object 7 days in the future\n *\n */\n\nexport const addWeek = date => addDays(date, 7);\n/**\n * Returns the date converted to UTC\n *\n * @param {Date} date - takes in a date/string/number, which gets converted to timezone: UTC\n * @returns {Date} a Date object converted to UTC\n *\n */\n\nexport const convertToUTC = date => {\n  return toDate(date, {\n    timeZone: 'UTC'\n  });\n};\n/**\n * Returns true if dateA is before dateB\n *\n * @param {Date} dateA\n * @param {Date} dateB\n * @returns {Boolean}\n */\n\nexport const compareDates = (dateA, dateB) => {\n  return isBefore(dateA, dateB);\n};\n/**\n * Returns true if the date is less than or equal to 30 days old\n *\n * @param {Date} date\n * @returns {Boolean}\n */\n\nexport const underThirtyDaysOld = date => {\n  const thirtyDaysInMilliseconds = 2592000000;\n  const todayTimeInMilliseconds = new Date().getTime();\n\n  if (todayTimeInMilliseconds - date.getTime() <= thirtyDaysInMilliseconds) {\n    return true;\n  }\n\n  return false;\n};\nexport const formatDateForEventConfirmations = date => {\n  const dates = format(date, `MMM/dd/yyyy`);\n  const splitDate = dates.split('/');\n  return `${splitDate[0].toUpperCase()}/${splitDate[1]}/${splitDate[2]}`;\n};","map":{"version":3,"names":["addDays","format","isBefore","toDate","formatLocalDate","date","addWeek","convertToUTC","timeZone","compareDates","dateA","dateB","underThirtyDaysOld","thirtyDaysInMilliseconds","todayTimeInMilliseconds","Date","getTime","formatDateForEventConfirmations","dates","splitDate","split","toUpperCase"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/common/src/lib/date-helpers/date-helpers.ts"],"sourcesContent":["import { addDays, format, isBefore } from 'date-fns';\nimport { toDate } from 'date-fns-tz';\n/**\n * Returns the date in YYYY-MM-DD(2022-01-01) format.\n *\n * @param {Date}  date - the Date object you want formatted\n * @returns {string} a string of the formatted date object\n *\n */\nexport const formatLocalDate = (date: Date) => format(date, 'yyyy-MM-dd');\n\n/**\n * Returns the date 7 days in the future.\n *\n * @param {Date} date - the Date object you want to edit\n * @returns {Date} a Date object 7 days in the future\n *\n */\nexport const addWeek = (date: Date) => addDays(date, 7);\n\n/**\n * Returns the date converted to UTC\n *\n * @param {Date} date - takes in a date/string/number, which gets converted to timezone: UTC\n * @returns {Date} a Date object converted to UTC\n *\n */\nexport const convertToUTC = (date: Date | string | number) => {\n  return toDate(date, { timeZone: 'UTC' });\n};\n\n/**\n * Returns true if dateA is before dateB\n *\n * @param {Date} dateA\n * @param {Date} dateB\n * @returns {Boolean}\n */\nexport const compareDates = (dateA: Date, dateB: Date) => {\n  return isBefore(dateA, dateB);\n};\n\n/**\n * Returns true if the date is less than or equal to 30 days old\n *\n * @param {Date} date\n * @returns {Boolean}\n */\nexport const underThirtyDaysOld = (date: Date) => {\n  const thirtyDaysInMilliseconds = 2592000000;\n  const todayTimeInMilliseconds = new Date().getTime();\n\n  if (todayTimeInMilliseconds - date.getTime() <= thirtyDaysInMilliseconds) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const formatDateForEventConfirmations = (date: Date) => {\n  const dates = format(date, `MMM/dd/yyyy`);\n  const splitDate = dates.split('/');\n  return `${splitDate[0].toUpperCase()}/${splitDate[1]}/${splitDate[2]}`;\n};\n"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,QAA0C,UAA1C;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAD,IAAgBJ,MAAM,CAACI,IAAD,EAAO,YAAP,CAA9C;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAID,IAAD,IAAgBL,OAAO,CAACK,IAAD,EAAO,CAAP,CAAvC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,YAAY,GAAIF,IAAD,IAAkC;EAC5D,OAAOF,MAAM,CAACE,IAAD,EAAO;IAAEG,QAAQ,EAAE;EAAZ,CAAP,CAAb;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAcC,KAAd,KAA8B;EACxD,OAAOT,QAAQ,CAACQ,KAAD,EAAQC,KAAR,CAAf;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAIP,IAAD,IAAgB;EAChD,MAAMQ,wBAAwB,GAAG,UAAjC;EACA,MAAMC,uBAAuB,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAhC;;EAEA,IAAIF,uBAAuB,GAAGT,IAAI,CAACW,OAAL,EAA1B,IAA4CH,wBAAhD,EAA0E;IACxE,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD,CATM;AAWP,OAAO,MAAMI,+BAA+B,GAAIZ,IAAD,IAAgB;EAC7D,MAAMa,KAAK,GAAGjB,MAAM,CAACI,IAAD,EAAQ,aAAR,CAApB;EACA,MAAMc,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAlB;EACA,OAAQ,GAAED,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAA2B,IAAGF,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI,EAArE;AACD,CAJM"},"metadata":{},"sourceType":"module"}