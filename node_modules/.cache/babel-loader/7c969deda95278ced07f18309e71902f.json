{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport { ValueTypes } from '@luma-fe-workspace/redux';\nimport { getNumberLocaleData } from '../../../../../../utils/LocaleUtils';\nexport function clearGroupedString(value) {\n  const {\n    decimal,\n    group\n  } = getNumberLocaleData();\n  return value.replace(new RegExp(`\\\\${decimal}`, 'g'), '.').replace(new RegExp(group, 'g'), '');\n}\nexport function parseStringToNumber(value) {\n  if (value === '') {\n    return null;\n  }\n\n  const parsedString = clearGroupedString(value);\n  return Number(parsedString);\n}\nexport function insertThousandSeparator(value, separator) {\n  return value.split('').map((char, index) => {\n    if ((value.length - index) % 3 === 0 && index > 0) {\n      return separator + char;\n    }\n\n    return char;\n  }).join('');\n}\nexport function parseNumberStringToGroupedString(value) {\n  var _ref;\n\n  const {\n    decimal,\n    group\n  } = getNumberLocaleData();\n  const isDecimal = value.includes(decimal);\n  const [integerPart, decimalPart] = value.split('.');\n  return `${insertThousandSeparator(integerPart, group)}${isDecimal ? (_ref = decimal + decimalPart) != null ? _ref : '' : ''}`;\n}\nexport function parseNumericValuetoGroupedString(numericValue) {\n  if (numericValue === null) {\n    return '';\n  }\n\n  const stringifiedNumber = Number(numericValue).toString();\n  return parseNumberStringToGroupedString(stringifiedNumber);\n}\nexport function isStringValidNumber(value) {\n  return value === '' || !isNaN(parseFloat(value));\n}\nexport function getNumericValue(value, computationMode) {\n  return {\n    type: ValueTypes.Numeric,\n    value: parseStringToNumber(value),\n    computationMode\n  };\n}","map":{"version":3,"names":["ValueTypes","getNumberLocaleData","clearGroupedString","value","decimal","group","replace","RegExp","parseStringToNumber","parsedString","Number","insertThousandSeparator","separator","split","map","char","index","length","join","parseNumberStringToGroupedString","isDecimal","includes","integerPart","decimalPart","parseNumericValuetoGroupedString","numericValue","stringifiedNumber","toString","isStringValidNumber","isNaN","parseFloat","getNumericValue","computationMode","type","Numeric"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/creationhub/src/components/PricingForm/groups/ConfigurableFormGroups/formElements/number/NumberTextEntryUtils.ts"],"sourcesContent":["import {\n  ComputationMode,\n  NumericValue,\n  ValueTypes,\n} from '@luma-fe-workspace/redux';\nimport { getNumberLocaleData } from '../../../../../../utils/LocaleUtils';\n\nexport function clearGroupedString(value: string): string {\n  const { decimal, group } = getNumberLocaleData();\n  return value\n    .replace(new RegExp(`\\\\${decimal}`, 'g'), '.')\n    .replace(new RegExp(group, 'g'), '');\n}\n\nexport function parseStringToNumber(value: string): number | null {\n  if (value === '') {\n    return null;\n  }\n\n  const parsedString = clearGroupedString(value);\n  return Number(parsedString);\n}\n\nexport function insertThousandSeparator(\n  value: string,\n  separator: string\n): string {\n  return value\n    .split('')\n    .map((char, index) => {\n      if ((value.length - index) % 3 === 0 && index > 0) {\n        return separator + char;\n      }\n      return char;\n    })\n    .join('');\n}\n\nexport function parseNumberStringToGroupedString(value: string) {\n  const { decimal, group } = getNumberLocaleData();\n  const isDecimal = value.includes(decimal);\n  const [integerPart, decimalPart] = value.split('.');\n\n  return `${insertThousandSeparator(integerPart, group)}${\n    isDecimal ? decimal + decimalPart ?? '' : ''\n  }`;\n}\n\nexport function parseNumericValuetoGroupedString(\n  numericValue: number | null\n): string {\n  if (numericValue === null) {\n    return '';\n  }\n  const stringifiedNumber = Number(numericValue).toString();\n  return parseNumberStringToGroupedString(stringifiedNumber);\n}\n\nexport function isStringValidNumber(value: string): boolean {\n  return value === '' || !isNaN(parseFloat(value));\n}\n\nexport function getNumericValue(\n  value: string,\n  computationMode: ComputationMode\n): NumericValue {\n  return {\n    type: ValueTypes.Numeric,\n    value: parseStringToNumber(value),\n    computationMode,\n  };\n}\n"],"mappings":";;;;;;;;;;AAAA,SAGEA,UAHF,QAIO,0BAJP;AAKA,SAASC,mBAAT,QAAoC,qCAApC;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmD;EACxD,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAqBJ,mBAAmB,EAA9C;EACA,OAAOE,KAAK,CACTG,OADI,CACI,IAAIC,MAAJ,CAAY,KAAIH,OAAQ,EAAxB,EAA2B,GAA3B,CADJ,EACqC,GADrC,EAEJE,OAFI,CAEI,IAAIC,MAAJ,CAAWF,KAAX,EAAkB,GAAlB,CAFJ,EAE4B,EAF5B,CAAP;AAGD;AAED,OAAO,SAASG,mBAAT,CAA6BL,KAA7B,EAA2D;EAChE,IAAIA,KAAK,KAAK,EAAd,EAAkB;IAChB,OAAO,IAAP;EACD;;EAED,MAAMM,YAAY,GAAGP,kBAAkB,CAACC,KAAD,CAAvC;EACA,OAAOO,MAAM,CAACD,YAAD,CAAb;AACD;AAED,OAAO,SAASE,uBAAT,CACLR,KADK,EAELS,SAFK,EAGG;EACR,OAAOT,KAAK,CACTU,KADI,CACE,EADF,EAEJC,GAFI,CAEA,CAACC,IAAD,EAAOC,KAAP,KAAiB;IACpB,IAAI,CAACb,KAAK,CAACc,MAAN,GAAeD,KAAhB,IAAyB,CAAzB,KAA+B,CAA/B,IAAoCA,KAAK,GAAG,CAAhD,EAAmD;MACjD,OAAOJ,SAAS,GAAGG,IAAnB;IACD;;IACD,OAAOA,IAAP;EACD,CAPI,EAQJG,IARI,CAQC,EARD,CAAP;AASD;AAED,OAAO,SAASC,gCAAT,CAA0ChB,KAA1C,EAAyD;EAAA;;EAC9D,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAqBJ,mBAAmB,EAA9C;EACA,MAAMmB,SAAS,GAAGjB,KAAK,CAACkB,QAAN,CAAejB,OAAf,CAAlB;EACA,MAAM,CAACkB,WAAD,EAAcC,WAAd,IAA6BpB,KAAK,CAACU,KAAN,CAAY,GAAZ,CAAnC;EAEA,OAAQ,GAAEF,uBAAuB,CAACW,WAAD,EAAcjB,KAAd,CAAqB,GACpDe,SAAS,WAAGhB,OAAO,GAAGmB,WAAb,mBAA4B,EAA5B,GAAiC,EAC3C,EAFD;AAGD;AAED,OAAO,SAASC,gCAAT,CACLC,YADK,EAEG;EACR,IAAIA,YAAY,KAAK,IAArB,EAA2B;IACzB,OAAO,EAAP;EACD;;EACD,MAAMC,iBAAiB,GAAGhB,MAAM,CAACe,YAAD,CAAN,CAAqBE,QAArB,EAA1B;EACA,OAAOR,gCAAgC,CAACO,iBAAD,CAAvC;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BzB,KAA7B,EAAqD;EAC1D,OAAOA,KAAK,KAAK,EAAV,IAAgB,CAAC0B,KAAK,CAACC,UAAU,CAAC3B,KAAD,CAAX,CAA7B;AACD;AAED,OAAO,SAAS4B,eAAT,CACL5B,KADK,EAEL6B,eAFK,EAGS;EACd,OAAO;IACLC,IAAI,EAAEjC,UAAU,CAACkC,OADZ;IAEL/B,KAAK,EAAEK,mBAAmB,CAACL,KAAD,CAFrB;IAGL6B;EAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}