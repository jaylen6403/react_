{"ast":null,"code":"// Payout Horizon\nexport let DISPLAY_EVENT_TYPE;\n\n(function (DISPLAY_EVENT_TYPE) {\n  DISPLAY_EVENT_TYPE[\"Maturing\"] = \"Maturing\";\n  DISPLAY_EVENT_TYPE[\"Coupon\"] = \"Coupon Opportunity\";\n  DISPLAY_EVENT_TYPE[\"Call\"] = \"Call Opportunity\";\n})(DISPLAY_EVENT_TYPE || (DISPLAY_EVENT_TYPE = {}));\n\n// Payout Breakdown\nexport const GROUP_BY_VALUE_OPTIONS = ['ISSUER', 'STRUCTURE_TYPE', 'BASKET_TYPE', 'PROTECTION_TYPE'];","map":{"version":3,"names":["DISPLAY_EVENT_TYPE","GROUP_BY_VALUE_OPTIONS"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/redux/lifecycle/types.ts"],"sourcesContent":["export interface EventFilters {\n  [key: string]: CategoryFilter;\n}\nexport interface CategoryFilter {\n  [key: string]: string[];\n}\n\nexport interface DateObject {\n  startDate: string;\n  endDate: string;\n  rangeAbbreviation: string;\n}\n\nexport type DateRange = 'T' | '1W' | '2W' | '1M' | '3M' | '6M' | '12M' | '18M';\n\nexport type PayoutSummaryData = {\n  [key: string]: {\n    /**\n     * The value to show above the percentage bars, returned in scientific notation (e.g. 1.234567E8)\n     */\n    amount: number;\n    /**\n     * The percentage to show at the end (right-side) of the percent bar\n     */\n    percentage: number;\n  };\n};\n\n// Payout Horizon\nexport enum DISPLAY_EVENT_TYPE {\n  Maturing = 'Maturing',\n  Coupon = 'Coupon Opportunity',\n  Call = 'Call Opportunity',\n}\nexport interface PayoutHorizonAggregateEvent {\n  eventType: keyof typeof DISPLAY_EVENT_TYPE;\n  value: number;\n}\nexport interface PayoutHorizonData {\n  date: string;\n  events: PayoutHorizonAggregateEvent[];\n}\n\n// Payout Breakdown\nexport const GROUP_BY_VALUE_OPTIONS = [\n  'ISSUER',\n  'STRUCTURE_TYPE',\n  'BASKET_TYPE',\n  'PROTECTION_TYPE',\n] as const;\nexport type GroupByValueOption = typeof GROUP_BY_VALUE_OPTIONS[number];\n\nexport interface PayoutBreakdownData {\n  groupByValue: GroupByValueOption;\n  groups: PayoutBreakdownGroup[];\n}\n\nexport interface PayoutBreakdownGroup {\n  groupByName: string;\n  breakdownValue: number;\n}\n\nexport type PayoutBreakdownBreakdownType = 'AMOUNTS' | 'EVENT';\n\nexport type PayoutBreakdownWidgetData = {\n  groupingData: PayoutBreakdownData;\n  breakdownType: PayoutBreakdownBreakdownType;\n};\n\nexport type PayoutBreakdownSelectedOptions = {\n  groupByValue: GroupByValueOption;\n  breakdownType: PayoutBreakdownBreakdownType;\n};\n\nexport type PayoutBreakdownTableData = PayoutBreakdownGroup & {\n  percentage?: string;\n};\n"],"mappings":"AA4BA;AACA,WAAYA,kBAAZ;;WAAYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAcZ;AACA,OAAO,MAAMC,sBAAsB,GAAG,CACpC,QADoC,EAEpC,gBAFoC,EAGpC,aAHoC,EAIpC,iBAJoC,CAA/B"},"metadata":{},"sourceType":"module"}