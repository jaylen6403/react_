{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/dashboard/src/components/PortfolioWidget/Currency/Currency.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { CurrencySelectWrapper, DateText, DropdownSelector, MobileWrapper } from '../PortfolioWidget.styles';\nimport { SingleSelect } from '@luma-fe-workspace/design-system';\nimport { useGetAllCurrenciesUsingGetQuery } from '@luma-fe-workspace/redux';\nimport { currencySymbols } from '../StructuredProducts/structuredProductsPortfolioUtils';\nimport { DateHelper } from '@luma-fe-workspace/utility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Currency = ({\n  screenWidth,\n  selectedCurrency,\n  setSelectedCurrency\n}) => {\n  _s();\n\n  var _currencyData$0$conve;\n\n  const {\n    data: currencyData\n  } = useGetAllCurrenciesUsingGetQuery();\n\n  const updateCurrency = item => {\n    if (!item) return;\n    localStorage.setItem('selectedCurrency', item.value);\n    setSelectedCurrency(item);\n  };\n\n  const isoCodes = currencyData ? currencyData.filter(item => ['USD', 'GBP', 'EUR', 'CHF', 'SEK', 'NOK'].includes(item.isoCode)).map(item => ({\n    display: `${currencySymbols[item.isoCode]} (${item.isoCode})`,\n    value: item.isoCode\n  })) : [];\n  const lastUpdatedDate = currencyData ? (_currencyData$0$conve = currencyData[0].conversionRates) == null ? void 0 : _currencyData$0$conve['CHF']['asOfDatetime'] : '';\n  const date = new Date(lastUpdatedDate ? DateHelper.convertToUTC(lastUpdatedDate) : '');\n  const minutes = date.getMinutes();\n  const hours = date.getHours();\n  const seconds = date.getSeconds();\n  const timezoneAbbreviation = date.toLocaleTimeString(undefined, {\n    timeZoneName: 'short'\n  }).split(' ')[2];\n  return /*#__PURE__*/_jsxDEV(CurrencySelectWrapper, {\n    children: [screenWidth > 544 ? /*#__PURE__*/_jsxDEV(DropdownSelector, {\n      children: /*#__PURE__*/_jsxDEV(SingleSelect, {\n        items: isoCodes,\n        placeholder: `${currencySymbols[selectedCurrency.value]} (${selectedCurrency})`,\n        variant: 'secondary',\n        onChange: updateCurrency,\n        selectedItem: selectedCurrency,\n        hasIndicator: true,\n        noHighlight: true,\n        iconCode: \"angle-down\",\n        iconPrefix: \"far\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MobileWrapper, {\n      children: /*#__PURE__*/_jsxDEV(SingleSelect, {\n        items: isoCodes,\n        placeholder: `${selectedCurrency.value}`,\n        selectedItem: selectedCurrency,\n        variant: 'secondary',\n        onChange: updateCurrency,\n        hasIndicator: true,\n        noHighlight: true,\n        iconCode: \"angle-down\",\n        iconPrefix: \"far\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), lastUpdatedDate ? /*#__PURE__*/_jsxDEV(DateText, {\n      children: [\"As of \", date.toLocaleDateString(undefined), \" \", hours, \":\", minutes, \":\", seconds, ' ', timezoneAbbreviation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Currency, \"rBrgfeHpd2UQItBa5K2tkjTn6Lg=\", false, function () {\n  return [useGetAllCurrenciesUsingGetQuery];\n});\n\n_c = Currency;\n\nvar _c;\n\n$RefreshReg$(_c, \"Currency\");","map":{"version":3,"names":["CurrencySelectWrapper","DateText","DropdownSelector","MobileWrapper","SingleSelect","useGetAllCurrenciesUsingGetQuery","currencySymbols","DateHelper","Currency","screenWidth","selectedCurrency","setSelectedCurrency","data","currencyData","updateCurrency","item","localStorage","setItem","value","isoCodes","filter","includes","isoCode","map","display","lastUpdatedDate","conversionRates","date","Date","convertToUTC","minutes","getMinutes","hours","getHours","seconds","getSeconds","timezoneAbbreviation","toLocaleTimeString","undefined","timeZoneName","split","toLocaleDateString"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/luma/dashboard/src/components/PortfolioWidget/Currency/Currency.tsx"],"sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\nimport {\n  CurrencySelectWrapper,\n  DateText,\n  DropdownSelector,\n  MobileWrapper,\n} from '../PortfolioWidget.styles';\nimport {\n  MenuItemSingleType,\n  SingleSelect,\n} from '@luma-fe-workspace/design-system';\nimport { useGetAllCurrenciesUsingGetQuery } from '@luma-fe-workspace/redux';\nimport { currencySymbols } from '../StructuredProducts/structuredProductsPortfolioUtils';\nimport { DateHelper } from '@luma-fe-workspace/utility';\n\ninterface Props {\n  screenWidth: number;\n  selectedCurrency: MenuItemSingleType<string>;\n  setSelectedCurrency: Dispatch<SetStateAction<MenuItemSingleType<string>>>;\n}\n\nexport const Currency = ({\n  screenWidth,\n  selectedCurrency,\n  setSelectedCurrency,\n}: Props) => {\n  const { data: currencyData } = useGetAllCurrenciesUsingGetQuery();\n\n  const updateCurrency = (item?: MenuItemSingleType<string> | null) => {\n    if (!item) return;\n    localStorage.setItem('selectedCurrency', item.value);\n    setSelectedCurrency(item);\n  };\n\n  const isoCodes = currencyData\n    ? currencyData\n        .filter((item) =>\n          ['USD', 'GBP', 'EUR', 'CHF', 'SEK', 'NOK'].includes(item.isoCode)\n        )\n        .map<MenuItemSingleType<string>>((item) => ({\n          display: `${currencySymbols[item.isoCode]} (${item.isoCode})`,\n          value: item.isoCode,\n        }))\n    : [];\n\n  const lastUpdatedDate = currencyData\n    ? currencyData[0].conversionRates?.['CHF']['asOfDatetime']\n    : '';\n  const date = new Date(\n    lastUpdatedDate ? DateHelper.convertToUTC(lastUpdatedDate) : ''\n  );\n  const minutes = date.getMinutes();\n  const hours = date.getHours();\n  const seconds = date.getSeconds();\n  const timezoneAbbreviation = date\n    .toLocaleTimeString(undefined, { timeZoneName: 'short' })\n    .split(' ')[2];\n\n  return (\n    <CurrencySelectWrapper>\n      {screenWidth > 544 ? (\n        <DropdownSelector>\n          <SingleSelect\n            items={isoCodes}\n            placeholder={`${\n              currencySymbols[selectedCurrency.value]\n            } (${selectedCurrency})`}\n            variant={'secondary'}\n            onChange={updateCurrency}\n            selectedItem={selectedCurrency}\n            hasIndicator={true}\n            noHighlight={true}\n            iconCode=\"angle-down\"\n            iconPrefix=\"far\"\n          />\n        </DropdownSelector>\n      ) : (\n        <MobileWrapper>\n          <SingleSelect\n            items={isoCodes}\n            placeholder={`${selectedCurrency.value}`}\n            selectedItem={selectedCurrency}\n            variant={'secondary'}\n            onChange={updateCurrency}\n            hasIndicator={true}\n            noHighlight={true}\n            iconCode=\"angle-down\"\n            iconPrefix=\"far\"\n          />\n        </MobileWrapper>\n      )}\n      {lastUpdatedDate ? (\n        <DateText>\n          As of {date.toLocaleDateString(undefined)} {hours}:{minutes}:{seconds}{' '}\n          {timezoneAbbreviation}\n        </DateText>\n      ) : null}\n    </CurrencySelectWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}