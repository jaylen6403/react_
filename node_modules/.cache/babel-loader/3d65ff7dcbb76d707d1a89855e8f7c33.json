{"ast":null,"code":"var _jsxFileName = \"/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components/Dropdown/MultiSelect/MultiSelect.tsx\",\n    _s = $RefreshSig$();\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport * as React from 'react';\nimport { useMultipleSelection, useSelect } from 'downshift';\nimport { Button, Divider, DropdownIcon, Menu, MenuItem, Root } from '../DropdownBase.styles';\nimport { CheckboxIcon } from './MultiSelect.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MultiSelect({\n  actions = [],\n  ariaLabel,\n  ariaLabelledBy,\n  className,\n  hasIndicator,\n  id,\n  isDisabled,\n  items,\n  onBlur,\n  onChange,\n  placeholder,\n  selectedItems,\n  variant = 'primary'\n}) {\n  _s();\n\n  const allItems = React.useMemo(() => [...actions, ...items], [actions, items]);\n  const {\n    getDropdownProps,\n    setSelectedItems\n  } = useMultipleSelection({\n    selectedItems\n  });\n  React.useEffect(() => {\n    setSelectedItems(selectedItems);\n  }, [setSelectedItems, selectedItems]);\n  const selectedItemsSet = React.useMemo(() => new Set(selectedItems), [selectedItems]);\n  const handleChange = React.useCallback(selectedItem => {\n    if (!onChange || selectedItem != null && selectedItem.onClick) {\n      return;\n    }\n\n    if (selectedItemsSet.has(selectedItem)) {\n      selectedItemsSet.delete(selectedItem);\n    } else {\n      selectedItemsSet.add(selectedItem);\n    }\n\n    onChange(Array.from(selectedItemsSet), selectedItem);\n  }, [onChange, selectedItemsSet]);\n  const handleChangeRef = React.useRef(handleChange);\n  React.useEffect(() => {\n    handleChangeRef.current = handleChange;\n  }, [handleChange]);\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getMenuProps,\n    highlightedIndex,\n    getItemProps\n  } = useSelect({\n    selectedItem: null,\n    id,\n    items: allItems,\n    stateReducer: (state, actionAndChanges) => {\n      const {\n        changes,\n        type\n      } = actionAndChanges;\n\n      switch (type) {\n        case useSelect.stateChangeTypes.MenuKeyDownEnter:\n        case useSelect.stateChangeTypes.MenuKeyDownSpaceButton:\n        case useSelect.stateChangeTypes.ItemClick:\n          {\n            return Object.assign({}, state, {\n              selectedItem: changes.selectedItem,\n              isOpen: true // keep the menu open after selection.\n\n            });\n          }\n      }\n\n      return Object.assign({}, state, changes);\n    },\n    onStateChange: ({\n      type,\n      selectedItem\n    }) => {\n      switch (type) {\n        case useSelect.stateChangeTypes.MenuKeyDownEnter:\n        case useSelect.stateChangeTypes.MenuKeyDownSpaceButton:\n        case useSelect.stateChangeTypes.ItemClick:\n          {\n            if (!selectedItem) {\n              return;\n            }\n\n            if (selectedItem.onClick) {\n              return selectedItem.onClick();\n            }\n\n            handleChangeRef.current(selectedItem);\n            break;\n          }\n\n        default:\n          break;\n      }\n    }\n  });\n  const buttonProps = Object.assign({}, getToggleButtonProps(getDropdownProps({\n    disabled: isDisabled,\n    preventKeyAction: isOpen\n  })));\n  return /*#__PURE__*/_jsxDEV(Root, {\n    className: className,\n    isOpen: isOpen,\n    onBlur: e => {\n      if (e.relatedTarget && e.relatedTarget === buttonProps.ref.current) {\n        return;\n      }\n\n      onBlur == null ? void 0 : onBlur();\n    },\n    variant: variant,\n    children: [/*#__PURE__*/_jsxDEV(Button, Object.assign({}, buttonProps, {\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      children: [placeholder, hasIndicator && /*#__PURE__*/_jsxDEV(DropdownIcon, {\n        iconCode: \"chevron-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 26\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, Object.assign({}, getMenuProps(), {\n      \"aria-labelledby\": buttonProps.id,\n      children: isOpen && allItems.map((item, index) => {\n        const isAction = item.onClick;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, Object.assign({}, getItemProps({\n            item,\n            index,\n            disabled: item.isDisabled\n          }), {\n            alignment: item.alignment,\n            hasSectionBreak: item.hasSectionBreak,\n            isAction: isAction,\n            isHighlighted: highlightedIndex === index,\n            variant: variant,\n            width: item.width,\n            children: [!isAction && /*#__PURE__*/_jsxDEV(CheckboxIcon, {\n              iconCode: selectedItemsSet.has(item) ? 'check-square' : 'square'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 21\n            }, this), item.display]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), item.hasSectionBreak && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 42\n          }, this)]\n        }, `${item.display}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelect, \"i+Gn5obh4FYy/FbMA7H1c97hpFg=\", false, function () {\n  return [useMultipleSelection, useSelect];\n});\n\n_c = MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"names":["React","useMultipleSelection","useSelect","Button","Divider","DropdownIcon","Menu","MenuItem","Root","CheckboxIcon","MultiSelect","actions","ariaLabel","ariaLabelledBy","className","hasIndicator","id","isDisabled","items","onBlur","onChange","placeholder","selectedItems","variant","allItems","useMemo","getDropdownProps","setSelectedItems","useEffect","selectedItemsSet","Set","handleChange","useCallback","selectedItem","onClick","has","delete","add","Array","from","handleChangeRef","useRef","current","isOpen","getToggleButtonProps","getMenuProps","highlightedIndex","getItemProps","stateReducer","state","actionAndChanges","changes","type","stateChangeTypes","MenuKeyDownEnter","MenuKeyDownSpaceButton","ItemClick","onStateChange","buttonProps","disabled","preventKeyAction","e","relatedTarget","ref","map","item","index","isAction","alignment","hasSectionBreak","width","display"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/design-system/src/lib/components/Dropdown/MultiSelect/MultiSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMultipleSelection, useSelect } from 'downshift';\n\nimport {\n  Button,\n  Divider,\n  DropdownIcon,\n  Menu,\n  MenuItem,\n  Root,\n  Variant,\n} from '../DropdownBase.styles';\nimport { BaseMenuItem } from '../DropdownBase.types';\nimport { CheckboxIcon } from './MultiSelect.styles';\n\nexport interface MenuItem<T> extends BaseMenuItem {\n  /**\n   * Text alignment.\n   */\n  alignment?: 'left' | 'center' | 'right';\n  /**\n   * Only for Action Links - Click handler for that action link.\n   */\n  onClick?: () => void;\n  /**\n   * Meta data to be attached to an item.\n   */\n  meta?: T;\n  /**\n   * Width of the item.\n   */\n  width?: string;\n}\n\ninterface MultiSelectProps<T> {\n  /**\n   * Action links to be rendered on top of checkboxes.\n   */\n  actions?: MenuItem<T>[];\n  /**\n   * Aria label for the select button in case id is not passed and linked aria-labelledby.\n   */\n  ariaLabel?: string;\n  /**\n   * Aria labelledby.\n   */\n  ariaLabelledBy?: string;\n  /**\n   * Available className to be attached to the root element.\n   */\n  className?: string;\n  /**\n   * Option to include the chevron indicator.\n   */\n  hasIndicator?: boolean;\n  /**\n   * Id to be attached to a button.\n   */\n  id?: string;\n  /**\n   * Disable the select button.\n   */\n  isDisabled?: boolean;\n  /**\n   * Multi-select checkbox items.\n   */\n  items: MenuItem<T>[];\n  /**\n   * Handler for blur event.\n   */\n  onBlur?: () => void;\n  /**\n   * Handler for change event which includes the suggested list of items and the item clicked.\n   */\n  onChange?: (items: MenuItem<T>[], meta: MenuItem<T>) => void;\n  /**\n   * Text for select button.\n   */\n  placeholder: React.ReactNode;\n  /**\n   * List of selected items to be checked.\n   */\n  selectedItems: MenuItem<T>[];\n  /**\n   * Style variant.\n   */\n  variant: Variant;\n}\n\nexport function MultiSelect<T>({\n  actions = [] as MenuItem<T>[],\n  ariaLabel,\n  ariaLabelledBy,\n  className,\n  hasIndicator,\n  id,\n  isDisabled,\n  items,\n  onBlur,\n  onChange,\n  placeholder,\n  selectedItems,\n  variant = 'primary',\n}: MultiSelectProps<T>) {\n  const allItems = React.useMemo(\n    () => [...actions, ...items],\n    [actions, items]\n  );\n  const { getDropdownProps, setSelectedItems } = useMultipleSelection({\n    selectedItems,\n  });\n\n  React.useEffect(() => {\n    setSelectedItems(selectedItems);\n  }, [setSelectedItems, selectedItems]);\n\n  const selectedItemsSet = React.useMemo(\n    () => new Set(selectedItems),\n    [selectedItems]\n  );\n\n  const handleChange = React.useCallback(\n    (selectedItem: MenuItem<T>) => {\n      if (!onChange || selectedItem?.onClick) {\n        return;\n      }\n\n      if (selectedItemsSet.has(selectedItem)) {\n        selectedItemsSet.delete(selectedItem);\n      } else {\n        selectedItemsSet.add(selectedItem);\n      }\n\n      onChange(Array.from(selectedItemsSet), selectedItem);\n    },\n    [onChange, selectedItemsSet]\n  );\n\n  const handleChangeRef = React.useRef(handleChange);\n  React.useEffect(() => {\n    handleChangeRef.current = handleChange;\n  }, [handleChange]);\n\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getMenuProps,\n    highlightedIndex,\n    getItemProps,\n  } = useSelect({\n    selectedItem: null,\n    id,\n    items: allItems,\n    stateReducer: (state, actionAndChanges) => {\n      const { changes, type } = actionAndChanges;\n      switch (type) {\n        case useSelect.stateChangeTypes.MenuKeyDownEnter:\n        case useSelect.stateChangeTypes.MenuKeyDownSpaceButton:\n        case useSelect.stateChangeTypes.ItemClick: {\n          return {\n            ...state,\n            selectedItem: changes.selectedItem,\n            isOpen: true, // keep the menu open after selection.\n          };\n        }\n      }\n      return { ...state, ...changes };\n    },\n    onStateChange: ({ type, selectedItem }) => {\n      switch (type) {\n        case useSelect.stateChangeTypes.MenuKeyDownEnter:\n        case useSelect.stateChangeTypes.MenuKeyDownSpaceButton:\n        case useSelect.stateChangeTypes.ItemClick: {\n          if (!selectedItem) {\n            return;\n          }\n\n          if (selectedItem.onClick) {\n            return selectedItem.onClick();\n          }\n\n          handleChangeRef.current(selectedItem);\n          break;\n        }\n        default:\n          break;\n      }\n    },\n  });\n\n  const buttonProps = {\n    ...getToggleButtonProps(\n      getDropdownProps({ disabled: isDisabled, preventKeyAction: isOpen })\n    ),\n  };\n\n  return (\n    <Root\n      className={className}\n      isOpen={isOpen}\n      onBlur={(e) => {\n        if (e.relatedTarget && e.relatedTarget === buttonProps.ref.current) {\n          return;\n        }\n        onBlur?.();\n      }}\n      variant={variant}\n    >\n      <Button\n        {...buttonProps}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n      >\n        {placeholder}\n        {hasIndicator && <DropdownIcon iconCode=\"chevron-down\" />}\n      </Button>\n\n      <Menu {...getMenuProps()} aria-labelledby={buttonProps.id}>\n        {isOpen &&\n          allItems.map((item, index) => {\n            const isAction = item.onClick;\n\n            return (\n              <React.Fragment key={`${item.display}-${index}`}>\n                <MenuItem\n                  {...getItemProps({\n                    item,\n                    index,\n                    disabled: item.isDisabled,\n                  })}\n                  alignment={item.alignment}\n                  hasSectionBreak={item.hasSectionBreak}\n                  isAction={isAction}\n                  isHighlighted={highlightedIndex === index}\n                  variant={variant}\n                  width={item.width}\n                >\n                  {!isAction && (\n                    <CheckboxIcon\n                      iconCode={\n                        selectedItemsSet.has(item) ? 'check-square' : 'square'\n                      }\n                    />\n                  )}\n\n                  {item.display}\n                </MenuItem>\n\n                {item.hasSectionBreak && <Divider />}\n              </React.Fragment>\n            );\n          })}\n      </Menu>\n    </Root>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}