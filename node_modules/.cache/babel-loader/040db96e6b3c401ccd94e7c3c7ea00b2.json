{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport { convertToUTC } from '@luma-fe-workspace/common';\n\nconst setActiveResponses = (RFQs, userName) => {\n  const RFQsQuoted = RFQs.map(RFQ => {\n    var _activeResponse;\n\n    let activeResponse;\n    const defaultQuoteDeadlineOffsetMs = 5 * 60000;\n\n    if (RFQ.quotes) {\n      activeResponse = RFQ.quotes.find(quote => {\n        // Finding a user response to the RFQ that hasn't expired\n        if (quote.status === 'OTW') {\n          return quote.createdByUserId && quote.createdByUserId === userName;\n        }\n\n        return false;\n      });\n    }\n\n    return Object.assign({}, RFQ, {\n      quoteDeadline: activeResponse ? convertToUTC(activeResponse.goodUntilTime).getTime() : defaultQuoteDeadlineOffsetMs,\n      price: (_activeResponse = activeResponse) == null ? void 0 : _activeResponse.quoteAmount,\n      activeResponse\n    });\n  });\n  return RFQsQuoted;\n};\n\nexport const selectSecondaries = state => state.secondaries;\nexport const selectSecurityDetailsCusip = state => selectSecondaries(state).securityDetailsCusip;\nexport const selectSecondariesQuotedAvailableRFQs = state => {\n  var _state$user$user;\n\n  const userName = (_state$user$user = state.user.user) == null ? void 0 : _state$user$user.userName;\n  const availableRFQs = selectSecondaries(state).availableRFQs;\n  let quotedRFQs = [];\n\n  if (availableRFQs && userName) {\n    quotedRFQs = setActiveResponses(availableRFQs, userName);\n  }\n\n  return quotedRFQs;\n};\nexport const selectMyRespondedRFQs = state => {\n  var _state$user$user2, _selectSecondaries$av;\n\n  const userName = (_state$user$user2 = state.user.user) == null ? void 0 : _state$user$user2.userName;\n  const myRespondedRFQs = (_selectSecondaries$av = selectSecondaries(state).availableRFQs) == null ? void 0 : _selectSecondaries$av.filter(RFQ => {\n    var _RFQ$quotes;\n\n    return (_RFQ$quotes = RFQ.quotes) == null ? void 0 : _RFQ$quotes.find(quote => quote.createdByUserId && quote.createdByUserId === userName);\n  });\n  let quotedRFQs = [];\n\n  if (myRespondedRFQs && userName) {\n    quotedRFQs = setActiveResponses(myRespondedRFQs, userName);\n  }\n\n  return quotedRFQs;\n};\nexport const selectMessageObject = state => selectSecondaries(state).message;","map":{"version":3,"names":["convertToUTC","setActiveResponses","RFQs","userName","RFQsQuoted","map","RFQ","activeResponse","defaultQuoteDeadlineOffsetMs","quotes","find","quote","status","createdByUserId","quoteDeadline","goodUntilTime","getTime","price","quoteAmount","selectSecondaries","state","secondaries","selectSecurityDetailsCusip","securityDetailsCusip","selectSecondariesQuotedAvailableRFQs","user","availableRFQs","quotedRFQs","selectMyRespondedRFQs","myRespondedRFQs","filter","selectMessageObject","message"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/redux/secondaries/selector.ts"],"sourcesContent":["import { convertToUTC } from '@luma-fe-workspace/common';\nimport type { RootState } from '../configureStore';\nimport {\n  SecondaryQuote,\n  SecondaryRequestForQuote,\n} from '../secondariesService/secondariesServiceEndpoints';\n\nexport interface RFQSearchQuoted extends SecondaryRequestForQuote {\n  // activeResponse is the users response to a singular RFQ\n  activeResponse?: SecondaryQuote;\n  quoteDeadline: number;\n  price?: number;\n}\n\nconst setActiveResponses = (\n  RFQs: SecondaryRequestForQuote[] | RFQSearchQuoted[],\n  userName: string\n) => {\n  const RFQsQuoted: RFQSearchQuoted[] = RFQs.map((RFQ) => {\n    let activeResponse;\n    const defaultQuoteDeadlineOffsetMs = 5 * 60000;\n    if (RFQ.quotes) {\n      activeResponse = RFQ.quotes.find((quote) => {\n        // Finding a user response to the RFQ that hasn't expired\n        if (quote.status === 'OTW') {\n          return quote.createdByUserId && quote.createdByUserId === userName;\n        }\n        return false;\n      });\n    }\n    return {\n      ...RFQ,\n      quoteDeadline: activeResponse\n        ? convertToUTC(activeResponse.goodUntilTime).getTime()\n        : defaultQuoteDeadlineOffsetMs,\n      price: activeResponse?.quoteAmount,\n      activeResponse,\n    };\n  });\n  return RFQsQuoted;\n};\n\nexport const selectSecondaries = (state: RootState) => state.secondaries;\nexport const selectSecurityDetailsCusip = (state: RootState) =>\n  selectSecondaries(state).securityDetailsCusip;\nexport const selectSecondariesQuotedAvailableRFQs = (state: RootState) => {\n  const userName = state.user.user?.userName;\n  const availableRFQs = selectSecondaries(state).availableRFQs;\n  let quotedRFQs: SecondaryRequestForQuote[] = [];\n  if (availableRFQs && userName) {\n    quotedRFQs = setActiveResponses(availableRFQs, userName);\n  }\n  return quotedRFQs;\n};\nexport const selectMyRespondedRFQs = (state: RootState) => {\n  const userName = state.user.user?.userName;\n  const myRespondedRFQs = selectSecondaries(state).availableRFQs?.filter(\n    (RFQ: SecondaryRequestForQuote) =>\n      RFQ.quotes?.find(\n        (quote: SecondaryQuote) =>\n          quote.createdByUserId && quote.createdByUserId === userName\n      )\n  );\n  let quotedRFQs: SecondaryRequestForQuote[] = [];\n  if (myRespondedRFQs && userName) {\n    quotedRFQs = setActiveResponses(myRespondedRFQs, userName);\n  }\n  return quotedRFQs;\n};\nexport const selectMessageObject = (state: RootState) =>\n  selectSecondaries(state).message;\n"],"mappings":";AAAA,SAASA,YAAT,QAA6B,2BAA7B;;AAcA,MAAMC,kBAAkB,GAAG,CACzBC,IADyB,EAEzBC,QAFyB,KAGtB;EACH,MAAMC,UAA6B,GAAGF,IAAI,CAACG,GAAL,CAAUC,GAAD,IAAS;IAAA;;IACtD,IAAIC,cAAJ;IACA,MAAMC,4BAA4B,GAAG,IAAI,KAAzC;;IACA,IAAIF,GAAG,CAACG,MAAR,EAAgB;MACdF,cAAc,GAAGD,GAAG,CAACG,MAAJ,CAAWC,IAAX,CAAiBC,KAAD,IAAW;QAC1C;QACA,IAAIA,KAAK,CAACC,MAAN,KAAiB,KAArB,EAA4B;UAC1B,OAAOD,KAAK,CAACE,eAAN,IAAyBF,KAAK,CAACE,eAAN,KAA0BV,QAA1D;QACD;;QACD,OAAO,KAAP;MACD,CANgB,CAAjB;IAOD;;IACD,yBACKG,GADL;MAEEQ,aAAa,EAAEP,cAAc,GACzBP,YAAY,CAACO,cAAc,CAACQ,aAAhB,CAAZ,CAA2CC,OAA3C,EADyB,GAEzBR,4BAJN;MAKES,KAAK,qBAAEV,cAAF,qBAAE,gBAAgBW,WALzB;MAMEX;IANF;EAQD,CApBqC,CAAtC;EAqBA,OAAOH,UAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMe,iBAAiB,GAAIC,KAAD,IAAsBA,KAAK,CAACC,WAAtD;AACP,OAAO,MAAMC,0BAA0B,GAAIF,KAAD,IACxCD,iBAAiB,CAACC,KAAD,CAAjB,CAAyBG,oBADpB;AAEP,OAAO,MAAMC,oCAAoC,GAAIJ,KAAD,IAAsB;EAAA;;EACxE,MAAMjB,QAAQ,uBAAGiB,KAAK,CAACK,IAAN,CAAWA,IAAd,qBAAG,iBAAiBtB,QAAlC;EACA,MAAMuB,aAAa,GAAGP,iBAAiB,CAACC,KAAD,CAAjB,CAAyBM,aAA/C;EACA,IAAIC,UAAsC,GAAG,EAA7C;;EACA,IAAID,aAAa,IAAIvB,QAArB,EAA+B;IAC7BwB,UAAU,GAAG1B,kBAAkB,CAACyB,aAAD,EAAgBvB,QAAhB,CAA/B;EACD;;EACD,OAAOwB,UAAP;AACD,CARM;AASP,OAAO,MAAMC,qBAAqB,GAAIR,KAAD,IAAsB;EAAA;;EACzD,MAAMjB,QAAQ,wBAAGiB,KAAK,CAACK,IAAN,CAAWA,IAAd,qBAAG,kBAAiBtB,QAAlC;EACA,MAAM0B,eAAe,4BAAGV,iBAAiB,CAACC,KAAD,CAAjB,CAAyBM,aAA5B,qBAAG,sBAAwCI,MAAxC,CACrBxB,GAAD;IAAA;;IAAA,sBACEA,GAAG,CAACG,MADN,qBACE,YAAYC,IAAZ,CACGC,KAAD,IACEA,KAAK,CAACE,eAAN,IAAyBF,KAAK,CAACE,eAAN,KAA0BV,QAFvD,CADF;EAAA,CADsB,CAAxB;EAOA,IAAIwB,UAAsC,GAAG,EAA7C;;EACA,IAAIE,eAAe,IAAI1B,QAAvB,EAAiC;IAC/BwB,UAAU,GAAG1B,kBAAkB,CAAC4B,eAAD,EAAkB1B,QAAlB,CAA/B;EACD;;EACD,OAAOwB,UAAP;AACD,CAdM;AAeP,OAAO,MAAMI,mBAAmB,GAAIX,KAAD,IACjCD,iBAAiB,CAACC,KAAD,CAAjB,CAAyBY,OADpB"},"metadata":{},"sourceType":"module"}