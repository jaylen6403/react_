{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Mutex } from 'async-mutex';\nimport { logout, refreshTokenSuccess } from '../redux/auth/actions';\nimport { selectRefreshToken } from '../redux/auth/selector';\nimport { apiUrl, oauthClientId } from '@luma-fe-workspace/common';\nconst mutex = new Mutex();\nconst refreshQuery = fetchBaseQuery({\n  baseUrl: apiUrl\n});\nexport function fetchBaseQueryWithRefresh(...baseQueryArgs) {\n  return async (args, api, extraOptions) => {\n    var _result$error;\n\n    await mutex.waitForUnlock();\n    const baseQuery = fetchBaseQuery(...baseQueryArgs);\n    let result = await baseQuery(args, api, extraOptions);\n\n    if (typeof result.error === 'object' && ((_result$error = result.error) == null ? void 0 : _result$error.status) === 401) {\n      if (!mutex.isLocked()) {\n        const release = await mutex.acquire();\n\n        try {\n          const refreshToken = selectRefreshToken(api.getState());\n          const refreshResult = await refreshQuery({\n            url: `${apiUrl}/auth-service/oauth/token?grant_type=refresh_token&client_id=${oauthClientId}&refresh_token=${refreshToken}`,\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }, api, extraOptions);\n\n          if (refreshResult.data) {\n            api.dispatch(refreshTokenSuccess(refreshResult.data));\n            result = await baseQuery(args, api, extraOptions);\n          } else {\n            api.dispatch(logout);\n          }\n        } finally {\n          release();\n        }\n      } else {\n        await mutex.waitForUnlock();\n        result = await baseQuery(args, api, extraOptions);\n      }\n    }\n\n    return result;\n  };\n}","map":{"version":3,"names":["fetchBaseQuery","Mutex","logout","refreshTokenSuccess","selectRefreshToken","apiUrl","oauthClientId","mutex","refreshQuery","baseUrl","fetchBaseQueryWithRefresh","baseQueryArgs","args","api","extraOptions","waitForUnlock","baseQuery","result","error","status","isLocked","release","acquire","refreshToken","getState","refreshResult","url","method","headers","Accept","data","dispatch"],"sources":["/Users/jchen/Documents/GitHub/luma-fe-workspace/libs/redux/src/utils/fetchBaseQueryWithRefresh.ts"],"sourcesContent":["import { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes';\nimport {\n  BaseQueryFn,\n  fetchBaseQuery,\n  FetchBaseQueryError,\n  FetchBaseQueryMeta,\n} from '@reduxjs/toolkit/query/react';\nimport { Mutex } from 'async-mutex';\nimport { AuthResponse } from '../redux/authService/slice';\nimport type { RootState } from '../redux/configureStore';\nimport { logout, refreshTokenSuccess } from '../redux/auth/actions';\nimport { selectRefreshToken } from '../redux/auth/selector';\nimport { apiUrl, oauthClientId } from '@luma-fe-workspace/common';\n\nconst mutex = new Mutex();\n\nconst refreshQuery = fetchBaseQuery({ baseUrl: apiUrl });\n\nexport function fetchBaseQueryWithRefresh(\n  ...baseQueryArgs: Parameters<typeof fetchBaseQuery>\n): BaseQueryFn {\n  return async (args, api, extraOptions) => {\n    await mutex.waitForUnlock();\n\n    const baseQuery = fetchBaseQuery(...baseQueryArgs);\n    let result = await baseQuery(args, api, extraOptions);\n\n    if (typeof result.error === 'object' && result.error?.status === 401) {\n      if (!mutex.isLocked()) {\n        const release = await mutex.acquire();\n\n        try {\n          const refreshToken = selectRefreshToken(api.getState() as RootState);\n          const refreshResult = (await refreshQuery(\n            {\n              url: `${apiUrl}/auth-service/oauth/token?grant_type=refresh_token&client_id=${oauthClientId}&refresh_token=${refreshToken}`,\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n              },\n            },\n            api,\n            extraOptions\n          )) as QueryReturnValue<\n            AuthResponse,\n            FetchBaseQueryError,\n            FetchBaseQueryMeta\n          >;\n\n          if (refreshResult.data) {\n            api.dispatch(refreshTokenSuccess(refreshResult.data));\n\n            result = await baseQuery(args, api, extraOptions);\n          } else {\n            api.dispatch(logout);\n          }\n        } finally {\n          release();\n        }\n      } else {\n        await mutex.waitForUnlock();\n        result = await baseQuery(args, api, extraOptions);\n      }\n    }\n\n    return result;\n  };\n}\n"],"mappings":";;;AACA,SAEEA,cAFF,QAKO,8BALP;AAMA,SAASC,KAAT,QAAsB,aAAtB;AAGA,SAASC,MAAT,EAAiBC,mBAAjB,QAA4C,uBAA5C;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,2BAAtC;AAEA,MAAMC,KAAK,GAAG,IAAIN,KAAJ,EAAd;AAEA,MAAMO,YAAY,GAAGR,cAAc,CAAC;EAAES,OAAO,EAAEJ;AAAX,CAAD,CAAnC;AAEA,OAAO,SAASK,yBAAT,CACL,GAAGC,aADE,EAEQ;EACb,OAAO,OAAOC,IAAP,EAAaC,GAAb,EAAkBC,YAAlB,KAAmC;IAAA;;IACxC,MAAMP,KAAK,CAACQ,aAAN,EAAN;IAEA,MAAMC,SAAS,GAAGhB,cAAc,CAAC,GAAGW,aAAJ,CAAhC;IACA,IAAIM,MAAM,GAAG,MAAMD,SAAS,CAACJ,IAAD,EAAOC,GAAP,EAAYC,YAAZ,CAA5B;;IAEA,IAAI,OAAOG,MAAM,CAACC,KAAd,KAAwB,QAAxB,IAAoC,kBAAAD,MAAM,CAACC,KAAP,mCAAcC,MAAd,MAAyB,GAAjE,EAAsE;MACpE,IAAI,CAACZ,KAAK,CAACa,QAAN,EAAL,EAAuB;QACrB,MAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,OAAN,EAAtB;;QAEA,IAAI;UACF,MAAMC,YAAY,GAAGnB,kBAAkB,CAACS,GAAG,CAACW,QAAJ,EAAD,CAAvC;UACA,MAAMC,aAAa,GAAI,MAAMjB,YAAY,CACvC;YACEkB,GAAG,EAAG,GAAErB,MAAO,gEAA+DC,aAAc,kBAAiBiB,YAAa,EAD5H;YAEEI,MAAM,EAAE,MAFV;YAGEC,OAAO,EAAE;cACPC,MAAM,EAAE,kBADD;cAEP,gBAAgB;YAFT;UAHX,CADuC,EASvChB,GATuC,EAUvCC,YAVuC,CAAzC;;UAiBA,IAAIW,aAAa,CAACK,IAAlB,EAAwB;YACtBjB,GAAG,CAACkB,QAAJ,CAAa5B,mBAAmB,CAACsB,aAAa,CAACK,IAAf,CAAhC;YAEAb,MAAM,GAAG,MAAMD,SAAS,CAACJ,IAAD,EAAOC,GAAP,EAAYC,YAAZ,CAAxB;UACD,CAJD,MAIO;YACLD,GAAG,CAACkB,QAAJ,CAAa7B,MAAb;UACD;QACF,CA1BD,SA0BU;UACRmB,OAAO;QACR;MACF,CAhCD,MAgCO;QACL,MAAMd,KAAK,CAACQ,aAAN,EAAN;QACAE,MAAM,GAAG,MAAMD,SAAS,CAACJ,IAAD,EAAOC,GAAP,EAAYC,YAAZ,CAAxB;MACD;IACF;;IAED,OAAOG,MAAP;EACD,CA9CD;AA+CD"},"metadata":{},"sourceType":"module"}