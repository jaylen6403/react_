"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const path = require("path");
const literals_1 = require("@angular-devkit/core/src/utils/literals");
const devkit_1 = require("@nrwl/devkit");
function update() {
    return (0, schematics_1.chain)([
        displayInformation,
        addCustomTypings,
        (0, workspace_1.updateWorkspaceInTree)(updateBuilderWebpackOption),
        (0, workspace_1.updatePackagesInPackageJson)(path.join(__dirname, '../../../', 'migrations.json'), '8.10.0'),
    ]);
}
exports.default = update;
function displayInformation(host, context) {
    context.logger.info((0, literals_1.stripIndents) `
  We've added SVG and SVGR support for React applications. If you are using this
  feature, please update your jest.config.js file(s) with the new transform.
  
  \`\`\`
  transform: {
    '^.+\\\\.[tj]sx?$': 'ts-jest',
    '^(?!.*\\\\.(js|jsx|ts|tsx|css|json)$)': '@nrwl/react/plugins/jest' // NEW!
  }
  \`\`\`
  `);
}
function addCustomTypings(host) {
    const workspace = (0, workspace_1.readWorkspace)(host);
    return (0, schematics_1.chain)([
        ...Object.keys(workspace.projects).map((k) => {
            const p = workspace.projects[k];
            if (p.projectType !== 'application') {
                return (0, schematics_1.noop)();
            }
            if (isReactProject(p)) {
                return (0, workspace_1.updateJsonInTree)(path.join(p.root, 'tsconfig.json'), (json) => {
                    const files = json.files || [];
                    files.push(`${(0, devkit_1.offsetFromRoot)(p.root)}node_modules/@nrwl/react/typings/cssmodule.d.ts`, `${(0, devkit_1.offsetFromRoot)(p.root)}node_modules/@nrwl/react/typings/image.d.ts`);
                    json.files = files;
                    return json;
                });
            }
            else {
                return (0, schematics_1.noop)();
            }
        }),
        (0, workspace_1.formatFiles)(),
    ]);
}
function updateBuilderWebpackOption(json) {
    Object.keys(json.projects).map((k) => {
        const p = json.projects[k];
        if (isReactProject(p)) {
            p.architect.build.options.webpackConfig = '@nrwl/react/plugins/webpack';
        }
    });
    return json;
}
function isReactProject(p) {
    const buildArchitect = p.architect && p.architect.build ? p.architect.build : null;
    return (buildArchitect &&
        (buildArchitect.builder === '@nrwl/web:webpack' ||
            buildArchitect.builder === '@nrwl/web:build') &&
        (buildArchitect.options.webpackConfig === '@nrwl/react/plugins/babel' ||
            buildArchitect.options.webpackConfig === '@nrwl/react/plugins/webpack'));
}
//# sourceMappingURL=update-8-10-0.js.map