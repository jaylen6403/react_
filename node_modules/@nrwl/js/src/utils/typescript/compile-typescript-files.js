"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileTypeScriptFiles = void 0;
const tslib_1 = require("tslib");
const compilation_1 = require("@nrwl/workspace/src/utilities/typescript/compilation");
const rxjs_1 = require("rxjs");
const load_ts_plugins_1 = require("./load-ts-plugins");
function compileTypeScriptFiles(options, context, postCompleteAction) {
    const { compilerPluginHooks } = (0, load_ts_plugins_1.loadTsPlugins)(options.transformers);
    const getCustomTransformers = (program) => ({
        before: compilerPluginHooks.beforeHooks.map((hook) => hook(program)),
        after: compilerPluginHooks.afterHooks.map((hook) => hook(program)),
        afterDeclarations: compilerPluginHooks.afterDeclarationsHooks.map((hook) => hook(program)),
    });
    // const tcsOptions = {
    //   outputPath: options.normalizedOutputPath,
    //   projectName: context.projectName,
    //   projectRoot: libRoot,
    //   tsConfig: tsConfigPath,
    //   deleteOutputPath: options.deleteOutputPath,
    //   rootDir: options.srcRootForCompilationRoot,
    //   watch: options.watch,
    //   getCustomTransformers,
    // };
    const tscOptions = {
        outputPath: options.outputPath,
        projectName: context.projectName,
        projectRoot: options.projectRoot,
        tsConfig: options.tsConfig,
        // deleteOutputPath: options.deleteOutputPath,
        // rootDir: options.srcRootForCompilationRoot,
        watch: options.watch,
        getCustomTransformers,
    };
    return new rxjs_1.Observable((subscriber) => {
        if (options.watch) {
            const watcher = (0, compilation_1.compileTypeScriptWatcher)(tscOptions, (d) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
                if (d.code === 6194) {
                    yield postCompleteAction();
                    subscriber.next({ success: true });
                }
            }));
            return () => {
                watcher.close();
                subscriber.complete();
            };
        }
        const result = (0, compilation_1.compileTypeScript)(tscOptions);
        postCompleteAction().then(() => {
            subscriber.next(result);
            subscriber.complete();
        });
        return () => {
            subscriber.complete();
        };
    });
}
exports.compileTypeScriptFiles = compileTypeScriptFiles;
//# sourceMappingURL=compile-typescript-files.js.map